using System;
using System.Collections.Generic;
using System.Web;
using System.Data.OleDb;
using System.Data;

public sealed class OleHelper
{

	#region private utility methods & constructors

	private OleHelper() { }
	#endregion private utility methods & constructors

	#region ExecuteDataSet

	/// <summary>
	/// Execute a OleCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction.
	/// </summary>
	/// <remarks>
	/// e.g.: 
	///  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
	/// </remarks>
	/// <param name="transaction">a valid OleDBTransaction</param>
	/// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
	/// <param name="commandText">the stored procedure name or T-SQL command</param>
	/// <returns>a dataset containing the resultset generated by the command</returns>
	public static DataSet ExecuteDataset(OleDbConnection connection, OleDbTransaction transaction, CommandType commandType, string commandText)
	{

		//return ExecuteDataset(transaction, commandType, commandText);
		//create a command and prepare it for execution
		OleDbCommand cmd = new OleDbCommand();
		PrepareCommand(cmd, connection, transaction, commandType, commandText);

		//create the DataAdapter & DataSet
		OleDbDataAdapter da = new OleDbDataAdapter(cmd);

		DataSet ds = new DataSet();

		//fill the DataSet using default values for DataTable names, etc.
		da.Fill(ds);
		cmd.Parameters.Clear();

		//return the dataset
		return ds;
	}

	#endregion ExecuteDataSet



	#region ExecuteNonQuery
	public static int ExecuteNonQuery(OleDbConnection connection, OleDbTransaction transaction, CommandType commandType, string commandText)
	{
		//create a command and prepare it for execution
		OleDbCommand cmd = new OleDbCommand();
		PrepareCommand(cmd, connection, transaction, commandType, commandText);
		//finally, execute the command.

		int retval = cmd.ExecuteNonQuery();
		cmd.Parameters.Clear();

		return retval;

	}

	#endregion ExecuteNonQuery



	#region PrepareCommand
	private static void PrepareCommand(OleDbCommand command, OleDbConnection connection, OleDbTransaction transaction, CommandType commandType, string commandText)
	{
		//if the provided connection is not open, we will open it
		if ( connection.State != ConnectionState.Open )
		{
			connection.Open();
		}

		//associate the connection with the command
		command.Connection = connection;

		//set the command text (stored procedure name or SQL statement)
		command.CommandText = commandText;

		//if we were provided a transaction, assign it.
		if ( transaction != null )
		{
			command.Transaction = transaction;
		}

		//set the command type
		command.CommandType = commandType;

		return;

	}

	#endregion PrepareCommand
}