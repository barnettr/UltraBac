	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file AddOnValue.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region AddOnValueEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AddOnValue"/> object.
	/// </remarks>
	public class AddOnValueEventArgs : System.EventArgs
	{
		private AddOnValueColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the AddOnValueEventArgs class.
		///</summary>
		public AddOnValueEventArgs(AddOnValueColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AddOnValueEventArgs class.
		///</summary>
		public AddOnValueEventArgs(AddOnValueColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The AddOnValueColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AddOnValueColumn" />
		public AddOnValueColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all AddOnValue related events.
	///</summary>
	public delegate void AddOnValueEventHandler(object sender, AddOnValueEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeAddOnValue' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(AddOnValue))]
	public abstract partial class AddOnValueBase : EntityBase, IEntityId<AddOnValueKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private AddOnValueEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//AddOnValueEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private AddOnValueEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<AddOnValue> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AddOnValueEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AddOnValueEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AddOnValueBase"/> instance.
		///</summary>
		public AddOnValueBase()
		{
			this.entityData = new AddOnValueEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AddOnValueBase"/> instance.
		///</summary>
		///<param name="addOnValueAddOnID"></param>
		///<param name="addOnValueName"></param>
		///<param name="addOnValueDescription"></param>
		///<param name="addOnValueSKU"></param>
		///<param name="addOnValueQuantityOnHand"></param>
		///<param name="addOnValueDefaultInd"></param>
		///<param name="addOnValueDisplayOrder"></param>
		///<param name="addOnValueImageFile"></param>
		///<param name="addOnValuePrice"></param>
		///<param name="addOnValueWeight"></param>
		public AddOnValueBase(System.Int32 addOnValueAddOnID, System.String addOnValueName, System.String addOnValueDescription, 
			System.String addOnValueSKU, System.Int32 addOnValueQuantityOnHand, System.Boolean addOnValueDefaultInd, 
			System.Int32 addOnValueDisplayOrder, System.String addOnValueImageFile, System.Decimal addOnValuePrice, 
			System.Decimal addOnValueWeight)
		{
			this.entityData = new AddOnValueEntityData();
			this.backupData = null;

			this.AddOnID = addOnValueAddOnID;
			this.Name = addOnValueName;
			this.Description = addOnValueDescription;
			this.SKU = addOnValueSKU;
			this.QuantityOnHand = addOnValueQuantityOnHand;
			this.DefaultInd = addOnValueDefaultInd;
			this.DisplayOrder = addOnValueDisplayOrder;
			this.ImageFile = addOnValueImageFile;
			this.Price = addOnValuePrice;
			this.Weight = addOnValueWeight;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AddOnValue"/> instance.
		///</summary>
		///<param name="addOnValueAddOnID"></param>
		///<param name="addOnValueName"></param>
		///<param name="addOnValueDescription"></param>
		///<param name="addOnValueSKU"></param>
		///<param name="addOnValueQuantityOnHand"></param>
		///<param name="addOnValueDefaultInd"></param>
		///<param name="addOnValueDisplayOrder"></param>
		///<param name="addOnValueImageFile"></param>
		///<param name="addOnValuePrice"></param>
		///<param name="addOnValueWeight"></param>
		public static AddOnValue CreateAddOnValue(System.Int32 addOnValueAddOnID, System.String addOnValueName, System.String addOnValueDescription, 
			System.String addOnValueSKU, System.Int32 addOnValueQuantityOnHand, System.Boolean addOnValueDefaultInd, 
			System.Int32 addOnValueDisplayOrder, System.String addOnValueImageFile, System.Decimal addOnValuePrice, 
			System.Decimal addOnValueWeight)
		{
			AddOnValue newAddOnValue = new AddOnValue();
			newAddOnValue.AddOnID = addOnValueAddOnID;
			newAddOnValue.Name = addOnValueName;
			newAddOnValue.Description = addOnValueDescription;
			newAddOnValue.SKU = addOnValueSKU;
			newAddOnValue.QuantityOnHand = addOnValueQuantityOnHand;
			newAddOnValue.DefaultInd = addOnValueDefaultInd;
			newAddOnValue.DisplayOrder = addOnValueDisplayOrder;
			newAddOnValue.ImageFile = addOnValueImageFile;
			newAddOnValue.Price = addOnValuePrice;
			newAddOnValue.Weight = addOnValueWeight;
			return newAddOnValue;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnValueColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AddOnValueColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnValueColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AddOnValueColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnValueColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AddOnValueColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AddOnValueEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AddOnValueEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnValueColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AddOnValueColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AddOnValueEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AddOnValueEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the AddOnValueID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AddOnValueID
		{
			get
			{
				return this.entityData.AddOnValueID; 
			}
			
			set
			{
				if (this.entityData.AddOnValueID == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.AddOnValueID, this.entityData.AddOnValueID);
				this.entityData.AddOnValueID = value;
				this.EntityId.AddOnValueID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.AddOnValueID, this.entityData.AddOnValueID);
				OnPropertyChanged("AddOnValueID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddOnID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AddOnID
		{
			get
			{
				return this.entityData.AddOnID; 
			}
			
			set
			{
				if (this.entityData.AddOnID == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.AddOnID, this.entityData.AddOnID);
				this.entityData.AddOnID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.AddOnID, this.entityData.AddOnID);
				OnPropertyChanged("AddOnID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SKU property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String SKU
		{
			get
			{
				return this.entityData.SKU; 
			}
			
			set
			{
				if (this.entityData.SKU == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.SKU, this.entityData.SKU);
				this.entityData.SKU = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.SKU, this.entityData.SKU);
				OnPropertyChanged("SKU");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuantityOnHand property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 QuantityOnHand
		{
			get
			{
				return this.entityData.QuantityOnHand; 
			}
			
			set
			{
				if (this.entityData.QuantityOnHand == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.QuantityOnHand, this.entityData.QuantityOnHand);
				this.entityData.QuantityOnHand = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.QuantityOnHand, this.entityData.QuantityOnHand);
				OnPropertyChanged("QuantityOnHand");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean DefaultInd
		{
			get
			{
				return this.entityData.DefaultInd; 
			}
			
			set
			{
				if (this.entityData.DefaultInd == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.DefaultInd, this.entityData.DefaultInd);
				this.entityData.DefaultInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.DefaultInd, this.entityData.DefaultInd);
				OnPropertyChanged("DefaultInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageFile property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String ImageFile
		{
			get
			{
				return this.entityData.ImageFile; 
			}
			
			set
			{
				if (this.entityData.ImageFile == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.ImageFile, this.entityData.ImageFile);
				this.entityData.ImageFile = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.ImageFile, this.entityData.ImageFile);
				OnPropertyChanged("ImageFile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Weight property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Weight
		{
			get
			{
				return this.entityData.Weight; 
			}
			
			set
			{
				if (this.entityData.Weight == value)
					return;
					
					
				OnColumnChanging(AddOnValueColumn.Weight, this.entityData.Weight);
				this.entityData.Weight = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnValueColumn.Weight, this.entityData.Weight);
				OnPropertyChanged("Weight");
			}
		}
		

		#region Source Foreign Key Property
				
		private AddOn _addOnIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AddOn"/>.
		/// </summary>
		/// <value>The source AddOn for AddOnID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual AddOn AddOnIDSource
      	{
            get { return this._addOnIDSource; }
            set { this._addOnIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeAddOnValue"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AddOnValueID", "AddOnID", "Name", "Description", "SKU", "QuantityOnHand", "DefaultInd", "DisplayOrder", "ImageFile", "Price", "Weight"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AddOnValueEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AddOnValue) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AddOnValue>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AddOnValue);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AddOnValue Entity 
		///</summary>
		public virtual AddOnValue Copy()
		{
			//shallow copy entity
			AddOnValue copy = new AddOnValue();
			copy.AddOnValueID = this.AddOnValueID;
			copy.AddOnID = this.AddOnID;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.SKU = this.SKU;
			copy.QuantityOnHand = this.QuantityOnHand;
			copy.DefaultInd = this.DefaultInd;
			copy.DisplayOrder = this.DisplayOrder;
			copy.ImageFile = this.ImageFile;
			copy.Price = this.Price;
			copy.Weight = this.Weight;
					
			copy.AcceptChanges();
			return (AddOnValue)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AddOnValue Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AddOnValue DeepCopy()
		{
			return EntityHelper.Clone<AddOnValue>(this as AddOnValue);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AddOnValueBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AddOnValueBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AddOnValueBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AddOnValueBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AddOnValueBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AddOnValueBase Object1, AddOnValueBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AddOnValueID != Object2.AddOnValueID)
				equal = false;
			if (Object1.AddOnID != Object2.AddOnID)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.Description != Object2.Description)
				equal = false;
			if (Object1.SKU != Object2.SKU)
				equal = false;
			if (Object1.QuantityOnHand != Object2.QuantityOnHand)
				equal = false;
			if (Object1.DefaultInd != Object2.DefaultInd)
				equal = false;
			if (Object1.DisplayOrder != Object2.DisplayOrder)
				equal = false;
			if (Object1.ImageFile != Object2.ImageFile)
				equal = false;
			if (Object1.Price != Object2.Price)
				equal = false;
			if (Object1.Weight != Object2.Weight)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((AddOnValueBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static AddOnValueComparer GetComparer()
        {
            return new AddOnValueComparer();
        }
        */

        // Comparer delegates back to AddOnValue
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AddOnValue rhs, AddOnValueColumn which)
        {
            switch (which)
            {
            	
            	
            	case AddOnValueColumn.AddOnValueID:
            		return this.AddOnValueID.CompareTo(rhs.AddOnValueID);
            		
            		                 
            	
            	
            	case AddOnValueColumn.AddOnID:
            		return this.AddOnID.CompareTo(rhs.AddOnID);
            		
            		                 
            	
            	
            	case AddOnValueColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case AddOnValueColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case AddOnValueColumn.SKU:
            		return this.SKU.CompareTo(rhs.SKU);
            		
            		                 
            	
            	
            	case AddOnValueColumn.QuantityOnHand:
            		return this.QuantityOnHand.CompareTo(rhs.QuantityOnHand);
            		
            		                 
            	
            	
            	case AddOnValueColumn.DefaultInd:
            		return this.DefaultInd.CompareTo(rhs.DefaultInd);
            		
            		                 
            	
            	
            	case AddOnValueColumn.DisplayOrder:
            		return this.DisplayOrder.CompareTo(rhs.DisplayOrder);
            		
            		                 
            	
            	
            	case AddOnValueColumn.ImageFile:
            		return this.ImageFile.CompareTo(rhs.ImageFile);
            		
            		                 
            	
            	
            	case AddOnValueColumn.Price:
            		return this.Price.CompareTo(rhs.Price);
            		
            		                 
            	
            	
            	case AddOnValueColumn.Weight:
            		return this.Weight.CompareTo(rhs.Weight);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AddOnValueKey> Members
		
		// member variable for the EntityId property
		private AddOnValueKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public AddOnValueKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AddOnValueKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"AddOnValue" 
					+ this.AddOnValueID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- AddOnValueID: {0}{11}- AddOnID: {1}{11}- Name: {2}{11}- Description: {3}{11}- SKU: {4}{11}- QuantityOnHand: {5}{11}- DefaultInd: {6}{11}- DisplayOrder: {7}{11}- ImageFile: {8}{11}- Price: {9}{11}- Weight: {10}{11}", 
				this.AddOnValueID,
				this.AddOnID,
				this.Name,
				this.Description,
				this.SKU,
				this.QuantityOnHand,
				this.DefaultInd,
				this.DisplayOrder,
				this.ImageFile,
				this.Price,
				this.Weight,
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeAddOnValue' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class AddOnValueEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// AddOnValueID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeAddOnValue"</remarks>
			public System.Int32 AddOnValueID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AddOnID : 
		/// </summary>
		public System.Int32		  AddOnID = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// SKU : 
		/// </summary>
		public System.String		  SKU = string.Empty;
		
		/// <summary>
		/// QuantityOnHand : 
		/// </summary>
		public System.Int32		  QuantityOnHand = (int)0;
		
		/// <summary>
		/// DefaultInd : 
		/// </summary>
		public System.Boolean		  DefaultInd = false;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32		  DisplayOrder = (int)0;
		
		/// <summary>
		/// ImageFile : 
		/// </summary>
		public System.String		  ImageFile = string.Empty;
		
		/// <summary>
		/// Price : 
		/// </summary>
		public System.Decimal		  Price = 0.0m;
		
		/// <summary>
		/// Weight : 
		/// </summary>
		public System.Decimal		  Weight = 0.0m;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			AddOnValueEntityData _tmp = new AddOnValueEntityData();
						
			_tmp.AddOnValueID = this.AddOnValueID;
			
			_tmp.AddOnID = this.AddOnID;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.SKU = this.SKU;
			_tmp.QuantityOnHand = this.QuantityOnHand;
			_tmp.DefaultInd = this.DefaultInd;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.ImageFile = this.ImageFile;
			_tmp.Price = this.Price;
			_tmp.Weight = this.Weight;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Description");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"SKU");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ImageFile");
		}
   		#endregion
	
	} // End Class
	
	#region AddOnValueComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AddOnValueComparer : System.Collections.Generic.IComparer<AddOnValue>
	{
		AddOnValueColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AddOnValueComparer"/> class.
        /// </summary>
		public AddOnValueComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AddOnValueComparer(AddOnValueColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AddOnValue"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AddOnValue"/> to compare.</param>
        /// <param name="b">The second <c>AddOnValue</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AddOnValue a, AddOnValue b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AddOnValue entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AddOnValue a, AddOnValue b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AddOnValueColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AddOnValueKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AddOnValue"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AddOnValueKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AddOnValueKey class.
		/// </summary>
		public AddOnValueKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AddOnValueKey class.
		/// </summary>
		public AddOnValueKey(AddOnValueBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.addOnValueID = entity.AddOnValueID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AddOnValueKey class.
		/// </summary>
		public AddOnValueKey(System.Int32 addOnValueID)
		{
			#region Init Properties

			this.addOnValueID = addOnValueID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AddOnValueBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AddOnValueBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AddOnValueID property
		private System.Int32 addOnValueID;
		
		/// <summary>
		/// Gets or sets the AddOnValueID property.
		/// </summary>
		public System.Int32 AddOnValueID
		{
			get { return addOnValueID; }
			set
			{
				if ( Entity != null )
				{
					Entity.AddOnValueID = value;
				}
				
				addOnValueID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AddOnValueID = ( values["AddOnValueID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AddOnValueID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AddOnValueID", AddOnValueID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AddOnValueID: {0}{1}",
								AddOnValueID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AddOnValueColumn Enum
	
	/// <summary>
	/// Enumerate the AddOnValue columns.
	/// </summary>
	[Serializable]
	public enum AddOnValueColumn : int
	{
		/// <summary>
		/// AddOnValueID : 
		/// </summary>
		[EnumTextValue("AddOnValueID")]
		[ColumnEnum("AddOnValueID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AddOnValueID = 1,
		/// <summary>
		/// AddOnID : 
		/// </summary>
		[EnumTextValue("AddOnID")]
		[ColumnEnum("AddOnID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AddOnID = 2,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Name = 3,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Description = 4,
		/// <summary>
		/// SKU : 
		/// </summary>
		[EnumTextValue("SKU")]
		[ColumnEnum("SKU", typeof(System.String), System.Data.DbType.String, false, false, false)]
		SKU = 5,
		/// <summary>
		/// QuantityOnHand : 
		/// </summary>
		[EnumTextValue("QuantityOnHand")]
		[ColumnEnum("QuantityOnHand", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		QuantityOnHand = 6,
		/// <summary>
		/// DefaultInd : 
		/// </summary>
		[EnumTextValue("DefaultInd")]
		[ColumnEnum("DefaultInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		DefaultInd = 7,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DisplayOrder = 8,
		/// <summary>
		/// ImageFile : 
		/// </summary>
		[EnumTextValue("ImageFile")]
		[ColumnEnum("ImageFile", typeof(System.String), System.Data.DbType.String, false, false, false)]
		ImageFile = 9,
		/// <summary>
		/// Price : 
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Price = 10,
		/// <summary>
		/// Weight : 
		/// </summary>
		[EnumTextValue("Weight")]
		[ColumnEnum("Weight", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Weight = 11
	}//End enum

	#endregion AddOnValueColumn Enum

} // end namespace
