	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file OrderLineItem.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region OrderLineItemEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="OrderLineItem"/> object.
	/// </remarks>
	public class OrderLineItemEventArgs : System.EventArgs
	{
		private OrderLineItemColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the OrderLineItemEventArgs class.
		///</summary>
		public OrderLineItemEventArgs(OrderLineItemColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OrderLineItemEventArgs class.
		///</summary>
		public OrderLineItemEventArgs(OrderLineItemColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The OrderLineItemColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OrderLineItemColumn" />
		public OrderLineItemColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all OrderLineItem related events.
	///</summary>
	public delegate void OrderLineItemEventHandler(object sender, OrderLineItemEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeOrderLineItem' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(OrderLineItem))]
	public abstract partial class OrderLineItemBase : EntityBase, IEntityId<OrderLineItemKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private OrderLineItemEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//OrderLineItemEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private OrderLineItemEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<OrderLineItem> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event OrderLineItemEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrderLineItemEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrderLineItemBase"/> instance.
		///</summary>
		public OrderLineItemBase()
		{
			this.entityData = new OrderLineItemEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OrderLineItemBase"/> instance.
		///</summary>
		///<param name="orderLineItemOrderID"></param>
		///<param name="orderLineItemShipmentID"></param>
		///<param name="orderLineItemProductNum"></param>
		///<param name="orderLineItemName"></param>
		///<param name="orderLineItemDescription"></param>
		///<param name="orderLineItemQuantity"></param>
		///<param name="orderLineItemPrice"></param>
		///<param name="orderLineItemWeight"></param>
		///<param name="orderLineItemPrePromoPrice"></param>
		///<param name="orderLineItemCustom1"></param>
		///<param name="orderLineItemCustom2"></param>
		///<param name="orderLineItemCustom3"></param>
		///<param name="orderLineItemSKU"></param>
		///<param name="orderLineItemParentOrderLineItemID"></param>
		public OrderLineItemBase(System.Int32 orderLineItemOrderID, System.Int32? orderLineItemShipmentID, 
			System.String orderLineItemProductNum, System.String orderLineItemName, System.String orderLineItemDescription, 
			System.Int32? orderLineItemQuantity, System.Decimal? orderLineItemPrice, System.Decimal? orderLineItemWeight, 
			System.Decimal? orderLineItemPrePromoPrice, System.String orderLineItemCustom1, System.String orderLineItemCustom2, 
			System.String orderLineItemCustom3, System.String orderLineItemSKU, System.Int32? orderLineItemParentOrderLineItemID)
		{
			this.entityData = new OrderLineItemEntityData();
			this.backupData = null;

			this.OrderID = orderLineItemOrderID;
			this.ShipmentID = orderLineItemShipmentID;
			this.ProductNum = orderLineItemProductNum;
			this.Name = orderLineItemName;
			this.Description = orderLineItemDescription;
			this.Quantity = orderLineItemQuantity;
			this.Price = orderLineItemPrice;
			this.Weight = orderLineItemWeight;
			this.PrePromoPrice = orderLineItemPrePromoPrice;
			this.Custom1 = orderLineItemCustom1;
			this.Custom2 = orderLineItemCustom2;
			this.Custom3 = orderLineItemCustom3;
			this.SKU = orderLineItemSKU;
			this.ParentOrderLineItemID = orderLineItemParentOrderLineItemID;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="OrderLineItem"/> instance.
		///</summary>
		///<param name="orderLineItemOrderID"></param>
		///<param name="orderLineItemShipmentID"></param>
		///<param name="orderLineItemProductNum"></param>
		///<param name="orderLineItemName"></param>
		///<param name="orderLineItemDescription"></param>
		///<param name="orderLineItemQuantity"></param>
		///<param name="orderLineItemPrice"></param>
		///<param name="orderLineItemWeight"></param>
		///<param name="orderLineItemPrePromoPrice"></param>
		///<param name="orderLineItemCustom1"></param>
		///<param name="orderLineItemCustom2"></param>
		///<param name="orderLineItemCustom3"></param>
		///<param name="orderLineItemSKU"></param>
		///<param name="orderLineItemParentOrderLineItemID"></param>
		public static OrderLineItem CreateOrderLineItem(System.Int32 orderLineItemOrderID, System.Int32? orderLineItemShipmentID, 
			System.String orderLineItemProductNum, System.String orderLineItemName, System.String orderLineItemDescription, 
			System.Int32? orderLineItemQuantity, System.Decimal? orderLineItemPrice, System.Decimal? orderLineItemWeight, 
			System.Decimal? orderLineItemPrePromoPrice, System.String orderLineItemCustom1, System.String orderLineItemCustom2, 
			System.String orderLineItemCustom3, System.String orderLineItemSKU, System.Int32? orderLineItemParentOrderLineItemID)
		{
			OrderLineItem newOrderLineItem = new OrderLineItem();
			newOrderLineItem.OrderID = orderLineItemOrderID;
			newOrderLineItem.ShipmentID = orderLineItemShipmentID;
			newOrderLineItem.ProductNum = orderLineItemProductNum;
			newOrderLineItem.Name = orderLineItemName;
			newOrderLineItem.Description = orderLineItemDescription;
			newOrderLineItem.Quantity = orderLineItemQuantity;
			newOrderLineItem.Price = orderLineItemPrice;
			newOrderLineItem.Weight = orderLineItemWeight;
			newOrderLineItem.PrePromoPrice = orderLineItemPrePromoPrice;
			newOrderLineItem.Custom1 = orderLineItemCustom1;
			newOrderLineItem.Custom2 = orderLineItemCustom2;
			newOrderLineItem.Custom3 = orderLineItemCustom3;
			newOrderLineItem.SKU = orderLineItemSKU;
			newOrderLineItem.ParentOrderLineItemID = orderLineItemParentOrderLineItemID;
			return newOrderLineItem;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderLineItemColumn"/> which has raised the event.</param>
		public void OnColumnChanging(OrderLineItemColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderLineItemColumn"/> which has raised the event.</param>
		public void OnColumnChanged(OrderLineItemColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderLineItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(OrderLineItemColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OrderLineItemEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OrderLineItemEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderLineItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(OrderLineItemColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OrderLineItemEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OrderLineItemEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the OrderLineItemID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 OrderLineItemID
		{
			get
			{
				return this.entityData.OrderLineItemID; 
			}
			
			set
			{
				if (this.entityData.OrderLineItemID == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.OrderLineItemID, this.entityData.OrderLineItemID);
				this.entityData.OrderLineItemID = value;
				this.EntityId.OrderLineItemID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.OrderLineItemID, this.entityData.OrderLineItemID);
				OnPropertyChanged("OrderLineItemID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 OrderID
		{
			get
			{
				return this.entityData.OrderID; 
			}
			
			set
			{
				if (this.entityData.OrderID == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.OrderID, this.entityData.OrderID);
				this.entityData.OrderID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.OrderID, this.entityData.OrderID);
				OnPropertyChanged("OrderID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipmentID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsShipmentIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ShipmentID
		{
			get
			{
				return this.entityData.ShipmentID; 
			}
			
			set
			{
				if (this.entityData.ShipmentID == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.ShipmentID, this.entityData.ShipmentID);
				this.entityData.ShipmentID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.ShipmentID, this.entityData.ShipmentID);
				OnPropertyChanged("ShipmentID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductNum property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ProductNum
		{
			get
			{
				return this.entityData.ProductNum; 
			}
			
			set
			{
				if (this.entityData.ProductNum == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.ProductNum, this.entityData.ProductNum);
				this.entityData.ProductNum = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.ProductNum, this.entityData.ProductNum);
				OnPropertyChanged("ProductNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quantity property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Quantity
		{
			get
			{
				return this.entityData.Quantity; 
			}
			
			set
			{
				if (this.entityData.Quantity == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Quantity, this.entityData.Quantity);
				this.entityData.Quantity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Quantity, this.entityData.Quantity);
				OnPropertyChanged("Quantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Weight property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWeightNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Weight
		{
			get
			{
				return this.entityData.Weight; 
			}
			
			set
			{
				if (this.entityData.Weight == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Weight, this.entityData.Weight);
				this.entityData.Weight = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Weight, this.entityData.Weight);
				OnPropertyChanged("Weight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrePromoPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsPrePromoPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrePromoPrice
		{
			get
			{
				return this.entityData.PrePromoPrice; 
			}
			
			set
			{
				if (this.entityData.PrePromoPrice == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.PrePromoPrice, this.entityData.PrePromoPrice);
				this.entityData.PrePromoPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.PrePromoPrice, this.entityData.PrePromoPrice);
				OnPropertyChanged("PrePromoPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom1
		{
			get
			{
				return this.entityData.Custom1; 
			}
			
			set
			{
				if (this.entityData.Custom1 == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Custom1, this.entityData.Custom1);
				this.entityData.Custom1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Custom1, this.entityData.Custom1);
				OnPropertyChanged("Custom1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom2
		{
			get
			{
				return this.entityData.Custom2; 
			}
			
			set
			{
				if (this.entityData.Custom2 == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Custom2, this.entityData.Custom2);
				this.entityData.Custom2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Custom2, this.entityData.Custom2);
				OnPropertyChanged("Custom2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom3 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom3
		{
			get
			{
				return this.entityData.Custom3; 
			}
			
			set
			{
				if (this.entityData.Custom3 == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.Custom3, this.entityData.Custom3);
				this.entityData.Custom3 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.Custom3, this.entityData.Custom3);
				OnPropertyChanged("Custom3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SKU property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SKU
		{
			get
			{
				return this.entityData.SKU; 
			}
			
			set
			{
				if (this.entityData.SKU == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.SKU, this.entityData.SKU);
				this.entityData.SKU = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.SKU, this.entityData.SKU);
				OnPropertyChanged("SKU");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentOrderLineItemID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsParentOrderLineItemIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ParentOrderLineItemID
		{
			get
			{
				return this.entityData.ParentOrderLineItemID; 
			}
			
			set
			{
				if (this.entityData.ParentOrderLineItemID == value)
					return;
					
					
				OnColumnChanging(OrderLineItemColumn.ParentOrderLineItemID, this.entityData.ParentOrderLineItemID);
				this.entityData.ParentOrderLineItemID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderLineItemColumn.ParentOrderLineItemID, this.entityData.ParentOrderLineItemID);
				OnPropertyChanged("ParentOrderLineItemID");
			}
		}
		

		#region Source Foreign Key Property
				
		private OrderLineItem _parentOrderLineItemIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="OrderLineItem"/>.
		/// </summary>
		/// <value>The source OrderLineItem for ParentOrderLineItemID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual OrderLineItem ParentOrderLineItemIDSource
      	{
            get { return this._parentOrderLineItemIDSource; }
            set { this._parentOrderLineItemIDSource = value; }
      	}
		private Order _orderIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Order"/>.
		/// </summary>
		/// <value>The source Order for OrderID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Order OrderIDSource
      	{
            get { return this._orderIDSource; }
            set { this._orderIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeOrderLineItem"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderLineItemID", "OrderID", "ShipmentID", "ProductNum", "Name", "Description", "Quantity", "Price", "Weight", "PrePromoPrice", "Custom1", "Custom2", "Custom3", "SKU", "ParentOrderLineItemID"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of OrderLineItem objects
		///	which are related to this object through the relation FK_ZNodeOrderLineItem_ZNodeOrderLineItem
		/// </summary>	
		[BindableAttribute()]
		public TList<OrderLineItem> OrderLineItemCollection
		{
			get { return entityData.OrderLineItemCollection; }
			set { entityData.OrderLineItemCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OrderLineItemEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (OrderLineItem) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<OrderLineItem>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as OrderLineItem);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed OrderLineItem Entity 
		///</summary>
		public virtual OrderLineItem Copy()
		{
			//shallow copy entity
			OrderLineItem copy = new OrderLineItem();
			copy.OrderLineItemID = this.OrderLineItemID;
			copy.OrderID = this.OrderID;
			copy.ShipmentID = this.ShipmentID;
			copy.ProductNum = this.ProductNum;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.Quantity = this.Quantity;
			copy.Price = this.Price;
			copy.Weight = this.Weight;
			copy.PrePromoPrice = this.PrePromoPrice;
			copy.Custom1 = this.Custom1;
			copy.Custom2 = this.Custom2;
			copy.Custom3 = this.Custom3;
			copy.SKU = this.SKU;
			copy.ParentOrderLineItemID = this.ParentOrderLineItemID;
					
			copy.AcceptChanges();
			return (OrderLineItem)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed OrderLineItem Entity which is a deep copy of the current entity.
		///</summary>
		public virtual OrderLineItem DeepCopy()
		{
			return EntityHelper.Clone<OrderLineItem>(this as OrderLineItem);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrderLineItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrderLineItemBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="OrderLineItemBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="OrderLineItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrderLineItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(OrderLineItemBase Object1, OrderLineItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderLineItemID != Object2.OrderLineItemID)
				equal = false;
			if (Object1.OrderID != Object2.OrderID)
				equal = false;
			if ( Object1.ShipmentID != null && Object2.ShipmentID != null )
			{
				if (Object1.ShipmentID != Object2.ShipmentID)
					equal = false;
			}
			else if (Object1.ShipmentID == null ^ Object2.ShipmentID == null )
			{
				equal = false;
			}
			if ( Object1.ProductNum != null && Object2.ProductNum != null )
			{
				if (Object1.ProductNum != Object2.ProductNum)
					equal = false;
			}
			else if (Object1.ProductNum == null ^ Object2.ProductNum == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.Quantity != null && Object2.Quantity != null )
			{
				if (Object1.Quantity != Object2.Quantity)
					equal = false;
			}
			else if (Object1.Quantity == null ^ Object2.Quantity == null )
			{
				equal = false;
			}
			if ( Object1.Price != null && Object2.Price != null )
			{
				if (Object1.Price != Object2.Price)
					equal = false;
			}
			else if (Object1.Price == null ^ Object2.Price == null )
			{
				equal = false;
			}
			if ( Object1.Weight != null && Object2.Weight != null )
			{
				if (Object1.Weight != Object2.Weight)
					equal = false;
			}
			else if (Object1.Weight == null ^ Object2.Weight == null )
			{
				equal = false;
			}
			if ( Object1.PrePromoPrice != null && Object2.PrePromoPrice != null )
			{
				if (Object1.PrePromoPrice != Object2.PrePromoPrice)
					equal = false;
			}
			else if (Object1.PrePromoPrice == null ^ Object2.PrePromoPrice == null )
			{
				equal = false;
			}
			if ( Object1.Custom1 != null && Object2.Custom1 != null )
			{
				if (Object1.Custom1 != Object2.Custom1)
					equal = false;
			}
			else if (Object1.Custom1 == null ^ Object2.Custom1 == null )
			{
				equal = false;
			}
			if ( Object1.Custom2 != null && Object2.Custom2 != null )
			{
				if (Object1.Custom2 != Object2.Custom2)
					equal = false;
			}
			else if (Object1.Custom2 == null ^ Object2.Custom2 == null )
			{
				equal = false;
			}
			if ( Object1.Custom3 != null && Object2.Custom3 != null )
			{
				if (Object1.Custom3 != Object2.Custom3)
					equal = false;
			}
			else if (Object1.Custom3 == null ^ Object2.Custom3 == null )
			{
				equal = false;
			}
			if ( Object1.SKU != null && Object2.SKU != null )
			{
				if (Object1.SKU != Object2.SKU)
					equal = false;
			}
			else if (Object1.SKU == null ^ Object2.SKU == null )
			{
				equal = false;
			}
			if ( Object1.ParentOrderLineItemID != null && Object2.ParentOrderLineItemID != null )
			{
				if (Object1.ParentOrderLineItemID != Object2.ParentOrderLineItemID)
					equal = false;
			}
			else if (Object1.ParentOrderLineItemID == null ^ Object2.ParentOrderLineItemID == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((OrderLineItemBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static OrderLineItemComparer GetComparer()
        {
            return new OrderLineItemComparer();
        }
        */

        // Comparer delegates back to OrderLineItem
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(OrderLineItem rhs, OrderLineItemColumn which)
        {
            switch (which)
            {
            	
            	
            	case OrderLineItemColumn.OrderLineItemID:
            		return this.OrderLineItemID.CompareTo(rhs.OrderLineItemID);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.OrderID:
            		return this.OrderID.CompareTo(rhs.OrderID);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.ShipmentID:
            		return this.ShipmentID.Value.CompareTo(rhs.ShipmentID.Value);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.ProductNum:
            		return this.ProductNum.CompareTo(rhs.ProductNum);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Quantity:
            		return this.Quantity.Value.CompareTo(rhs.Quantity.Value);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Price:
            		return this.Price.Value.CompareTo(rhs.Price.Value);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Weight:
            		return this.Weight.Value.CompareTo(rhs.Weight.Value);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.PrePromoPrice:
            		return this.PrePromoPrice.Value.CompareTo(rhs.PrePromoPrice.Value);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Custom1:
            		return this.Custom1.CompareTo(rhs.Custom1);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Custom2:
            		return this.Custom2.CompareTo(rhs.Custom2);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.Custom3:
            		return this.Custom3.CompareTo(rhs.Custom3);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.SKU:
            		return this.SKU.CompareTo(rhs.SKU);
            		
            		                 
            	
            	
            	case OrderLineItemColumn.ParentOrderLineItemID:
            		return this.ParentOrderLineItemID.Value.CompareTo(rhs.ParentOrderLineItemID.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OrderLineItemKey> Members
		
		// member variable for the EntityId property
		private OrderLineItemKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public OrderLineItemKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OrderLineItemKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"OrderLineItem" 
					+ this.OrderLineItemID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- OrderLineItemID: {0}{15}- OrderID: {1}{15}- ShipmentID: {2}{15}- ProductNum: {3}{15}- Name: {4}{15}- Description: {5}{15}- Quantity: {6}{15}- Price: {7}{15}- Weight: {8}{15}- PrePromoPrice: {9}{15}- Custom1: {10}{15}- Custom2: {11}{15}- Custom3: {12}{15}- SKU: {13}{15}- ParentOrderLineItemID: {14}{15}", 
				this.OrderLineItemID,
				this.OrderID,
				(this.ShipmentID == null) ? string.Empty : this.ShipmentID.ToString(),
				(this.ProductNum == null) ? string.Empty : this.ProductNum.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.Quantity == null) ? string.Empty : this.Quantity.ToString(),
				(this.Price == null) ? string.Empty : this.Price.ToString(),
				(this.Weight == null) ? string.Empty : this.Weight.ToString(),
				(this.PrePromoPrice == null) ? string.Empty : this.PrePromoPrice.ToString(),
				(this.Custom1 == null) ? string.Empty : this.Custom1.ToString(),
				(this.Custom2 == null) ? string.Empty : this.Custom2.ToString(),
				(this.Custom3 == null) ? string.Empty : this.Custom3.ToString(),
				(this.SKU == null) ? string.Empty : this.SKU.ToString(),
				(this.ParentOrderLineItemID == null) ? string.Empty : this.ParentOrderLineItemID.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeOrderLineItem' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class OrderLineItemEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// OrderLineItemID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeOrderLineItem"</remarks>
			public System.Int32 OrderLineItemID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// OrderID : 
		/// </summary>
		public System.Int32		  OrderID = (int)0;
		
		/// <summary>
		/// ShipmentID : 
		/// </summary>
		public System.Int32?		  ShipmentID = (int)0;
		
		/// <summary>
		/// ProductNum : 
		/// </summary>
		public System.String		  ProductNum = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// Quantity : 
		/// </summary>
		public System.Int32?		  Quantity = (int)0;
		
		/// <summary>
		/// Price : 
		/// </summary>
		public System.Decimal?		  Price = 0;
		
		/// <summary>
		/// Weight : 
		/// </summary>
		public System.Decimal?		  Weight = 0.0m;
		
		/// <summary>
		/// PrePromoPrice : 
		/// </summary>
		public System.Decimal?		  PrePromoPrice = 0;
		
		/// <summary>
		/// Custom1 : 
		/// </summary>
		public System.String		  Custom1 = string.Empty;
		
		/// <summary>
		/// Custom2 : 
		/// </summary>
		public System.String		  Custom2 = string.Empty;
		
		/// <summary>
		/// Custom3 : 
		/// </summary>
		public System.String		  Custom3 = string.Empty;
		
		/// <summary>
		/// SKU : 
		/// </summary>
		public System.String		  SKU = string.Empty;
		
		/// <summary>
		/// ParentOrderLineItemID : 
		/// </summary>
		public System.Int32?		  ParentOrderLineItemID = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			OrderLineItemEntityData _tmp = new OrderLineItemEntityData();
						
			_tmp.OrderLineItemID = this.OrderLineItemID;
			
			_tmp.OrderID = this.OrderID;
			_tmp.ShipmentID = this.ShipmentID;
			_tmp.ProductNum = this.ProductNum;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.Quantity = this.Quantity;
			_tmp.Price = this.Price;
			_tmp.Weight = this.Weight;
			_tmp.PrePromoPrice = this.PrePromoPrice;
			_tmp.Custom1 = this.Custom1;
			_tmp.Custom2 = this.Custom2;
			_tmp.Custom3 = this.Custom3;
			_tmp.SKU = this.SKU;
			_tmp.ParentOrderLineItemID = this.ParentOrderLineItemID;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region OrderLineItemCollection
		
		private TList<OrderLineItem> orderLineItemParentOrderLineItemID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation orderLineItemParentOrderLineItemID
		/// </summary>	
		public TList<OrderLineItem> OrderLineItemCollection
		{
			get
			{
				if (orderLineItemParentOrderLineItemID == null)
				{
				orderLineItemParentOrderLineItemID = new TList<OrderLineItem>();
				}
	
				return orderLineItemParentOrderLineItemID;
			}
			set { orderLineItemParentOrderLineItemID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ProductNum",50));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Description",500));
		}
   		#endregion
	
	} // End Class
	
	#region OrderLineItemComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OrderLineItemComparer : System.Collections.Generic.IComparer<OrderLineItem>
	{
		OrderLineItemColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OrderLineItemComparer"/> class.
        /// </summary>
		public OrderLineItemComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OrderLineItemComparer(OrderLineItemColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="OrderLineItem"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="OrderLineItem"/> to compare.</param>
        /// <param name="b">The second <c>OrderLineItem</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(OrderLineItem a, OrderLineItem b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(OrderLineItem entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(OrderLineItem a, OrderLineItem b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OrderLineItemColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OrderLineItemKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="OrderLineItem"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OrderLineItemKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OrderLineItemKey class.
		/// </summary>
		public OrderLineItemKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OrderLineItemKey class.
		/// </summary>
		public OrderLineItemKey(OrderLineItemBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.orderLineItemID = entity.OrderLineItemID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OrderLineItemKey class.
		/// </summary>
		public OrderLineItemKey(System.Int32 orderLineItemID)
		{
			#region Init Properties

			this.orderLineItemID = orderLineItemID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OrderLineItemBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OrderLineItemBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderLineItemID property
		private System.Int32 orderLineItemID;
		
		/// <summary>
		/// Gets or sets the OrderLineItemID property.
		/// </summary>
		public System.Int32 OrderLineItemID
		{
			get { return orderLineItemID; }
			set
			{
				if ( Entity != null )
				{
					Entity.OrderLineItemID = value;
				}
				
				orderLineItemID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderLineItemID = ( values["OrderLineItemID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["OrderLineItemID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderLineItemID", OrderLineItemID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderLineItemID: {0}{1}",
								OrderLineItemID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OrderLineItemColumn Enum
	
	/// <summary>
	/// Enumerate the OrderLineItem columns.
	/// </summary>
	[Serializable]
	public enum OrderLineItemColumn : int
	{
		/// <summary>
		/// OrderLineItemID : 
		/// </summary>
		[EnumTextValue("OrderLineItemID")]
		[ColumnEnum("OrderLineItemID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		OrderLineItemID = 1,
		/// <summary>
		/// OrderID : 
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		OrderID = 2,
		/// <summary>
		/// ShipmentID : 
		/// </summary>
		[EnumTextValue("ShipmentID")]
		[ColumnEnum("ShipmentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ShipmentID = 3,
		/// <summary>
		/// ProductNum : 
		/// </summary>
		[EnumTextValue("ProductNum")]
		[ColumnEnum("ProductNum", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ProductNum = 4,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Name = 5,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Description = 6,
		/// <summary>
		/// Quantity : 
		/// </summary>
		[EnumTextValue("Quantity")]
		[ColumnEnum("Quantity", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Quantity = 7,
		/// <summary>
		/// Price : 
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		Price = 8,
		/// <summary>
		/// Weight : 
		/// </summary>
		[EnumTextValue("Weight")]
		[ColumnEnum("Weight", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Weight = 9,
		/// <summary>
		/// PrePromoPrice : 
		/// </summary>
		[EnumTextValue("PrePromoPrice")]
		[ColumnEnum("PrePromoPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		PrePromoPrice = 10,
		/// <summary>
		/// Custom1 : 
		/// </summary>
		[EnumTextValue("Custom1")]
		[ColumnEnum("Custom1", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom1 = 11,
		/// <summary>
		/// Custom2 : 
		/// </summary>
		[EnumTextValue("Custom2")]
		[ColumnEnum("Custom2", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom2 = 12,
		/// <summary>
		/// Custom3 : 
		/// </summary>
		[EnumTextValue("Custom3")]
		[ColumnEnum("Custom3", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom3 = 13,
		/// <summary>
		/// SKU : 
		/// </summary>
		[EnumTextValue("SKU")]
		[ColumnEnum("SKU", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SKU = 14,
		/// <summary>
		/// ParentOrderLineItemID : 
		/// </summary>
		[EnumTextValue("ParentOrderLineItemID")]
		[ColumnEnum("ParentOrderLineItemID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ParentOrderLineItemID = 15
	}//End enum

	#endregion OrderLineItemColumn Enum

} // end namespace
