	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file PaymentSetting.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region PaymentSettingEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PaymentSetting"/> object.
	/// </remarks>
	public class PaymentSettingEventArgs : System.EventArgs
	{
		private PaymentSettingColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the PaymentSettingEventArgs class.
		///</summary>
		public PaymentSettingEventArgs(PaymentSettingColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PaymentSettingEventArgs class.
		///</summary>
		public PaymentSettingEventArgs(PaymentSettingColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The PaymentSettingColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PaymentSettingColumn" />
		public PaymentSettingColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all PaymentSetting related events.
	///</summary>
	public delegate void PaymentSettingEventHandler(object sender, PaymentSettingEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodePaymentSetting' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(PaymentSetting))]
	public abstract partial class PaymentSettingBase : EntityBase, IEntityId<PaymentSettingKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private PaymentSettingEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//PaymentSettingEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private PaymentSettingEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<PaymentSetting> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event PaymentSettingEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PaymentSettingEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PaymentSettingBase"/> instance.
		///</summary>
		public PaymentSettingBase()
		{
			this.entityData = new PaymentSettingEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PaymentSettingBase"/> instance.
		///</summary>
		///<param name="paymentSettingPaymentTypeID"></param>
		///<param name="paymentSettingProfileID"></param>
		///<param name="paymentSettingGatewayTypeID"></param>
		///<param name="paymentSettingGatewayUsername"></param>
		///<param name="paymentSettingGatewayPassword"></param>
		///<param name="paymentSettingEnableVisa"></param>
		///<param name="paymentSettingEnableMasterCard"></param>
		///<param name="paymentSettingEnableAmex"></param>
		///<param name="paymentSettingEnableDiscover"></param>
		///<param name="paymentSettingTransactionKey"></param>
		///<param name="paymentSettingActiveInd"></param>
		///<param name="paymentSettingDisplayOrder"></param>
		///<param name="paymentSettingTestMode"></param>
		///<param name="paymentSettingOfflineMode"></param>
		///<param name="paymentSettingSaveCreditCartInfo"></param>
		public PaymentSettingBase(System.Int32 paymentSettingPaymentTypeID, System.Int32 paymentSettingProfileID, 
			System.Int32? paymentSettingGatewayTypeID, System.String paymentSettingGatewayUsername, System.String paymentSettingGatewayPassword, 
			System.Boolean? paymentSettingEnableVisa, System.Boolean? paymentSettingEnableMasterCard, System.Boolean? paymentSettingEnableAmex, 
			System.Boolean? paymentSettingEnableDiscover, System.String paymentSettingTransactionKey, System.Boolean paymentSettingActiveInd, 
			System.Byte paymentSettingDisplayOrder, System.Boolean paymentSettingTestMode, System.Boolean? paymentSettingOfflineMode, 
			System.Boolean? paymentSettingSaveCreditCartInfo)
		{
			this.entityData = new PaymentSettingEntityData();
			this.backupData = null;

			this.PaymentTypeID = paymentSettingPaymentTypeID;
			this.ProfileID = paymentSettingProfileID;
			this.GatewayTypeID = paymentSettingGatewayTypeID;
			this.GatewayUsername = paymentSettingGatewayUsername;
			this.GatewayPassword = paymentSettingGatewayPassword;
			this.EnableVisa = paymentSettingEnableVisa;
			this.EnableMasterCard = paymentSettingEnableMasterCard;
			this.EnableAmex = paymentSettingEnableAmex;
			this.EnableDiscover = paymentSettingEnableDiscover;
			this.TransactionKey = paymentSettingTransactionKey;
			this.ActiveInd = paymentSettingActiveInd;
			this.DisplayOrder = paymentSettingDisplayOrder;
			this.TestMode = paymentSettingTestMode;
			this.OfflineMode = paymentSettingOfflineMode;
			this.SaveCreditCartInfo = paymentSettingSaveCreditCartInfo;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PaymentSetting"/> instance.
		///</summary>
		///<param name="paymentSettingPaymentTypeID"></param>
		///<param name="paymentSettingProfileID"></param>
		///<param name="paymentSettingGatewayTypeID"></param>
		///<param name="paymentSettingGatewayUsername"></param>
		///<param name="paymentSettingGatewayPassword"></param>
		///<param name="paymentSettingEnableVisa"></param>
		///<param name="paymentSettingEnableMasterCard"></param>
		///<param name="paymentSettingEnableAmex"></param>
		///<param name="paymentSettingEnableDiscover"></param>
		///<param name="paymentSettingTransactionKey"></param>
		///<param name="paymentSettingActiveInd"></param>
		///<param name="paymentSettingDisplayOrder"></param>
		///<param name="paymentSettingTestMode"></param>
		///<param name="paymentSettingOfflineMode"></param>
		///<param name="paymentSettingSaveCreditCartInfo"></param>
		public static PaymentSetting CreatePaymentSetting(System.Int32 paymentSettingPaymentTypeID, System.Int32 paymentSettingProfileID, 
			System.Int32? paymentSettingGatewayTypeID, System.String paymentSettingGatewayUsername, System.String paymentSettingGatewayPassword, 
			System.Boolean? paymentSettingEnableVisa, System.Boolean? paymentSettingEnableMasterCard, System.Boolean? paymentSettingEnableAmex, 
			System.Boolean? paymentSettingEnableDiscover, System.String paymentSettingTransactionKey, System.Boolean paymentSettingActiveInd, 
			System.Byte paymentSettingDisplayOrder, System.Boolean paymentSettingTestMode, System.Boolean? paymentSettingOfflineMode, 
			System.Boolean? paymentSettingSaveCreditCartInfo)
		{
			PaymentSetting newPaymentSetting = new PaymentSetting();
			newPaymentSetting.PaymentTypeID = paymentSettingPaymentTypeID;
			newPaymentSetting.ProfileID = paymentSettingProfileID;
			newPaymentSetting.GatewayTypeID = paymentSettingGatewayTypeID;
			newPaymentSetting.GatewayUsername = paymentSettingGatewayUsername;
			newPaymentSetting.GatewayPassword = paymentSettingGatewayPassword;
			newPaymentSetting.EnableVisa = paymentSettingEnableVisa;
			newPaymentSetting.EnableMasterCard = paymentSettingEnableMasterCard;
			newPaymentSetting.EnableAmex = paymentSettingEnableAmex;
			newPaymentSetting.EnableDiscover = paymentSettingEnableDiscover;
			newPaymentSetting.TransactionKey = paymentSettingTransactionKey;
			newPaymentSetting.ActiveInd = paymentSettingActiveInd;
			newPaymentSetting.DisplayOrder = paymentSettingDisplayOrder;
			newPaymentSetting.TestMode = paymentSettingTestMode;
			newPaymentSetting.OfflineMode = paymentSettingOfflineMode;
			newPaymentSetting.SaveCreditCartInfo = paymentSettingSaveCreditCartInfo;
			return newPaymentSetting;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PaymentSettingColumn"/> which has raised the event.</param>
		public void OnColumnChanging(PaymentSettingColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PaymentSettingColumn"/> which has raised the event.</param>
		public void OnColumnChanged(PaymentSettingColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PaymentSettingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(PaymentSettingColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PaymentSettingEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PaymentSettingEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PaymentSettingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(PaymentSettingColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PaymentSettingEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PaymentSettingEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the PaymentSettingID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 PaymentSettingID
		{
			get
			{
				return this.entityData.PaymentSettingID; 
			}
			
			set
			{
				if (this.entityData.PaymentSettingID == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.PaymentSettingID, this.entityData.PaymentSettingID);
				this.entityData.PaymentSettingID = value;
				this.EntityId.PaymentSettingID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.PaymentSettingID, this.entityData.PaymentSettingID);
				OnPropertyChanged("PaymentSettingID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PaymentTypeID
		{
			get
			{
				return this.entityData.PaymentTypeID; 
			}
			
			set
			{
				if (this.entityData.PaymentTypeID == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.PaymentTypeID, this.entityData.PaymentTypeID);
				this.entityData.PaymentTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.PaymentTypeID, this.entityData.PaymentTypeID);
				OnPropertyChanged("PaymentTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProfileID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProfileID
		{
			get
			{
				return this.entityData.ProfileID; 
			}
			
			set
			{
				if (this.entityData.ProfileID == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.ProfileID, this.entityData.ProfileID);
				this.entityData.ProfileID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.ProfileID, this.entityData.ProfileID);
				OnPropertyChanged("ProfileID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GatewayTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGatewayTypeIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GatewayTypeID
		{
			get
			{
				return this.entityData.GatewayTypeID; 
			}
			
			set
			{
				if (this.entityData.GatewayTypeID == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.GatewayTypeID, this.entityData.GatewayTypeID);
				this.entityData.GatewayTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.GatewayTypeID, this.entityData.GatewayTypeID);
				OnPropertyChanged("GatewayTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GatewayUsername property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String GatewayUsername
		{
			get
			{
				return this.entityData.GatewayUsername; 
			}
			
			set
			{
				if (this.entityData.GatewayUsername == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.GatewayUsername, this.entityData.GatewayUsername);
				this.entityData.GatewayUsername = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.GatewayUsername, this.entityData.GatewayUsername);
				OnPropertyChanged("GatewayUsername");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GatewayPassword property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String GatewayPassword
		{
			get
			{
				return this.entityData.GatewayPassword; 
			}
			
			set
			{
				if (this.entityData.GatewayPassword == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.GatewayPassword, this.entityData.GatewayPassword);
				this.entityData.GatewayPassword = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.GatewayPassword, this.entityData.GatewayPassword);
				OnPropertyChanged("GatewayPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableVisa property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnableVisaNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EnableVisa
		{
			get
			{
				return this.entityData.EnableVisa; 
			}
			
			set
			{
				if (this.entityData.EnableVisa == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.EnableVisa, this.entityData.EnableVisa);
				this.entityData.EnableVisa = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.EnableVisa, this.entityData.EnableVisa);
				OnPropertyChanged("EnableVisa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableMasterCard property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnableMasterCardNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EnableMasterCard
		{
			get
			{
				return this.entityData.EnableMasterCard; 
			}
			
			set
			{
				if (this.entityData.EnableMasterCard == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.EnableMasterCard, this.entityData.EnableMasterCard);
				this.entityData.EnableMasterCard = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.EnableMasterCard, this.entityData.EnableMasterCard);
				OnPropertyChanged("EnableMasterCard");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableAmex property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnableAmexNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EnableAmex
		{
			get
			{
				return this.entityData.EnableAmex; 
			}
			
			set
			{
				if (this.entityData.EnableAmex == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.EnableAmex, this.entityData.EnableAmex);
				this.entityData.EnableAmex = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.EnableAmex, this.entityData.EnableAmex);
				OnPropertyChanged("EnableAmex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableDiscover property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnableDiscoverNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EnableDiscover
		{
			get
			{
				return this.entityData.EnableDiscover; 
			}
			
			set
			{
				if (this.entityData.EnableDiscover == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.EnableDiscover, this.entityData.EnableDiscover);
				this.entityData.EnableDiscover = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.EnableDiscover, this.entityData.EnableDiscover);
				OnPropertyChanged("EnableDiscover");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionKey property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String TransactionKey
		{
			get
			{
				return this.entityData.TransactionKey; 
			}
			
			set
			{
				if (this.entityData.TransactionKey == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.TransactionKey, this.entityData.TransactionKey);
				this.entityData.TransactionKey = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.TransactionKey, this.entityData.TransactionKey);
				OnPropertyChanged("TransactionKey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ActiveInd
		{
			get
			{
				return this.entityData.ActiveInd; 
			}
			
			set
			{
				if (this.entityData.ActiveInd == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.ActiveInd, this.entityData.ActiveInd);
				this.entityData.ActiveInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.ActiveInd, this.entityData.ActiveInd);
				OnPropertyChanged("ActiveInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Byte DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TestMode property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean TestMode
		{
			get
			{
				return this.entityData.TestMode; 
			}
			
			set
			{
				if (this.entityData.TestMode == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.TestMode, this.entityData.TestMode);
				this.entityData.TestMode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.TestMode, this.entityData.TestMode);
				OnPropertyChanged("TestMode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OfflineMode property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOfflineModeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OfflineMode
		{
			get
			{
				return this.entityData.OfflineMode; 
			}
			
			set
			{
				if (this.entityData.OfflineMode == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.OfflineMode, this.entityData.OfflineMode);
				this.entityData.OfflineMode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.OfflineMode, this.entityData.OfflineMode);
				OnPropertyChanged("OfflineMode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaveCreditCartInfo property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSaveCreditCartInfoNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SaveCreditCartInfo
		{
			get
			{
				return this.entityData.SaveCreditCartInfo; 
			}
			
			set
			{
				if (this.entityData.SaveCreditCartInfo == value)
					return;
					
					
				OnColumnChanging(PaymentSettingColumn.SaveCreditCartInfo, this.entityData.SaveCreditCartInfo);
				this.entityData.SaveCreditCartInfo = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PaymentSettingColumn.SaveCreditCartInfo, this.entityData.SaveCreditCartInfo);
				OnPropertyChanged("SaveCreditCartInfo");
			}
		}
		

		#region Source Foreign Key Property
				
		private Gateway _gatewayTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Gateway"/>.
		/// </summary>
		/// <value>The source Gateway for GatewayTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Gateway GatewayTypeIDSource
      	{
            get { return this._gatewayTypeIDSource; }
            set { this._gatewayTypeIDSource = value; }
      	}
		private PaymentType _paymentTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PaymentType"/>.
		/// </summary>
		/// <value>The source PaymentType for PaymentTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual PaymentType PaymentTypeIDSource
      	{
            get { return this._paymentTypeIDSource; }
            set { this._paymentTypeIDSource = value; }
      	}
		private Profile _profileIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Profile"/>.
		/// </summary>
		/// <value>The source Profile for ProfileID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Profile ProfileIDSource
      	{
            get { return this._profileIDSource; }
            set { this._profileIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodePaymentSetting"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PaymentSettingID", "PaymentTypeID", "ProfileID", "GatewayTypeID", "GatewayUsername", "GatewayPassword", "EnableVisa", "EnableMasterCard", "EnableAmex", "EnableDiscover", "TransactionKey", "ActiveInd", "DisplayOrder", "TestMode", "OfflineMode", "SaveCreditCartInfo"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PaymentSettingEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PaymentSetting) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PaymentSetting>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PaymentSetting);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PaymentSetting Entity 
		///</summary>
		public virtual PaymentSetting Copy()
		{
			//shallow copy entity
			PaymentSetting copy = new PaymentSetting();
			copy.PaymentSettingID = this.PaymentSettingID;
			copy.PaymentTypeID = this.PaymentTypeID;
			copy.ProfileID = this.ProfileID;
			copy.GatewayTypeID = this.GatewayTypeID;
			copy.GatewayUsername = this.GatewayUsername;
			copy.GatewayPassword = this.GatewayPassword;
			copy.EnableVisa = this.EnableVisa;
			copy.EnableMasterCard = this.EnableMasterCard;
			copy.EnableAmex = this.EnableAmex;
			copy.EnableDiscover = this.EnableDiscover;
			copy.TransactionKey = this.TransactionKey;
			copy.ActiveInd = this.ActiveInd;
			copy.DisplayOrder = this.DisplayOrder;
			copy.TestMode = this.TestMode;
			copy.OfflineMode = this.OfflineMode;
			copy.SaveCreditCartInfo = this.SaveCreditCartInfo;
					
			copy.AcceptChanges();
			return (PaymentSetting)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed PaymentSetting Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PaymentSetting DeepCopy()
		{
			return EntityHelper.Clone<PaymentSetting>(this as PaymentSetting);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PaymentSettingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PaymentSettingBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="PaymentSettingBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="PaymentSettingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PaymentSettingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(PaymentSettingBase Object1, PaymentSettingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PaymentSettingID != Object2.PaymentSettingID)
				equal = false;
			if (Object1.PaymentTypeID != Object2.PaymentTypeID)
				equal = false;
			if (Object1.ProfileID != Object2.ProfileID)
				equal = false;
			if ( Object1.GatewayTypeID != null && Object2.GatewayTypeID != null )
			{
				if (Object1.GatewayTypeID != Object2.GatewayTypeID)
					equal = false;
			}
			else if (Object1.GatewayTypeID == null ^ Object2.GatewayTypeID == null )
			{
				equal = false;
			}
			if ( Object1.GatewayUsername != null && Object2.GatewayUsername != null )
			{
				if (Object1.GatewayUsername != Object2.GatewayUsername)
					equal = false;
			}
			else if (Object1.GatewayUsername == null ^ Object2.GatewayUsername == null )
			{
				equal = false;
			}
			if ( Object1.GatewayPassword != null && Object2.GatewayPassword != null )
			{
				if (Object1.GatewayPassword != Object2.GatewayPassword)
					equal = false;
			}
			else if (Object1.GatewayPassword == null ^ Object2.GatewayPassword == null )
			{
				equal = false;
			}
			if ( Object1.EnableVisa != null && Object2.EnableVisa != null )
			{
				if (Object1.EnableVisa != Object2.EnableVisa)
					equal = false;
			}
			else if (Object1.EnableVisa == null ^ Object2.EnableVisa == null )
			{
				equal = false;
			}
			if ( Object1.EnableMasterCard != null && Object2.EnableMasterCard != null )
			{
				if (Object1.EnableMasterCard != Object2.EnableMasterCard)
					equal = false;
			}
			else if (Object1.EnableMasterCard == null ^ Object2.EnableMasterCard == null )
			{
				equal = false;
			}
			if ( Object1.EnableAmex != null && Object2.EnableAmex != null )
			{
				if (Object1.EnableAmex != Object2.EnableAmex)
					equal = false;
			}
			else if (Object1.EnableAmex == null ^ Object2.EnableAmex == null )
			{
				equal = false;
			}
			if ( Object1.EnableDiscover != null && Object2.EnableDiscover != null )
			{
				if (Object1.EnableDiscover != Object2.EnableDiscover)
					equal = false;
			}
			else if (Object1.EnableDiscover == null ^ Object2.EnableDiscover == null )
			{
				equal = false;
			}
			if ( Object1.TransactionKey != null && Object2.TransactionKey != null )
			{
				if (Object1.TransactionKey != Object2.TransactionKey)
					equal = false;
			}
			else if (Object1.TransactionKey == null ^ Object2.TransactionKey == null )
			{
				equal = false;
			}
			if (Object1.ActiveInd != Object2.ActiveInd)
				equal = false;
			if (Object1.DisplayOrder != Object2.DisplayOrder)
				equal = false;
			if (Object1.TestMode != Object2.TestMode)
				equal = false;
			if ( Object1.OfflineMode != null && Object2.OfflineMode != null )
			{
				if (Object1.OfflineMode != Object2.OfflineMode)
					equal = false;
			}
			else if (Object1.OfflineMode == null ^ Object2.OfflineMode == null )
			{
				equal = false;
			}
			if ( Object1.SaveCreditCartInfo != null && Object2.SaveCreditCartInfo != null )
			{
				if (Object1.SaveCreditCartInfo != Object2.SaveCreditCartInfo)
					equal = false;
			}
			else if (Object1.SaveCreditCartInfo == null ^ Object2.SaveCreditCartInfo == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((PaymentSettingBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static PaymentSettingComparer GetComparer()
        {
            return new PaymentSettingComparer();
        }
        */

        // Comparer delegates back to PaymentSetting
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PaymentSetting rhs, PaymentSettingColumn which)
        {
            switch (which)
            {
            	
            	
            	case PaymentSettingColumn.PaymentSettingID:
            		return this.PaymentSettingID.CompareTo(rhs.PaymentSettingID);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.PaymentTypeID:
            		return this.PaymentTypeID.CompareTo(rhs.PaymentTypeID);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.ProfileID:
            		return this.ProfileID.CompareTo(rhs.ProfileID);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.GatewayTypeID:
            		return this.GatewayTypeID.Value.CompareTo(rhs.GatewayTypeID.Value);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.GatewayUsername:
            		return this.GatewayUsername.CompareTo(rhs.GatewayUsername);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.GatewayPassword:
            		return this.GatewayPassword.CompareTo(rhs.GatewayPassword);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.EnableVisa:
            		return this.EnableVisa.Value.CompareTo(rhs.EnableVisa.Value);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.EnableMasterCard:
            		return this.EnableMasterCard.Value.CompareTo(rhs.EnableMasterCard.Value);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.EnableAmex:
            		return this.EnableAmex.Value.CompareTo(rhs.EnableAmex.Value);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.EnableDiscover:
            		return this.EnableDiscover.Value.CompareTo(rhs.EnableDiscover.Value);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.TransactionKey:
            		return this.TransactionKey.CompareTo(rhs.TransactionKey);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.ActiveInd:
            		return this.ActiveInd.CompareTo(rhs.ActiveInd);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.DisplayOrder:
            		return this.DisplayOrder.CompareTo(rhs.DisplayOrder);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.TestMode:
            		return this.TestMode.CompareTo(rhs.TestMode);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.OfflineMode:
            		return this.OfflineMode.Value.CompareTo(rhs.OfflineMode.Value);
            		
            		                 
            	
            	
            	case PaymentSettingColumn.SaveCreditCartInfo:
            		return this.SaveCreditCartInfo.Value.CompareTo(rhs.SaveCreditCartInfo.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PaymentSettingKey> Members
		
		// member variable for the EntityId property
		private PaymentSettingKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public PaymentSettingKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PaymentSettingKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"PaymentSetting" 
					+ this.PaymentSettingID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- PaymentSettingID: {0}{16}- PaymentTypeID: {1}{16}- ProfileID: {2}{16}- GatewayTypeID: {3}{16}- GatewayUsername: {4}{16}- GatewayPassword: {5}{16}- EnableVisa: {6}{16}- EnableMasterCard: {7}{16}- EnableAmex: {8}{16}- EnableDiscover: {9}{16}- TransactionKey: {10}{16}- ActiveInd: {11}{16}- DisplayOrder: {12}{16}- TestMode: {13}{16}- OfflineMode: {14}{16}- SaveCreditCartInfo: {15}{16}", 
				this.PaymentSettingID,
				this.PaymentTypeID,
				this.ProfileID,
				(this.GatewayTypeID == null) ? string.Empty : this.GatewayTypeID.ToString(),
				(this.GatewayUsername == null) ? string.Empty : this.GatewayUsername.ToString(),
				(this.GatewayPassword == null) ? string.Empty : this.GatewayPassword.ToString(),
				(this.EnableVisa == null) ? string.Empty : this.EnableVisa.ToString(),
				(this.EnableMasterCard == null) ? string.Empty : this.EnableMasterCard.ToString(),
				(this.EnableAmex == null) ? string.Empty : this.EnableAmex.ToString(),
				(this.EnableDiscover == null) ? string.Empty : this.EnableDiscover.ToString(),
				(this.TransactionKey == null) ? string.Empty : this.TransactionKey.ToString(),
				this.ActiveInd,
				this.DisplayOrder,
				this.TestMode,
				(this.OfflineMode == null) ? string.Empty : this.OfflineMode.ToString(),
				(this.SaveCreditCartInfo == null) ? string.Empty : this.SaveCreditCartInfo.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodePaymentSetting' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class PaymentSettingEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// PaymentSettingID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodePaymentSetting"</remarks>
			public System.Int32 PaymentSettingID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PaymentTypeID : 
		/// </summary>
		public System.Int32		  PaymentTypeID = (int)0;
		
		/// <summary>
		/// ProfileID : 
		/// </summary>
		public System.Int32		  ProfileID = (int)0;
		
		/// <summary>
		/// GatewayTypeID : 
		/// </summary>
		public System.Int32?		  GatewayTypeID = (int)0;
		
		/// <summary>
		/// GatewayUsername : 
		/// </summary>
		public System.String		  GatewayUsername = string.Empty;
		
		/// <summary>
		/// GatewayPassword : 
		/// </summary>
		public System.String		  GatewayPassword = string.Empty;
		
		/// <summary>
		/// EnableVisa : 
		/// </summary>
		public System.Boolean?		  EnableVisa = false;
		
		/// <summary>
		/// EnableMasterCard : 
		/// </summary>
		public System.Boolean?		  EnableMasterCard = false;
		
		/// <summary>
		/// EnableAmex : 
		/// </summary>
		public System.Boolean?		  EnableAmex = false;
		
		/// <summary>
		/// EnableDiscover : 
		/// </summary>
		public System.Boolean?		  EnableDiscover = false;
		
		/// <summary>
		/// TransactionKey : 
		/// </summary>
		public System.String		  TransactionKey = string.Empty;
		
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		public System.Boolean		  ActiveInd = false;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Byte		  DisplayOrder = (byte)0;
		
		/// <summary>
		/// TestMode : 
		/// </summary>
		public System.Boolean		  TestMode = false;
		
		/// <summary>
		/// OfflineMode : 
		/// </summary>
		public System.Boolean?		  OfflineMode = false;
		
		/// <summary>
		/// SaveCreditCartInfo : 
		/// </summary>
		public System.Boolean?		  SaveCreditCartInfo = false;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			PaymentSettingEntityData _tmp = new PaymentSettingEntityData();
						
			_tmp.PaymentSettingID = this.PaymentSettingID;
			
			_tmp.PaymentTypeID = this.PaymentTypeID;
			_tmp.ProfileID = this.ProfileID;
			_tmp.GatewayTypeID = this.GatewayTypeID;
			_tmp.GatewayUsername = this.GatewayUsername;
			_tmp.GatewayPassword = this.GatewayPassword;
			_tmp.EnableVisa = this.EnableVisa;
			_tmp.EnableMasterCard = this.EnableMasterCard;
			_tmp.EnableAmex = this.EnableAmex;
			_tmp.EnableDiscover = this.EnableDiscover;
			_tmp.TransactionKey = this.TransactionKey;
			_tmp.ActiveInd = this.ActiveInd;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.TestMode = this.TestMode;
			_tmp.OfflineMode = this.OfflineMode;
			_tmp.SaveCreditCartInfo = this.SaveCreditCartInfo;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
	
	} // End Class
	
	#region PaymentSettingComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PaymentSettingComparer : System.Collections.Generic.IComparer<PaymentSetting>
	{
		PaymentSettingColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PaymentSettingComparer"/> class.
        /// </summary>
		public PaymentSettingComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PaymentSettingComparer(PaymentSettingColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PaymentSetting"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PaymentSetting"/> to compare.</param>
        /// <param name="b">The second <c>PaymentSetting</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PaymentSetting a, PaymentSetting b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PaymentSetting entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PaymentSetting a, PaymentSetting b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PaymentSettingColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PaymentSettingKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PaymentSetting"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PaymentSettingKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PaymentSettingKey class.
		/// </summary>
		public PaymentSettingKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PaymentSettingKey class.
		/// </summary>
		public PaymentSettingKey(PaymentSettingBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.paymentSettingID = entity.PaymentSettingID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PaymentSettingKey class.
		/// </summary>
		public PaymentSettingKey(System.Int32 paymentSettingID)
		{
			#region Init Properties

			this.paymentSettingID = paymentSettingID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PaymentSettingBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PaymentSettingBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PaymentSettingID property
		private System.Int32 paymentSettingID;
		
		/// <summary>
		/// Gets or sets the PaymentSettingID property.
		/// </summary>
		public System.Int32 PaymentSettingID
		{
			get { return paymentSettingID; }
			set
			{
				if ( Entity != null )
				{
					Entity.PaymentSettingID = value;
				}
				
				paymentSettingID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PaymentSettingID = ( values["PaymentSettingID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["PaymentSettingID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PaymentSettingID", PaymentSettingID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PaymentSettingID: {0}{1}",
								PaymentSettingID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PaymentSettingColumn Enum
	
	/// <summary>
	/// Enumerate the PaymentSetting columns.
	/// </summary>
	[Serializable]
	public enum PaymentSettingColumn : int
	{
		/// <summary>
		/// PaymentSettingID : 
		/// </summary>
		[EnumTextValue("PaymentSettingID")]
		[ColumnEnum("PaymentSettingID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		PaymentSettingID = 1,
		/// <summary>
		/// PaymentTypeID : 
		/// </summary>
		[EnumTextValue("PaymentTypeID")]
		[ColumnEnum("PaymentTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PaymentTypeID = 2,
		/// <summary>
		/// ProfileID : 
		/// </summary>
		[EnumTextValue("ProfileID")]
		[ColumnEnum("ProfileID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProfileID = 3,
		/// <summary>
		/// GatewayTypeID : 
		/// </summary>
		[EnumTextValue("GatewayTypeID")]
		[ColumnEnum("GatewayTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GatewayTypeID = 4,
		/// <summary>
		/// GatewayUsername : 
		/// </summary>
		[EnumTextValue("GatewayUsername")]
		[ColumnEnum("GatewayUsername", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		GatewayUsername = 5,
		/// <summary>
		/// GatewayPassword : 
		/// </summary>
		[EnumTextValue("GatewayPassword")]
		[ColumnEnum("GatewayPassword", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		GatewayPassword = 6,
		/// <summary>
		/// EnableVisa : 
		/// </summary>
		[EnumTextValue("EnableVisa")]
		[ColumnEnum("EnableVisa", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EnableVisa = 7,
		/// <summary>
		/// EnableMasterCard : 
		/// </summary>
		[EnumTextValue("EnableMasterCard")]
		[ColumnEnum("EnableMasterCard", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EnableMasterCard = 8,
		/// <summary>
		/// EnableAmex : 
		/// </summary>
		[EnumTextValue("EnableAmex")]
		[ColumnEnum("EnableAmex", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EnableAmex = 9,
		/// <summary>
		/// EnableDiscover : 
		/// </summary>
		[EnumTextValue("EnableDiscover")]
		[ColumnEnum("EnableDiscover", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EnableDiscover = 10,
		/// <summary>
		/// TransactionKey : 
		/// </summary>
		[EnumTextValue("TransactionKey")]
		[ColumnEnum("TransactionKey", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		TransactionKey = 11,
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		[EnumTextValue("ActiveInd")]
		[ColumnEnum("ActiveInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ActiveInd = 12,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		DisplayOrder = 13,
		/// <summary>
		/// TestMode : 
		/// </summary>
		[EnumTextValue("TestMode")]
		[ColumnEnum("TestMode", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		TestMode = 14,
		/// <summary>
		/// OfflineMode : 
		/// </summary>
		[EnumTextValue("OfflineMode")]
		[ColumnEnum("OfflineMode", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OfflineMode = 15,
		/// <summary>
		/// SaveCreditCartInfo : 
		/// </summary>
		[EnumTextValue("SaveCreditCartInfo")]
		[ColumnEnum("SaveCreditCartInfo", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SaveCreditCartInfo = 16
	}//End enum

	#endregion PaymentSettingColumn Enum

} // end namespace
