	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file Portal.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region PortalEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Portal"/> object.
	/// </remarks>
	public class PortalEventArgs : System.EventArgs
	{
		private PortalColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the PortalEventArgs class.
		///</summary>
		public PortalEventArgs(PortalColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PortalEventArgs class.
		///</summary>
		public PortalEventArgs(PortalColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The PortalColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PortalColumn" />
		public PortalColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Portal related events.
	///</summary>
	public delegate void PortalEventHandler(object sender, PortalEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodePortal' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Portal))]
	public abstract partial class PortalBase : EntityBase, IEntityId<PortalKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private PortalEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//PortalEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private PortalEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Portal> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event PortalEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PortalEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PortalBase"/> instance.
		///</summary>
		public PortalBase()
		{
			this.entityData = new PortalEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PortalBase"/> instance.
		///</summary>
		///<param name="portalDomainName"></param>
		///<param name="portalCompanyName"></param>
		///<param name="portalStoreName"></param>
		///<param name="portalLogoPath"></param>
		///<param name="portalUseSSL"></param>
		///<param name="portalAdminEmail"></param>
		///<param name="portalSalesEmail"></param>
		///<param name="portalCustomerServiceEmail"></param>
		///<param name="portalSalesPhoneNumber"></param>
		///<param name="portalCustomerServicePhoneNumber"></param>
		///<param name="portalImageNotAvailablePath"></param>
		///<param name="portalMaxCatalogDisplayColumns"></param>
		///<param name="portalMaxCatalogDisplayItems"></param>
		///<param name="portalMaxCatalogItemSmallWidth"></param>
		///<param name="portalMaxCatalogItemMediumWidth"></param>
		///<param name="portalMaxCatalogItemThumbnailWidth"></param>
		///<param name="portalMaxCatalogItemLargeWidth"></param>
		///<param name="portalActiveInd"></param>
		///<param name="portalSMTPServer"></param>
		///<param name="portalSMTPUserName"></param>
		///<param name="portalSMTPPassword"></param>
		///<param name="portalBottomScriptBlock"></param>
		///<param name="portalUPSUserName"></param>
		///<param name="portalUPSPassword"></param>
		///<param name="portalUPSKey"></param>
		///<param name="portalShippingOriginZipCode"></param>
		///<param name="portalTheme"></param>
		///<param name="portalShopByPriceMin"></param>
		///<param name="portalShopByPriceMax"></param>
		///<param name="portalShopByPriceIncrement"></param>
		///<param name="portalFedExAccountNumber"></param>
		///<param name="portalFedExMeterNumber"></param>
		///<param name="portalFedExProductionKey"></param>
		///<param name="portalFedExSecurityCode"></param>
		///<param name="portalShippingOriginStateCode"></param>
		///<param name="portalShippingOriginCountryCode"></param>
		public PortalBase(System.String portalDomainName, System.String portalCompanyName, System.String portalStoreName, 
			System.String portalLogoPath, System.Boolean portalUseSSL, System.String portalAdminEmail, System.String portalSalesEmail, 
			System.String portalCustomerServiceEmail, System.String portalSalesPhoneNumber, System.String portalCustomerServicePhoneNumber, 
			System.String portalImageNotAvailablePath, System.Byte portalMaxCatalogDisplayColumns, System.Int32 portalMaxCatalogDisplayItems, 
			System.Int32 portalMaxCatalogItemSmallWidth, System.Int32 portalMaxCatalogItemMediumWidth, System.Int32 portalMaxCatalogItemThumbnailWidth, 
			System.Int32 portalMaxCatalogItemLargeWidth, System.Boolean portalActiveInd, System.String portalSMTPServer, 
			System.String portalSMTPUserName, System.String portalSMTPPassword, System.String portalBottomScriptBlock, 
			System.String portalUPSUserName, System.String portalUPSPassword, System.String portalUPSKey, System.String portalShippingOriginZipCode, 
			System.String portalTheme, System.Int32 portalShopByPriceMin, System.Int32 portalShopByPriceMax, System.Int32 portalShopByPriceIncrement, 
			System.String portalFedExAccountNumber, System.String portalFedExMeterNumber, System.String portalFedExProductionKey, 
			System.String portalFedExSecurityCode, System.String portalShippingOriginStateCode, System.String portalShippingOriginCountryCode)
		{
			this.entityData = new PortalEntityData();
			this.backupData = null;

			this.DomainName = portalDomainName;
			this.CompanyName = portalCompanyName;
			this.StoreName = portalStoreName;
			this.LogoPath = portalLogoPath;
			this.UseSSL = portalUseSSL;
			this.AdminEmail = portalAdminEmail;
			this.SalesEmail = portalSalesEmail;
			this.CustomerServiceEmail = portalCustomerServiceEmail;
			this.SalesPhoneNumber = portalSalesPhoneNumber;
			this.CustomerServicePhoneNumber = portalCustomerServicePhoneNumber;
			this.ImageNotAvailablePath = portalImageNotAvailablePath;
			this.MaxCatalogDisplayColumns = portalMaxCatalogDisplayColumns;
			this.MaxCatalogDisplayItems = portalMaxCatalogDisplayItems;
			this.MaxCatalogItemSmallWidth = portalMaxCatalogItemSmallWidth;
			this.MaxCatalogItemMediumWidth = portalMaxCatalogItemMediumWidth;
			this.MaxCatalogItemThumbnailWidth = portalMaxCatalogItemThumbnailWidth;
			this.MaxCatalogItemLargeWidth = portalMaxCatalogItemLargeWidth;
			this.ActiveInd = portalActiveInd;
			this.SMTPServer = portalSMTPServer;
			this.SMTPUserName = portalSMTPUserName;
			this.SMTPPassword = portalSMTPPassword;
			this.BottomScriptBlock = portalBottomScriptBlock;
			this.UPSUserName = portalUPSUserName;
			this.UPSPassword = portalUPSPassword;
			this.UPSKey = portalUPSKey;
			this.ShippingOriginZipCode = portalShippingOriginZipCode;
			this.Theme = portalTheme;
			this.ShopByPriceMin = portalShopByPriceMin;
			this.ShopByPriceMax = portalShopByPriceMax;
			this.ShopByPriceIncrement = portalShopByPriceIncrement;
			this.FedExAccountNumber = portalFedExAccountNumber;
			this.FedExMeterNumber = portalFedExMeterNumber;
			this.FedExProductionKey = portalFedExProductionKey;
			this.FedExSecurityCode = portalFedExSecurityCode;
			this.ShippingOriginStateCode = portalShippingOriginStateCode;
			this.ShippingOriginCountryCode = portalShippingOriginCountryCode;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Portal"/> instance.
		///</summary>
		///<param name="portalDomainName"></param>
		///<param name="portalCompanyName"></param>
		///<param name="portalStoreName"></param>
		///<param name="portalLogoPath"></param>
		///<param name="portalUseSSL"></param>
		///<param name="portalAdminEmail"></param>
		///<param name="portalSalesEmail"></param>
		///<param name="portalCustomerServiceEmail"></param>
		///<param name="portalSalesPhoneNumber"></param>
		///<param name="portalCustomerServicePhoneNumber"></param>
		///<param name="portalImageNotAvailablePath"></param>
		///<param name="portalMaxCatalogDisplayColumns"></param>
		///<param name="portalMaxCatalogDisplayItems"></param>
		///<param name="portalMaxCatalogItemSmallWidth"></param>
		///<param name="portalMaxCatalogItemMediumWidth"></param>
		///<param name="portalMaxCatalogItemThumbnailWidth"></param>
		///<param name="portalMaxCatalogItemLargeWidth"></param>
		///<param name="portalActiveInd"></param>
		///<param name="portalSMTPServer"></param>
		///<param name="portalSMTPUserName"></param>
		///<param name="portalSMTPPassword"></param>
		///<param name="portalBottomScriptBlock"></param>
		///<param name="portalUPSUserName"></param>
		///<param name="portalUPSPassword"></param>
		///<param name="portalUPSKey"></param>
		///<param name="portalShippingOriginZipCode"></param>
		///<param name="portalTheme"></param>
		///<param name="portalShopByPriceMin"></param>
		///<param name="portalShopByPriceMax"></param>
		///<param name="portalShopByPriceIncrement"></param>
		///<param name="portalFedExAccountNumber"></param>
		///<param name="portalFedExMeterNumber"></param>
		///<param name="portalFedExProductionKey"></param>
		///<param name="portalFedExSecurityCode"></param>
		///<param name="portalShippingOriginStateCode"></param>
		///<param name="portalShippingOriginCountryCode"></param>
		public static Portal CreatePortal(System.String portalDomainName, System.String portalCompanyName, System.String portalStoreName, 
			System.String portalLogoPath, System.Boolean portalUseSSL, System.String portalAdminEmail, System.String portalSalesEmail, 
			System.String portalCustomerServiceEmail, System.String portalSalesPhoneNumber, System.String portalCustomerServicePhoneNumber, 
			System.String portalImageNotAvailablePath, System.Byte portalMaxCatalogDisplayColumns, System.Int32 portalMaxCatalogDisplayItems, 
			System.Int32 portalMaxCatalogItemSmallWidth, System.Int32 portalMaxCatalogItemMediumWidth, System.Int32 portalMaxCatalogItemThumbnailWidth, 
			System.Int32 portalMaxCatalogItemLargeWidth, System.Boolean portalActiveInd, System.String portalSMTPServer, 
			System.String portalSMTPUserName, System.String portalSMTPPassword, System.String portalBottomScriptBlock, 
			System.String portalUPSUserName, System.String portalUPSPassword, System.String portalUPSKey, System.String portalShippingOriginZipCode, 
			System.String portalTheme, System.Int32 portalShopByPriceMin, System.Int32 portalShopByPriceMax, System.Int32 portalShopByPriceIncrement, 
			System.String portalFedExAccountNumber, System.String portalFedExMeterNumber, System.String portalFedExProductionKey, 
			System.String portalFedExSecurityCode, System.String portalShippingOriginStateCode, System.String portalShippingOriginCountryCode)
		{
			Portal newPortal = new Portal();
			newPortal.DomainName = portalDomainName;
			newPortal.CompanyName = portalCompanyName;
			newPortal.StoreName = portalStoreName;
			newPortal.LogoPath = portalLogoPath;
			newPortal.UseSSL = portalUseSSL;
			newPortal.AdminEmail = portalAdminEmail;
			newPortal.SalesEmail = portalSalesEmail;
			newPortal.CustomerServiceEmail = portalCustomerServiceEmail;
			newPortal.SalesPhoneNumber = portalSalesPhoneNumber;
			newPortal.CustomerServicePhoneNumber = portalCustomerServicePhoneNumber;
			newPortal.ImageNotAvailablePath = portalImageNotAvailablePath;
			newPortal.MaxCatalogDisplayColumns = portalMaxCatalogDisplayColumns;
			newPortal.MaxCatalogDisplayItems = portalMaxCatalogDisplayItems;
			newPortal.MaxCatalogItemSmallWidth = portalMaxCatalogItemSmallWidth;
			newPortal.MaxCatalogItemMediumWidth = portalMaxCatalogItemMediumWidth;
			newPortal.MaxCatalogItemThumbnailWidth = portalMaxCatalogItemThumbnailWidth;
			newPortal.MaxCatalogItemLargeWidth = portalMaxCatalogItemLargeWidth;
			newPortal.ActiveInd = portalActiveInd;
			newPortal.SMTPServer = portalSMTPServer;
			newPortal.SMTPUserName = portalSMTPUserName;
			newPortal.SMTPPassword = portalSMTPPassword;
			newPortal.BottomScriptBlock = portalBottomScriptBlock;
			newPortal.UPSUserName = portalUPSUserName;
			newPortal.UPSPassword = portalUPSPassword;
			newPortal.UPSKey = portalUPSKey;
			newPortal.ShippingOriginZipCode = portalShippingOriginZipCode;
			newPortal.Theme = portalTheme;
			newPortal.ShopByPriceMin = portalShopByPriceMin;
			newPortal.ShopByPriceMax = portalShopByPriceMax;
			newPortal.ShopByPriceIncrement = portalShopByPriceIncrement;
			newPortal.FedExAccountNumber = portalFedExAccountNumber;
			newPortal.FedExMeterNumber = portalFedExMeterNumber;
			newPortal.FedExProductionKey = portalFedExProductionKey;
			newPortal.FedExSecurityCode = portalFedExSecurityCode;
			newPortal.ShippingOriginStateCode = portalShippingOriginStateCode;
			newPortal.ShippingOriginCountryCode = portalShippingOriginCountryCode;
			return newPortal;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PortalColumn"/> which has raised the event.</param>
		public void OnColumnChanging(PortalColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PortalColumn"/> which has raised the event.</param>
		public void OnColumnChanged(PortalColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PortalColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(PortalColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PortalEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PortalEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PortalColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(PortalColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PortalEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PortalEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the PortalID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 PortalID
		{
			get
			{
				return this.entityData.PortalID; 
			}
			
			set
			{
				if (this.entityData.PortalID == value)
					return;
					
					
				OnColumnChanging(PortalColumn.PortalID, this.entityData.PortalID);
				this.entityData.PortalID = value;
				this.EntityId.PortalID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.PortalID, this.entityData.PortalID);
				OnPropertyChanged("PortalID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DomainName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String DomainName
		{
			get
			{
				return this.entityData.DomainName; 
			}
			
			set
			{
				if (this.entityData.DomainName == value)
					return;
					
					
				OnColumnChanging(PortalColumn.DomainName, this.entityData.DomainName);
				this.entityData.DomainName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.DomainName, this.entityData.DomainName);
				OnPropertyChanged("DomainName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
					
				OnColumnChanging(PortalColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StoreName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String StoreName
		{
			get
			{
				return this.entityData.StoreName; 
			}
			
			set
			{
				if (this.entityData.StoreName == value)
					return;
					
					
				OnColumnChanging(PortalColumn.StoreName, this.entityData.StoreName);
				this.entityData.StoreName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.StoreName, this.entityData.StoreName);
				OnPropertyChanged("StoreName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LogoPath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String LogoPath
		{
			get
			{
				return this.entityData.LogoPath; 
			}
			
			set
			{
				if (this.entityData.LogoPath == value)
					return;
					
					
				OnColumnChanging(PortalColumn.LogoPath, this.entityData.LogoPath);
				this.entityData.LogoPath = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.LogoPath, this.entityData.LogoPath);
				OnPropertyChanged("LogoPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UseSSL property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean UseSSL
		{
			get
			{
				return this.entityData.UseSSL; 
			}
			
			set
			{
				if (this.entityData.UseSSL == value)
					return;
					
					
				OnColumnChanging(PortalColumn.UseSSL, this.entityData.UseSSL);
				this.entityData.UseSSL = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.UseSSL, this.entityData.UseSSL);
				OnPropertyChanged("UseSSL");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdminEmail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String AdminEmail
		{
			get
			{
				return this.entityData.AdminEmail; 
			}
			
			set
			{
				if (this.entityData.AdminEmail == value)
					return;
					
					
				OnColumnChanging(PortalColumn.AdminEmail, this.entityData.AdminEmail);
				this.entityData.AdminEmail = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.AdminEmail, this.entityData.AdminEmail);
				OnPropertyChanged("AdminEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesEmail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SalesEmail
		{
			get
			{
				return this.entityData.SalesEmail; 
			}
			
			set
			{
				if (this.entityData.SalesEmail == value)
					return;
					
					
				OnColumnChanging(PortalColumn.SalesEmail, this.entityData.SalesEmail);
				this.entityData.SalesEmail = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.SalesEmail, this.entityData.SalesEmail);
				OnPropertyChanged("SalesEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerServiceEmail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String CustomerServiceEmail
		{
			get
			{
				return this.entityData.CustomerServiceEmail; 
			}
			
			set
			{
				if (this.entityData.CustomerServiceEmail == value)
					return;
					
					
				OnColumnChanging(PortalColumn.CustomerServiceEmail, this.entityData.CustomerServiceEmail);
				this.entityData.CustomerServiceEmail = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.CustomerServiceEmail, this.entityData.CustomerServiceEmail);
				OnPropertyChanged("CustomerServiceEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SalesPhoneNumber
		{
			get
			{
				return this.entityData.SalesPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.SalesPhoneNumber == value)
					return;
					
					
				OnColumnChanging(PortalColumn.SalesPhoneNumber, this.entityData.SalesPhoneNumber);
				this.entityData.SalesPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.SalesPhoneNumber, this.entityData.SalesPhoneNumber);
				OnPropertyChanged("SalesPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerServicePhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String CustomerServicePhoneNumber
		{
			get
			{
				return this.entityData.CustomerServicePhoneNumber; 
			}
			
			set
			{
				if (this.entityData.CustomerServicePhoneNumber == value)
					return;
					
					
				OnColumnChanging(PortalColumn.CustomerServicePhoneNumber, this.entityData.CustomerServicePhoneNumber);
				this.entityData.CustomerServicePhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.CustomerServicePhoneNumber, this.entityData.CustomerServicePhoneNumber);
				OnPropertyChanged("CustomerServicePhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageNotAvailablePath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String ImageNotAvailablePath
		{
			get
			{
				return this.entityData.ImageNotAvailablePath; 
			}
			
			set
			{
				if (this.entityData.ImageNotAvailablePath == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ImageNotAvailablePath, this.entityData.ImageNotAvailablePath);
				this.entityData.ImageNotAvailablePath = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ImageNotAvailablePath, this.entityData.ImageNotAvailablePath);
				OnPropertyChanged("ImageNotAvailablePath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCatalogDisplayColumns property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Byte MaxCatalogDisplayColumns
		{
			get
			{
				return this.entityData.MaxCatalogDisplayColumns; 
			}
			
			set
			{
				if (this.entityData.MaxCatalogDisplayColumns == value)
					return;
					
					
				OnColumnChanging(PortalColumn.MaxCatalogDisplayColumns, this.entityData.MaxCatalogDisplayColumns);
				this.entityData.MaxCatalogDisplayColumns = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.MaxCatalogDisplayColumns, this.entityData.MaxCatalogDisplayColumns);
				OnPropertyChanged("MaxCatalogDisplayColumns");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCatalogDisplayItems property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaxCatalogDisplayItems
		{
			get
			{
				return this.entityData.MaxCatalogDisplayItems; 
			}
			
			set
			{
				if (this.entityData.MaxCatalogDisplayItems == value)
					return;
					
					
				OnColumnChanging(PortalColumn.MaxCatalogDisplayItems, this.entityData.MaxCatalogDisplayItems);
				this.entityData.MaxCatalogDisplayItems = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.MaxCatalogDisplayItems, this.entityData.MaxCatalogDisplayItems);
				OnPropertyChanged("MaxCatalogDisplayItems");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCatalogItemSmallWidth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaxCatalogItemSmallWidth
		{
			get
			{
				return this.entityData.MaxCatalogItemSmallWidth; 
			}
			
			set
			{
				if (this.entityData.MaxCatalogItemSmallWidth == value)
					return;
					
					
				OnColumnChanging(PortalColumn.MaxCatalogItemSmallWidth, this.entityData.MaxCatalogItemSmallWidth);
				this.entityData.MaxCatalogItemSmallWidth = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.MaxCatalogItemSmallWidth, this.entityData.MaxCatalogItemSmallWidth);
				OnPropertyChanged("MaxCatalogItemSmallWidth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCatalogItemMediumWidth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaxCatalogItemMediumWidth
		{
			get
			{
				return this.entityData.MaxCatalogItemMediumWidth; 
			}
			
			set
			{
				if (this.entityData.MaxCatalogItemMediumWidth == value)
					return;
					
					
				OnColumnChanging(PortalColumn.MaxCatalogItemMediumWidth, this.entityData.MaxCatalogItemMediumWidth);
				this.entityData.MaxCatalogItemMediumWidth = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.MaxCatalogItemMediumWidth, this.entityData.MaxCatalogItemMediumWidth);
				OnPropertyChanged("MaxCatalogItemMediumWidth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCatalogItemThumbnailWidth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaxCatalogItemThumbnailWidth
		{
			get
			{
				return this.entityData.MaxCatalogItemThumbnailWidth; 
			}
			
			set
			{
				if (this.entityData.MaxCatalogItemThumbnailWidth == value)
					return;
					
					
				OnColumnChanging(PortalColumn.MaxCatalogItemThumbnailWidth, this.entityData.MaxCatalogItemThumbnailWidth);
				this.entityData.MaxCatalogItemThumbnailWidth = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.MaxCatalogItemThumbnailWidth, this.entityData.MaxCatalogItemThumbnailWidth);
				OnPropertyChanged("MaxCatalogItemThumbnailWidth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCatalogItemLargeWidth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaxCatalogItemLargeWidth
		{
			get
			{
				return this.entityData.MaxCatalogItemLargeWidth; 
			}
			
			set
			{
				if (this.entityData.MaxCatalogItemLargeWidth == value)
					return;
					
					
				OnColumnChanging(PortalColumn.MaxCatalogItemLargeWidth, this.entityData.MaxCatalogItemLargeWidth);
				this.entityData.MaxCatalogItemLargeWidth = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.MaxCatalogItemLargeWidth, this.entityData.MaxCatalogItemLargeWidth);
				OnPropertyChanged("MaxCatalogItemLargeWidth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ActiveInd
		{
			get
			{
				return this.entityData.ActiveInd; 
			}
			
			set
			{
				if (this.entityData.ActiveInd == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ActiveInd, this.entityData.ActiveInd);
				this.entityData.ActiveInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ActiveInd, this.entityData.ActiveInd);
				OnPropertyChanged("ActiveInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SMTPServer property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SMTPServer
		{
			get
			{
				return this.entityData.SMTPServer; 
			}
			
			set
			{
				if (this.entityData.SMTPServer == value)
					return;
					
					
				OnColumnChanging(PortalColumn.SMTPServer, this.entityData.SMTPServer);
				this.entityData.SMTPServer = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.SMTPServer, this.entityData.SMTPServer);
				OnPropertyChanged("SMTPServer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SMTPUserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SMTPUserName
		{
			get
			{
				return this.entityData.SMTPUserName; 
			}
			
			set
			{
				if (this.entityData.SMTPUserName == value)
					return;
					
					
				OnColumnChanging(PortalColumn.SMTPUserName, this.entityData.SMTPUserName);
				this.entityData.SMTPUserName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.SMTPUserName, this.entityData.SMTPUserName);
				OnPropertyChanged("SMTPUserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SMTPPassword property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SMTPPassword
		{
			get
			{
				return this.entityData.SMTPPassword; 
			}
			
			set
			{
				if (this.entityData.SMTPPassword == value)
					return;
					
					
				OnColumnChanging(PortalColumn.SMTPPassword, this.entityData.SMTPPassword);
				this.entityData.SMTPPassword = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.SMTPPassword, this.entityData.SMTPPassword);
				OnPropertyChanged("SMTPPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BottomScriptBlock property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String BottomScriptBlock
		{
			get
			{
				return this.entityData.BottomScriptBlock; 
			}
			
			set
			{
				if (this.entityData.BottomScriptBlock == value)
					return;
					
					
				OnColumnChanging(PortalColumn.BottomScriptBlock, this.entityData.BottomScriptBlock);
				this.entityData.BottomScriptBlock = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.BottomScriptBlock, this.entityData.BottomScriptBlock);
				OnPropertyChanged("BottomScriptBlock");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UPSUserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String UPSUserName
		{
			get
			{
				return this.entityData.UPSUserName; 
			}
			
			set
			{
				if (this.entityData.UPSUserName == value)
					return;
					
					
				OnColumnChanging(PortalColumn.UPSUserName, this.entityData.UPSUserName);
				this.entityData.UPSUserName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.UPSUserName, this.entityData.UPSUserName);
				OnPropertyChanged("UPSUserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UPSPassword property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String UPSPassword
		{
			get
			{
				return this.entityData.UPSPassword; 
			}
			
			set
			{
				if (this.entityData.UPSPassword == value)
					return;
					
					
				OnColumnChanging(PortalColumn.UPSPassword, this.entityData.UPSPassword);
				this.entityData.UPSPassword = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.UPSPassword, this.entityData.UPSPassword);
				OnPropertyChanged("UPSPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UPSKey property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String UPSKey
		{
			get
			{
				return this.entityData.UPSKey; 
			}
			
			set
			{
				if (this.entityData.UPSKey == value)
					return;
					
					
				OnColumnChanging(PortalColumn.UPSKey, this.entityData.UPSKey);
				this.entityData.UPSKey = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.UPSKey, this.entityData.UPSKey);
				OnPropertyChanged("UPSKey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippingOriginZipCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ShippingOriginZipCode
		{
			get
			{
				return this.entityData.ShippingOriginZipCode; 
			}
			
			set
			{
				if (this.entityData.ShippingOriginZipCode == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ShippingOriginZipCode, this.entityData.ShippingOriginZipCode);
				this.entityData.ShippingOriginZipCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ShippingOriginZipCode, this.entityData.ShippingOriginZipCode);
				OnPropertyChanged("ShippingOriginZipCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Theme property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Theme
		{
			get
			{
				return this.entityData.Theme; 
			}
			
			set
			{
				if (this.entityData.Theme == value)
					return;
					
					
				OnColumnChanging(PortalColumn.Theme, this.entityData.Theme);
				this.entityData.Theme = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.Theme, this.entityData.Theme);
				OnPropertyChanged("Theme");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShopByPriceMin property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ShopByPriceMin
		{
			get
			{
				return this.entityData.ShopByPriceMin; 
			}
			
			set
			{
				if (this.entityData.ShopByPriceMin == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ShopByPriceMin, this.entityData.ShopByPriceMin);
				this.entityData.ShopByPriceMin = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ShopByPriceMin, this.entityData.ShopByPriceMin);
				OnPropertyChanged("ShopByPriceMin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShopByPriceMax property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ShopByPriceMax
		{
			get
			{
				return this.entityData.ShopByPriceMax; 
			}
			
			set
			{
				if (this.entityData.ShopByPriceMax == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ShopByPriceMax, this.entityData.ShopByPriceMax);
				this.entityData.ShopByPriceMax = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ShopByPriceMax, this.entityData.ShopByPriceMax);
				OnPropertyChanged("ShopByPriceMax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShopByPriceIncrement property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ShopByPriceIncrement
		{
			get
			{
				return this.entityData.ShopByPriceIncrement; 
			}
			
			set
			{
				if (this.entityData.ShopByPriceIncrement == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ShopByPriceIncrement, this.entityData.ShopByPriceIncrement);
				this.entityData.ShopByPriceIncrement = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ShopByPriceIncrement, this.entityData.ShopByPriceIncrement);
				OnPropertyChanged("ShopByPriceIncrement");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FedExAccountNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String FedExAccountNumber
		{
			get
			{
				return this.entityData.FedExAccountNumber; 
			}
			
			set
			{
				if (this.entityData.FedExAccountNumber == value)
					return;
					
					
				OnColumnChanging(PortalColumn.FedExAccountNumber, this.entityData.FedExAccountNumber);
				this.entityData.FedExAccountNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.FedExAccountNumber, this.entityData.FedExAccountNumber);
				OnPropertyChanged("FedExAccountNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FedExMeterNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String FedExMeterNumber
		{
			get
			{
				return this.entityData.FedExMeterNumber; 
			}
			
			set
			{
				if (this.entityData.FedExMeterNumber == value)
					return;
					
					
				OnColumnChanging(PortalColumn.FedExMeterNumber, this.entityData.FedExMeterNumber);
				this.entityData.FedExMeterNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.FedExMeterNumber, this.entityData.FedExMeterNumber);
				OnPropertyChanged("FedExMeterNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FedExProductionKey property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String FedExProductionKey
		{
			get
			{
				return this.entityData.FedExProductionKey; 
			}
			
			set
			{
				if (this.entityData.FedExProductionKey == value)
					return;
					
					
				OnColumnChanging(PortalColumn.FedExProductionKey, this.entityData.FedExProductionKey);
				this.entityData.FedExProductionKey = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.FedExProductionKey, this.entityData.FedExProductionKey);
				OnPropertyChanged("FedExProductionKey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FedExSecurityCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String FedExSecurityCode
		{
			get
			{
				return this.entityData.FedExSecurityCode; 
			}
			
			set
			{
				if (this.entityData.FedExSecurityCode == value)
					return;
					
					
				OnColumnChanging(PortalColumn.FedExSecurityCode, this.entityData.FedExSecurityCode);
				this.entityData.FedExSecurityCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.FedExSecurityCode, this.entityData.FedExSecurityCode);
				OnPropertyChanged("FedExSecurityCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippingOriginStateCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String ShippingOriginStateCode
		{
			get
			{
				return this.entityData.ShippingOriginStateCode; 
			}
			
			set
			{
				if (this.entityData.ShippingOriginStateCode == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ShippingOriginStateCode, this.entityData.ShippingOriginStateCode);
				this.entityData.ShippingOriginStateCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ShippingOriginStateCode, this.entityData.ShippingOriginStateCode);
				OnPropertyChanged("ShippingOriginStateCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippingOriginCountryCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String ShippingOriginCountryCode
		{
			get
			{
				return this.entityData.ShippingOriginCountryCode; 
			}
			
			set
			{
				if (this.entityData.ShippingOriginCountryCode == value)
					return;
					
					
				OnColumnChanging(PortalColumn.ShippingOriginCountryCode, this.entityData.ShippingOriginCountryCode);
				this.entityData.ShippingOriginCountryCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(PortalColumn.ShippingOriginCountryCode, this.entityData.ShippingOriginCountryCode);
				OnPropertyChanged("ShippingOriginCountryCode");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodePortal"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PortalID", "DomainName", "CompanyName", "StoreName", "LogoPath", "UseSSL", "AdminEmail", "SalesEmail", "CustomerServiceEmail", "SalesPhoneNumber", "CustomerServicePhoneNumber", "ImageNotAvailablePath", "MaxCatalogDisplayColumns", "MaxCatalogDisplayItems", "MaxCatalogItemSmallWidth", "MaxCatalogItemMediumWidth", "MaxCatalogItemThumbnailWidth", "MaxCatalogItemLargeWidth", "ActiveInd", "SMTPServer", "SMTPUserName", "SMTPPassword", "BottomScriptBlock", "UPSUserName", "UPSPassword", "UPSKey", "ShippingOriginZipCode", "Theme", "ShopByPriceMin", "ShopByPriceMax", "ShopByPriceIncrement", "FedExAccountNumber", "FedExMeterNumber", "FedExProductionKey", "FedExSecurityCode", "ShippingOriginStateCode", "ShippingOriginCountryCode"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of TaxRule objects
		///	which are related to this object through the relation FK_ZNodeTaxRule_ZNodePortal
		/// </summary>	
		[BindableAttribute()]
		public TList<TaxRule> TaxRuleCollection
		{
			get { return entityData.TaxRuleCollection; }
			set { entityData.TaxRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Account objects
		///	which are related to this object through the relation FK_Account_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<Account> AccountCollection
		{
			get { return entityData.AccountCollection; }
			set { entityData.AccountCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Case objects
		///	which are related to this object through the relation FK_Case_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<Case> CaseCollection
		{
			get { return entityData.CaseCollection; }
			set { entityData.CaseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Category objects
		///	which are related to this object through the relation FK_SC_Category_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<Category> CategoryCollection
		{
			get { return entityData.CategoryCollection; }
			set { entityData.CategoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Order objects
		///	which are related to this object through the relation FK_SC_Order_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<Order> OrderCollection
		{
			get { return entityData.OrderCollection; }
			set { entityData.OrderCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Profile objects
		///	which are related to this object through the relation FK_SC_Profile_SC_Portal
		/// </summary>	
		[BindableAttribute()]
		public TList<Profile> ProfileCollection
		{
			get { return entityData.ProfileCollection; }
			set { entityData.ProfileCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ContentPage objects
		///	which are related to this object through the relation FK_ZNodePage_ZNodePortal
		/// </summary>	
		[BindableAttribute()]
		public TList<ContentPage> ContentPageCollection
		{
			get { return entityData.ContentPageCollection; }
			set { entityData.ContentPageCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductType objects
		///	which are related to this object through the relation FK_SC_ProductType_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductType> ProductTypeCollection
		{
			get { return entityData.ProductTypeCollection; }
			set { entityData.ProductTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Manufacturer objects
		///	which are related to this object through the relation FK_SC_Manufacturer_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<Manufacturer> ManufacturerCollection
		{
			get { return entityData.ManufacturerCollection; }
			set { entityData.ManufacturerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Product objects
		///	which are related to this object through the relation FK_SC_Product_Portals
		/// </summary>	
		[BindableAttribute()]
		public TList<Product> ProductCollection
		{
			get { return entityData.ProductCollection; }
			set { entityData.ProductCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PortalEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Portal) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Portal>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Portal);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Portal Entity 
		///</summary>
		public virtual Portal Copy()
		{
			//shallow copy entity
			Portal copy = new Portal();
			copy.PortalID = this.PortalID;
			copy.DomainName = this.DomainName;
			copy.CompanyName = this.CompanyName;
			copy.StoreName = this.StoreName;
			copy.LogoPath = this.LogoPath;
			copy.UseSSL = this.UseSSL;
			copy.AdminEmail = this.AdminEmail;
			copy.SalesEmail = this.SalesEmail;
			copy.CustomerServiceEmail = this.CustomerServiceEmail;
			copy.SalesPhoneNumber = this.SalesPhoneNumber;
			copy.CustomerServicePhoneNumber = this.CustomerServicePhoneNumber;
			copy.ImageNotAvailablePath = this.ImageNotAvailablePath;
			copy.MaxCatalogDisplayColumns = this.MaxCatalogDisplayColumns;
			copy.MaxCatalogDisplayItems = this.MaxCatalogDisplayItems;
			copy.MaxCatalogItemSmallWidth = this.MaxCatalogItemSmallWidth;
			copy.MaxCatalogItemMediumWidth = this.MaxCatalogItemMediumWidth;
			copy.MaxCatalogItemThumbnailWidth = this.MaxCatalogItemThumbnailWidth;
			copy.MaxCatalogItemLargeWidth = this.MaxCatalogItemLargeWidth;
			copy.ActiveInd = this.ActiveInd;
			copy.SMTPServer = this.SMTPServer;
			copy.SMTPUserName = this.SMTPUserName;
			copy.SMTPPassword = this.SMTPPassword;
			copy.BottomScriptBlock = this.BottomScriptBlock;
			copy.UPSUserName = this.UPSUserName;
			copy.UPSPassword = this.UPSPassword;
			copy.UPSKey = this.UPSKey;
			copy.ShippingOriginZipCode = this.ShippingOriginZipCode;
			copy.Theme = this.Theme;
			copy.ShopByPriceMin = this.ShopByPriceMin;
			copy.ShopByPriceMax = this.ShopByPriceMax;
			copy.ShopByPriceIncrement = this.ShopByPriceIncrement;
			copy.FedExAccountNumber = this.FedExAccountNumber;
			copy.FedExMeterNumber = this.FedExMeterNumber;
			copy.FedExProductionKey = this.FedExProductionKey;
			copy.FedExSecurityCode = this.FedExSecurityCode;
			copy.ShippingOriginStateCode = this.ShippingOriginStateCode;
			copy.ShippingOriginCountryCode = this.ShippingOriginCountryCode;
					
			copy.AcceptChanges();
			return (Portal)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Portal Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Portal DeepCopy()
		{
			return EntityHelper.Clone<Portal>(this as Portal);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PortalBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PortalBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="PortalBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="PortalBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PortalBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(PortalBase Object1, PortalBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PortalID != Object2.PortalID)
				equal = false;
			if (Object1.DomainName != Object2.DomainName)
				equal = false;
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if (Object1.StoreName != Object2.StoreName)
				equal = false;
			if ( Object1.LogoPath != null && Object2.LogoPath != null )
			{
				if (Object1.LogoPath != Object2.LogoPath)
					equal = false;
			}
			else if (Object1.LogoPath == null ^ Object2.LogoPath == null )
			{
				equal = false;
			}
			if (Object1.UseSSL != Object2.UseSSL)
				equal = false;
			if ( Object1.AdminEmail != null && Object2.AdminEmail != null )
			{
				if (Object1.AdminEmail != Object2.AdminEmail)
					equal = false;
			}
			else if (Object1.AdminEmail == null ^ Object2.AdminEmail == null )
			{
				equal = false;
			}
			if ( Object1.SalesEmail != null && Object2.SalesEmail != null )
			{
				if (Object1.SalesEmail != Object2.SalesEmail)
					equal = false;
			}
			else if (Object1.SalesEmail == null ^ Object2.SalesEmail == null )
			{
				equal = false;
			}
			if ( Object1.CustomerServiceEmail != null && Object2.CustomerServiceEmail != null )
			{
				if (Object1.CustomerServiceEmail != Object2.CustomerServiceEmail)
					equal = false;
			}
			else if (Object1.CustomerServiceEmail == null ^ Object2.CustomerServiceEmail == null )
			{
				equal = false;
			}
			if ( Object1.SalesPhoneNumber != null && Object2.SalesPhoneNumber != null )
			{
				if (Object1.SalesPhoneNumber != Object2.SalesPhoneNumber)
					equal = false;
			}
			else if (Object1.SalesPhoneNumber == null ^ Object2.SalesPhoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.CustomerServicePhoneNumber != null && Object2.CustomerServicePhoneNumber != null )
			{
				if (Object1.CustomerServicePhoneNumber != Object2.CustomerServicePhoneNumber)
					equal = false;
			}
			else if (Object1.CustomerServicePhoneNumber == null ^ Object2.CustomerServicePhoneNumber == null )
			{
				equal = false;
			}
			if (Object1.ImageNotAvailablePath != Object2.ImageNotAvailablePath)
				equal = false;
			if (Object1.MaxCatalogDisplayColumns != Object2.MaxCatalogDisplayColumns)
				equal = false;
			if (Object1.MaxCatalogDisplayItems != Object2.MaxCatalogDisplayItems)
				equal = false;
			if (Object1.MaxCatalogItemSmallWidth != Object2.MaxCatalogItemSmallWidth)
				equal = false;
			if (Object1.MaxCatalogItemMediumWidth != Object2.MaxCatalogItemMediumWidth)
				equal = false;
			if (Object1.MaxCatalogItemThumbnailWidth != Object2.MaxCatalogItemThumbnailWidth)
				equal = false;
			if (Object1.MaxCatalogItemLargeWidth != Object2.MaxCatalogItemLargeWidth)
				equal = false;
			if (Object1.ActiveInd != Object2.ActiveInd)
				equal = false;
			if ( Object1.SMTPServer != null && Object2.SMTPServer != null )
			{
				if (Object1.SMTPServer != Object2.SMTPServer)
					equal = false;
			}
			else if (Object1.SMTPServer == null ^ Object2.SMTPServer == null )
			{
				equal = false;
			}
			if ( Object1.SMTPUserName != null && Object2.SMTPUserName != null )
			{
				if (Object1.SMTPUserName != Object2.SMTPUserName)
					equal = false;
			}
			else if (Object1.SMTPUserName == null ^ Object2.SMTPUserName == null )
			{
				equal = false;
			}
			if ( Object1.SMTPPassword != null && Object2.SMTPPassword != null )
			{
				if (Object1.SMTPPassword != Object2.SMTPPassword)
					equal = false;
			}
			else if (Object1.SMTPPassword == null ^ Object2.SMTPPassword == null )
			{
				equal = false;
			}
			if ( Object1.BottomScriptBlock != null && Object2.BottomScriptBlock != null )
			{
				if (Object1.BottomScriptBlock != Object2.BottomScriptBlock)
					equal = false;
			}
			else if (Object1.BottomScriptBlock == null ^ Object2.BottomScriptBlock == null )
			{
				equal = false;
			}
			if ( Object1.UPSUserName != null && Object2.UPSUserName != null )
			{
				if (Object1.UPSUserName != Object2.UPSUserName)
					equal = false;
			}
			else if (Object1.UPSUserName == null ^ Object2.UPSUserName == null )
			{
				equal = false;
			}
			if ( Object1.UPSPassword != null && Object2.UPSPassword != null )
			{
				if (Object1.UPSPassword != Object2.UPSPassword)
					equal = false;
			}
			else if (Object1.UPSPassword == null ^ Object2.UPSPassword == null )
			{
				equal = false;
			}
			if ( Object1.UPSKey != null && Object2.UPSKey != null )
			{
				if (Object1.UPSKey != Object2.UPSKey)
					equal = false;
			}
			else if (Object1.UPSKey == null ^ Object2.UPSKey == null )
			{
				equal = false;
			}
			if ( Object1.ShippingOriginZipCode != null && Object2.ShippingOriginZipCode != null )
			{
				if (Object1.ShippingOriginZipCode != Object2.ShippingOriginZipCode)
					equal = false;
			}
			else if (Object1.ShippingOriginZipCode == null ^ Object2.ShippingOriginZipCode == null )
			{
				equal = false;
			}
			if (Object1.Theme != Object2.Theme)
				equal = false;
			if (Object1.ShopByPriceMin != Object2.ShopByPriceMin)
				equal = false;
			if (Object1.ShopByPriceMax != Object2.ShopByPriceMax)
				equal = false;
			if (Object1.ShopByPriceIncrement != Object2.ShopByPriceIncrement)
				equal = false;
			if ( Object1.FedExAccountNumber != null && Object2.FedExAccountNumber != null )
			{
				if (Object1.FedExAccountNumber != Object2.FedExAccountNumber)
					equal = false;
			}
			else if (Object1.FedExAccountNumber == null ^ Object2.FedExAccountNumber == null )
			{
				equal = false;
			}
			if ( Object1.FedExMeterNumber != null && Object2.FedExMeterNumber != null )
			{
				if (Object1.FedExMeterNumber != Object2.FedExMeterNumber)
					equal = false;
			}
			else if (Object1.FedExMeterNumber == null ^ Object2.FedExMeterNumber == null )
			{
				equal = false;
			}
			if ( Object1.FedExProductionKey != null && Object2.FedExProductionKey != null )
			{
				if (Object1.FedExProductionKey != Object2.FedExProductionKey)
					equal = false;
			}
			else if (Object1.FedExProductionKey == null ^ Object2.FedExProductionKey == null )
			{
				equal = false;
			}
			if ( Object1.FedExSecurityCode != null && Object2.FedExSecurityCode != null )
			{
				if (Object1.FedExSecurityCode != Object2.FedExSecurityCode)
					equal = false;
			}
			else if (Object1.FedExSecurityCode == null ^ Object2.FedExSecurityCode == null )
			{
				equal = false;
			}
			if ( Object1.ShippingOriginStateCode != null && Object2.ShippingOriginStateCode != null )
			{
				if (Object1.ShippingOriginStateCode != Object2.ShippingOriginStateCode)
					equal = false;
			}
			else if (Object1.ShippingOriginStateCode == null ^ Object2.ShippingOriginStateCode == null )
			{
				equal = false;
			}
			if ( Object1.ShippingOriginCountryCode != null && Object2.ShippingOriginCountryCode != null )
			{
				if (Object1.ShippingOriginCountryCode != Object2.ShippingOriginCountryCode)
					equal = false;
			}
			else if (Object1.ShippingOriginCountryCode == null ^ Object2.ShippingOriginCountryCode == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((PortalBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static PortalComparer GetComparer()
        {
            return new PortalComparer();
        }
        */

        // Comparer delegates back to Portal
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Portal rhs, PortalColumn which)
        {
            switch (which)
            {
            	
            	
            	case PortalColumn.PortalID:
            		return this.PortalID.CompareTo(rhs.PortalID);
            		
            		                 
            	
            	
            	case PortalColumn.DomainName:
            		return this.DomainName.CompareTo(rhs.DomainName);
            		
            		                 
            	
            	
            	case PortalColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case PortalColumn.StoreName:
            		return this.StoreName.CompareTo(rhs.StoreName);
            		
            		                 
            	
            	
            	case PortalColumn.LogoPath:
            		return this.LogoPath.CompareTo(rhs.LogoPath);
            		
            		                 
            	
            	
            	case PortalColumn.UseSSL:
            		return this.UseSSL.CompareTo(rhs.UseSSL);
            		
            		                 
            	
            	
            	case PortalColumn.AdminEmail:
            		return this.AdminEmail.CompareTo(rhs.AdminEmail);
            		
            		                 
            	
            	
            	case PortalColumn.SalesEmail:
            		return this.SalesEmail.CompareTo(rhs.SalesEmail);
            		
            		                 
            	
            	
            	case PortalColumn.CustomerServiceEmail:
            		return this.CustomerServiceEmail.CompareTo(rhs.CustomerServiceEmail);
            		
            		                 
            	
            	
            	case PortalColumn.SalesPhoneNumber:
            		return this.SalesPhoneNumber.CompareTo(rhs.SalesPhoneNumber);
            		
            		                 
            	
            	
            	case PortalColumn.CustomerServicePhoneNumber:
            		return this.CustomerServicePhoneNumber.CompareTo(rhs.CustomerServicePhoneNumber);
            		
            		                 
            	
            	
            	case PortalColumn.ImageNotAvailablePath:
            		return this.ImageNotAvailablePath.CompareTo(rhs.ImageNotAvailablePath);
            		
            		                 
            	
            	
            	case PortalColumn.MaxCatalogDisplayColumns:
            		return this.MaxCatalogDisplayColumns.CompareTo(rhs.MaxCatalogDisplayColumns);
            		
            		                 
            	
            	
            	case PortalColumn.MaxCatalogDisplayItems:
            		return this.MaxCatalogDisplayItems.CompareTo(rhs.MaxCatalogDisplayItems);
            		
            		                 
            	
            	
            	case PortalColumn.MaxCatalogItemSmallWidth:
            		return this.MaxCatalogItemSmallWidth.CompareTo(rhs.MaxCatalogItemSmallWidth);
            		
            		                 
            	
            	
            	case PortalColumn.MaxCatalogItemMediumWidth:
            		return this.MaxCatalogItemMediumWidth.CompareTo(rhs.MaxCatalogItemMediumWidth);
            		
            		                 
            	
            	
            	case PortalColumn.MaxCatalogItemThumbnailWidth:
            		return this.MaxCatalogItemThumbnailWidth.CompareTo(rhs.MaxCatalogItemThumbnailWidth);
            		
            		                 
            	
            	
            	case PortalColumn.MaxCatalogItemLargeWidth:
            		return this.MaxCatalogItemLargeWidth.CompareTo(rhs.MaxCatalogItemLargeWidth);
            		
            		                 
            	
            	
            	case PortalColumn.ActiveInd:
            		return this.ActiveInd.CompareTo(rhs.ActiveInd);
            		
            		                 
            	
            	
            	case PortalColumn.SMTPServer:
            		return this.SMTPServer.CompareTo(rhs.SMTPServer);
            		
            		                 
            	
            	
            	case PortalColumn.SMTPUserName:
            		return this.SMTPUserName.CompareTo(rhs.SMTPUserName);
            		
            		                 
            	
            	
            	case PortalColumn.SMTPPassword:
            		return this.SMTPPassword.CompareTo(rhs.SMTPPassword);
            		
            		                 
            	
            	
            	case PortalColumn.BottomScriptBlock:
            		return this.BottomScriptBlock.CompareTo(rhs.BottomScriptBlock);
            		
            		                 
            	
            	
            	case PortalColumn.UPSUserName:
            		return this.UPSUserName.CompareTo(rhs.UPSUserName);
            		
            		                 
            	
            	
            	case PortalColumn.UPSPassword:
            		return this.UPSPassword.CompareTo(rhs.UPSPassword);
            		
            		                 
            	
            	
            	case PortalColumn.UPSKey:
            		return this.UPSKey.CompareTo(rhs.UPSKey);
            		
            		                 
            	
            	
            	case PortalColumn.ShippingOriginZipCode:
            		return this.ShippingOriginZipCode.CompareTo(rhs.ShippingOriginZipCode);
            		
            		                 
            	
            	
            	case PortalColumn.Theme:
            		return this.Theme.CompareTo(rhs.Theme);
            		
            		                 
            	
            	
            	case PortalColumn.ShopByPriceMin:
            		return this.ShopByPriceMin.CompareTo(rhs.ShopByPriceMin);
            		
            		                 
            	
            	
            	case PortalColumn.ShopByPriceMax:
            		return this.ShopByPriceMax.CompareTo(rhs.ShopByPriceMax);
            		
            		                 
            	
            	
            	case PortalColumn.ShopByPriceIncrement:
            		return this.ShopByPriceIncrement.CompareTo(rhs.ShopByPriceIncrement);
            		
            		                 
            	
            	
            	case PortalColumn.FedExAccountNumber:
            		return this.FedExAccountNumber.CompareTo(rhs.FedExAccountNumber);
            		
            		                 
            	
            	
            	case PortalColumn.FedExMeterNumber:
            		return this.FedExMeterNumber.CompareTo(rhs.FedExMeterNumber);
            		
            		                 
            	
            	
            	case PortalColumn.FedExProductionKey:
            		return this.FedExProductionKey.CompareTo(rhs.FedExProductionKey);
            		
            		                 
            	
            	
            	case PortalColumn.FedExSecurityCode:
            		return this.FedExSecurityCode.CompareTo(rhs.FedExSecurityCode);
            		
            		                 
            	
            	
            	case PortalColumn.ShippingOriginStateCode:
            		return this.ShippingOriginStateCode.CompareTo(rhs.ShippingOriginStateCode);
            		
            		                 
            	
            	
            	case PortalColumn.ShippingOriginCountryCode:
            		return this.ShippingOriginCountryCode.CompareTo(rhs.ShippingOriginCountryCode);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PortalKey> Members
		
		// member variable for the EntityId property
		private PortalKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public PortalKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PortalKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Portal" 
					+ this.PortalID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{38}{37}- PortalID: {0}{37}- DomainName: {1}{37}- CompanyName: {2}{37}- StoreName: {3}{37}- LogoPath: {4}{37}- UseSSL: {5}{37}- AdminEmail: {6}{37}- SalesEmail: {7}{37}- CustomerServiceEmail: {8}{37}- SalesPhoneNumber: {9}{37}- CustomerServicePhoneNumber: {10}{37}- ImageNotAvailablePath: {11}{37}- MaxCatalogDisplayColumns: {12}{37}- MaxCatalogDisplayItems: {13}{37}- MaxCatalogItemSmallWidth: {14}{37}- MaxCatalogItemMediumWidth: {15}{37}- MaxCatalogItemThumbnailWidth: {16}{37}- MaxCatalogItemLargeWidth: {17}{37}- ActiveInd: {18}{37}- SMTPServer: {19}{37}- SMTPUserName: {20}{37}- SMTPPassword: {21}{37}- BottomScriptBlock: {22}{37}- UPSUserName: {23}{37}- UPSPassword: {24}{37}- UPSKey: {25}{37}- ShippingOriginZipCode: {26}{37}- Theme: {27}{37}- ShopByPriceMin: {28}{37}- ShopByPriceMax: {29}{37}- ShopByPriceIncrement: {30}{37}- FedExAccountNumber: {31}{37}- FedExMeterNumber: {32}{37}- FedExProductionKey: {33}{37}- FedExSecurityCode: {34}{37}- ShippingOriginStateCode: {35}{37}- ShippingOriginCountryCode: {36}{37}", 
				this.PortalID,
				this.DomainName,
				this.CompanyName,
				this.StoreName,
				(this.LogoPath == null) ? string.Empty : this.LogoPath.ToString(),
				this.UseSSL,
				(this.AdminEmail == null) ? string.Empty : this.AdminEmail.ToString(),
				(this.SalesEmail == null) ? string.Empty : this.SalesEmail.ToString(),
				(this.CustomerServiceEmail == null) ? string.Empty : this.CustomerServiceEmail.ToString(),
				(this.SalesPhoneNumber == null) ? string.Empty : this.SalesPhoneNumber.ToString(),
				(this.CustomerServicePhoneNumber == null) ? string.Empty : this.CustomerServicePhoneNumber.ToString(),
				this.ImageNotAvailablePath,
				this.MaxCatalogDisplayColumns,
				this.MaxCatalogDisplayItems,
				this.MaxCatalogItemSmallWidth,
				this.MaxCatalogItemMediumWidth,
				this.MaxCatalogItemThumbnailWidth,
				this.MaxCatalogItemLargeWidth,
				this.ActiveInd,
				(this.SMTPServer == null) ? string.Empty : this.SMTPServer.ToString(),
				(this.SMTPUserName == null) ? string.Empty : this.SMTPUserName.ToString(),
				(this.SMTPPassword == null) ? string.Empty : this.SMTPPassword.ToString(),
				(this.BottomScriptBlock == null) ? string.Empty : this.BottomScriptBlock.ToString(),
				(this.UPSUserName == null) ? string.Empty : this.UPSUserName.ToString(),
				(this.UPSPassword == null) ? string.Empty : this.UPSPassword.ToString(),
				(this.UPSKey == null) ? string.Empty : this.UPSKey.ToString(),
				(this.ShippingOriginZipCode == null) ? string.Empty : this.ShippingOriginZipCode.ToString(),
				this.Theme,
				this.ShopByPriceMin,
				this.ShopByPriceMax,
				this.ShopByPriceIncrement,
				(this.FedExAccountNumber == null) ? string.Empty : this.FedExAccountNumber.ToString(),
				(this.FedExMeterNumber == null) ? string.Empty : this.FedExMeterNumber.ToString(),
				(this.FedExProductionKey == null) ? string.Empty : this.FedExProductionKey.ToString(),
				(this.FedExSecurityCode == null) ? string.Empty : this.FedExSecurityCode.ToString(),
				(this.ShippingOriginStateCode == null) ? string.Empty : this.ShippingOriginStateCode.ToString(),
				(this.ShippingOriginCountryCode == null) ? string.Empty : this.ShippingOriginCountryCode.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodePortal' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class PortalEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// PortalID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodePortal"</remarks>
			public System.Int32 PortalID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DomainName : 
		/// </summary>
		public System.String		  DomainName = string.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = string.Empty;
		
		/// <summary>
		/// StoreName : 
		/// </summary>
		public System.String		  StoreName = string.Empty;
		
		/// <summary>
		/// LogoPath : 
		/// </summary>
		public System.String		  LogoPath = string.Empty;
		
		/// <summary>
		/// UseSSL : 
		/// </summary>
		public System.Boolean		  UseSSL = false;
		
		/// <summary>
		/// AdminEmail : 
		/// </summary>
		public System.String		  AdminEmail = string.Empty;
		
		/// <summary>
		/// SalesEmail : 
		/// </summary>
		public System.String		  SalesEmail = string.Empty;
		
		/// <summary>
		/// CustomerServiceEmail : 
		/// </summary>
		public System.String		  CustomerServiceEmail = string.Empty;
		
		/// <summary>
		/// SalesPhoneNumber : 
		/// </summary>
		public System.String		  SalesPhoneNumber = string.Empty;
		
		/// <summary>
		/// CustomerServicePhoneNumber : 
		/// </summary>
		public System.String		  CustomerServicePhoneNumber = string.Empty;
		
		/// <summary>
		/// ImageNotAvailablePath : 
		/// </summary>
		public System.String		  ImageNotAvailablePath = string.Empty;
		
		/// <summary>
		/// MaxCatalogDisplayColumns : 
		/// </summary>
		public System.Byte		  MaxCatalogDisplayColumns = (byte)0;
		
		/// <summary>
		/// MaxCatalogDisplayItems : 
		/// </summary>
		public System.Int32		  MaxCatalogDisplayItems = (int)0;
		
		/// <summary>
		/// MaxCatalogItemSmallWidth : 
		/// </summary>
		public System.Int32		  MaxCatalogItemSmallWidth = (int)0;
		
		/// <summary>
		/// MaxCatalogItemMediumWidth : 
		/// </summary>
		public System.Int32		  MaxCatalogItemMediumWidth = (int)0;
		
		/// <summary>
		/// MaxCatalogItemThumbnailWidth : 
		/// </summary>
		public System.Int32		  MaxCatalogItemThumbnailWidth = (int)0;
		
		/// <summary>
		/// MaxCatalogItemLargeWidth : 
		/// </summary>
		public System.Int32		  MaxCatalogItemLargeWidth = (int)0;
		
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		public System.Boolean		  ActiveInd = false;
		
		/// <summary>
		/// SMTPServer : 
		/// </summary>
		public System.String		  SMTPServer = string.Empty;
		
		/// <summary>
		/// SMTPUserName : 
		/// </summary>
		public System.String		  SMTPUserName = string.Empty;
		
		/// <summary>
		/// SMTPPassword : 
		/// </summary>
		public System.String		  SMTPPassword = string.Empty;
		
		/// <summary>
		/// BottomScriptBlock : 
		/// </summary>
		public System.String		  BottomScriptBlock = string.Empty;
		
		/// <summary>
		/// UPSUserName : 
		/// </summary>
		public System.String		  UPSUserName = string.Empty;
		
		/// <summary>
		/// UPSPassword : 
		/// </summary>
		public System.String		  UPSPassword = string.Empty;
		
		/// <summary>
		/// UPSKey : 
		/// </summary>
		public System.String		  UPSKey = string.Empty;
		
		/// <summary>
		/// ShippingOriginZipCode : 
		/// </summary>
		public System.String		  ShippingOriginZipCode = string.Empty;
		
		/// <summary>
		/// Theme : 
		/// </summary>
		public System.String		  Theme = string.Empty;
		
		/// <summary>
		/// ShopByPriceMin : 
		/// </summary>
		public System.Int32		  ShopByPriceMin = (int)0;
		
		/// <summary>
		/// ShopByPriceMax : 
		/// </summary>
		public System.Int32		  ShopByPriceMax = (int)0;
		
		/// <summary>
		/// ShopByPriceIncrement : 
		/// </summary>
		public System.Int32		  ShopByPriceIncrement = (int)0;
		
		/// <summary>
		/// FedExAccountNumber : 
		/// </summary>
		public System.String		  FedExAccountNumber = string.Empty;
		
		/// <summary>
		/// FedExMeterNumber : 
		/// </summary>
		public System.String		  FedExMeterNumber = string.Empty;
		
		/// <summary>
		/// FedExProductionKey : 
		/// </summary>
		public System.String		  FedExProductionKey = string.Empty;
		
		/// <summary>
		/// FedExSecurityCode : 
		/// </summary>
		public System.String		  FedExSecurityCode = string.Empty;
		
		/// <summary>
		/// ShippingOriginStateCode : 
		/// </summary>
		public System.String		  ShippingOriginStateCode = string.Empty;
		
		/// <summary>
		/// ShippingOriginCountryCode : 
		/// </summary>
		public System.String		  ShippingOriginCountryCode = string.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			PortalEntityData _tmp = new PortalEntityData();
						
			_tmp.PortalID = this.PortalID;
			
			_tmp.DomainName = this.DomainName;
			_tmp.CompanyName = this.CompanyName;
			_tmp.StoreName = this.StoreName;
			_tmp.LogoPath = this.LogoPath;
			_tmp.UseSSL = this.UseSSL;
			_tmp.AdminEmail = this.AdminEmail;
			_tmp.SalesEmail = this.SalesEmail;
			_tmp.CustomerServiceEmail = this.CustomerServiceEmail;
			_tmp.SalesPhoneNumber = this.SalesPhoneNumber;
			_tmp.CustomerServicePhoneNumber = this.CustomerServicePhoneNumber;
			_tmp.ImageNotAvailablePath = this.ImageNotAvailablePath;
			_tmp.MaxCatalogDisplayColumns = this.MaxCatalogDisplayColumns;
			_tmp.MaxCatalogDisplayItems = this.MaxCatalogDisplayItems;
			_tmp.MaxCatalogItemSmallWidth = this.MaxCatalogItemSmallWidth;
			_tmp.MaxCatalogItemMediumWidth = this.MaxCatalogItemMediumWidth;
			_tmp.MaxCatalogItemThumbnailWidth = this.MaxCatalogItemThumbnailWidth;
			_tmp.MaxCatalogItemLargeWidth = this.MaxCatalogItemLargeWidth;
			_tmp.ActiveInd = this.ActiveInd;
			_tmp.SMTPServer = this.SMTPServer;
			_tmp.SMTPUserName = this.SMTPUserName;
			_tmp.SMTPPassword = this.SMTPPassword;
			_tmp.BottomScriptBlock = this.BottomScriptBlock;
			_tmp.UPSUserName = this.UPSUserName;
			_tmp.UPSPassword = this.UPSPassword;
			_tmp.UPSKey = this.UPSKey;
			_tmp.ShippingOriginZipCode = this.ShippingOriginZipCode;
			_tmp.Theme = this.Theme;
			_tmp.ShopByPriceMin = this.ShopByPriceMin;
			_tmp.ShopByPriceMax = this.ShopByPriceMax;
			_tmp.ShopByPriceIncrement = this.ShopByPriceIncrement;
			_tmp.FedExAccountNumber = this.FedExAccountNumber;
			_tmp.FedExMeterNumber = this.FedExMeterNumber;
			_tmp.FedExProductionKey = this.FedExProductionKey;
			_tmp.FedExSecurityCode = this.FedExSecurityCode;
			_tmp.ShippingOriginStateCode = this.ShippingOriginStateCode;
			_tmp.ShippingOriginCountryCode = this.ShippingOriginCountryCode;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region TaxRuleCollection
		
		private TList<TaxRule> taxRulePortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation taxRulePortalID
		/// </summary>	
		public TList<TaxRule> TaxRuleCollection
		{
			get
			{
				if (taxRulePortalID == null)
				{
				taxRulePortalID = new TList<TaxRule>();
				}
	
				return taxRulePortalID;
			}
			set { taxRulePortalID = value; }
		}
		
		#endregion

		#region AccountCollection
		
		private TList<Account> accountPortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation accountPortalID
		/// </summary>	
		public TList<Account> AccountCollection
		{
			get
			{
				if (accountPortalID == null)
				{
				accountPortalID = new TList<Account>();
				}
	
				return accountPortalID;
			}
			set { accountPortalID = value; }
		}
		
		#endregion

		#region CaseCollection
		
		private TList<Case> @casePortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation @casePortalID
		/// </summary>	
		public TList<Case> CaseCollection
		{
			get
			{
				if (@casePortalID == null)
				{
				@casePortalID = new TList<Case>();
				}
	
				return @casePortalID;
			}
			set { @casePortalID = value; }
		}
		
		#endregion

		#region CategoryCollection
		
		private TList<Category> categoryPortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation categoryPortalID
		/// </summary>	
		public TList<Category> CategoryCollection
		{
			get
			{
				if (categoryPortalID == null)
				{
				categoryPortalID = new TList<Category>();
				}
	
				return categoryPortalID;
			}
			set { categoryPortalID = value; }
		}
		
		#endregion

		#region OrderCollection
		
		private TList<Order> orderPortalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation orderPortalId
		/// </summary>	
		public TList<Order> OrderCollection
		{
			get
			{
				if (orderPortalId == null)
				{
				orderPortalId = new TList<Order>();
				}
	
				return orderPortalId;
			}
			set { orderPortalId = value; }
		}
		
		#endregion

		#region ProfileCollection
		
		private TList<Profile> profilePortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation profilePortalID
		/// </summary>	
		public TList<Profile> ProfileCollection
		{
			get
			{
				if (profilePortalID == null)
				{
				profilePortalID = new TList<Profile>();
				}
	
				return profilePortalID;
			}
			set { profilePortalID = value; }
		}
		
		#endregion

		#region ContentPageCollection
		
		private TList<ContentPage> contentPagePortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation contentPagePortalID
		/// </summary>	
		public TList<ContentPage> ContentPageCollection
		{
			get
			{
				if (contentPagePortalID == null)
				{
				contentPagePortalID = new TList<ContentPage>();
				}
	
				return contentPagePortalID;
			}
			set { contentPagePortalID = value; }
		}
		
		#endregion

		#region ProductTypeCollection
		
		private TList<ProductType> productTypePortalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productTypePortalId
		/// </summary>	
		public TList<ProductType> ProductTypeCollection
		{
			get
			{
				if (productTypePortalId == null)
				{
				productTypePortalId = new TList<ProductType>();
				}
	
				return productTypePortalId;
			}
			set { productTypePortalId = value; }
		}
		
		#endregion

		#region ManufacturerCollection
		
		private TList<Manufacturer> manufacturerPortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation manufacturerPortalID
		/// </summary>	
		public TList<Manufacturer> ManufacturerCollection
		{
			get
			{
				if (manufacturerPortalID == null)
				{
				manufacturerPortalID = new TList<Manufacturer>();
				}
	
				return manufacturerPortalID;
			}
			set { manufacturerPortalID = value; }
		}
		
		#endregion

		#region ProductCollection
		
		private TList<Product> productPortalID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productPortalID
		/// </summary>	
		public TList<Product> ProductCollection
		{
			get
			{
				if (productPortalID == null)
				{
				productPortalID = new TList<Product>();
				}
	
				return productPortalID;
			}
			set { productPortalID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"DomainName");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"CompanyName");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"StoreName");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ImageNotAvailablePath");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShippingOriginZipCode",50));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Theme");
		}
   		#endregion
	
	} // End Class
	
	#region PortalComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PortalComparer : System.Collections.Generic.IComparer<Portal>
	{
		PortalColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PortalComparer"/> class.
        /// </summary>
		public PortalComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PortalComparer(PortalColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Portal"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Portal"/> to compare.</param>
        /// <param name="b">The second <c>Portal</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Portal a, Portal b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Portal entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Portal a, Portal b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PortalColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PortalKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Portal"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PortalKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PortalKey class.
		/// </summary>
		public PortalKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PortalKey class.
		/// </summary>
		public PortalKey(PortalBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.portalID = entity.PortalID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PortalKey class.
		/// </summary>
		public PortalKey(System.Int32 portalID)
		{
			#region Init Properties

			this.portalID = portalID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PortalBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PortalBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PortalID property
		private System.Int32 portalID;
		
		/// <summary>
		/// Gets or sets the PortalID property.
		/// </summary>
		public System.Int32 PortalID
		{
			get { return portalID; }
			set
			{
				if ( Entity != null )
				{
					Entity.PortalID = value;
				}
				
				portalID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PortalID = ( values["PortalID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["PortalID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PortalID", PortalID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PortalID: {0}{1}",
								PortalID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PortalColumn Enum
	
	/// <summary>
	/// Enumerate the Portal columns.
	/// </summary>
	[Serializable]
	public enum PortalColumn : int
	{
		/// <summary>
		/// PortalID : 
		/// </summary>
		[EnumTextValue("PortalID")]
		[ColumnEnum("PortalID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		PortalID = 1,
		/// <summary>
		/// DomainName : 
		/// </summary>
		[EnumTextValue("DomainName")]
		[ColumnEnum("DomainName", typeof(System.String), System.Data.DbType.String, false, false, false)]
		DomainName = 2,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, false)]
		CompanyName = 3,
		/// <summary>
		/// StoreName : 
		/// </summary>
		[EnumTextValue("StoreName")]
		[ColumnEnum("StoreName", typeof(System.String), System.Data.DbType.String, false, false, false)]
		StoreName = 4,
		/// <summary>
		/// LogoPath : 
		/// </summary>
		[EnumTextValue("LogoPath")]
		[ColumnEnum("LogoPath", typeof(System.String), System.Data.DbType.String, false, false, true)]
		LogoPath = 5,
		/// <summary>
		/// UseSSL : 
		/// </summary>
		[EnumTextValue("UseSSL")]
		[ColumnEnum("UseSSL", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		UseSSL = 6,
		/// <summary>
		/// AdminEmail : 
		/// </summary>
		[EnumTextValue("AdminEmail")]
		[ColumnEnum("AdminEmail", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AdminEmail = 7,
		/// <summary>
		/// SalesEmail : 
		/// </summary>
		[EnumTextValue("SalesEmail")]
		[ColumnEnum("SalesEmail", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SalesEmail = 8,
		/// <summary>
		/// CustomerServiceEmail : 
		/// </summary>
		[EnumTextValue("CustomerServiceEmail")]
		[ColumnEnum("CustomerServiceEmail", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CustomerServiceEmail = 9,
		/// <summary>
		/// SalesPhoneNumber : 
		/// </summary>
		[EnumTextValue("SalesPhoneNumber")]
		[ColumnEnum("SalesPhoneNumber", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SalesPhoneNumber = 10,
		/// <summary>
		/// CustomerServicePhoneNumber : 
		/// </summary>
		[EnumTextValue("CustomerServicePhoneNumber")]
		[ColumnEnum("CustomerServicePhoneNumber", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CustomerServicePhoneNumber = 11,
		/// <summary>
		/// ImageNotAvailablePath : 
		/// </summary>
		[EnumTextValue("ImageNotAvailablePath")]
		[ColumnEnum("ImageNotAvailablePath", typeof(System.String), System.Data.DbType.String, false, false, false)]
		ImageNotAvailablePath = 12,
		/// <summary>
		/// MaxCatalogDisplayColumns : 
		/// </summary>
		[EnumTextValue("MaxCatalogDisplayColumns")]
		[ColumnEnum("MaxCatalogDisplayColumns", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		MaxCatalogDisplayColumns = 13,
		/// <summary>
		/// MaxCatalogDisplayItems : 
		/// </summary>
		[EnumTextValue("MaxCatalogDisplayItems")]
		[ColumnEnum("MaxCatalogDisplayItems", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaxCatalogDisplayItems = 14,
		/// <summary>
		/// MaxCatalogItemSmallWidth : 
		/// </summary>
		[EnumTextValue("MaxCatalogItemSmallWidth")]
		[ColumnEnum("MaxCatalogItemSmallWidth", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaxCatalogItemSmallWidth = 15,
		/// <summary>
		/// MaxCatalogItemMediumWidth : 
		/// </summary>
		[EnumTextValue("MaxCatalogItemMediumWidth")]
		[ColumnEnum("MaxCatalogItemMediumWidth", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaxCatalogItemMediumWidth = 16,
		/// <summary>
		/// MaxCatalogItemThumbnailWidth : 
		/// </summary>
		[EnumTextValue("MaxCatalogItemThumbnailWidth")]
		[ColumnEnum("MaxCatalogItemThumbnailWidth", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaxCatalogItemThumbnailWidth = 17,
		/// <summary>
		/// MaxCatalogItemLargeWidth : 
		/// </summary>
		[EnumTextValue("MaxCatalogItemLargeWidth")]
		[ColumnEnum("MaxCatalogItemLargeWidth", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaxCatalogItemLargeWidth = 18,
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		[EnumTextValue("ActiveInd")]
		[ColumnEnum("ActiveInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ActiveInd = 19,
		/// <summary>
		/// SMTPServer : 
		/// </summary>
		[EnumTextValue("SMTPServer")]
		[ColumnEnum("SMTPServer", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SMTPServer = 20,
		/// <summary>
		/// SMTPUserName : 
		/// </summary>
		[EnumTextValue("SMTPUserName")]
		[ColumnEnum("SMTPUserName", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SMTPUserName = 21,
		/// <summary>
		/// SMTPPassword : 
		/// </summary>
		[EnumTextValue("SMTPPassword")]
		[ColumnEnum("SMTPPassword", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SMTPPassword = 22,
		/// <summary>
		/// BottomScriptBlock : 
		/// </summary>
		[EnumTextValue("BottomScriptBlock")]
		[ColumnEnum("BottomScriptBlock", typeof(System.String), System.Data.DbType.String, false, false, true)]
		BottomScriptBlock = 23,
		/// <summary>
		/// UPSUserName : 
		/// </summary>
		[EnumTextValue("UPSUserName")]
		[ColumnEnum("UPSUserName", typeof(System.String), System.Data.DbType.String, false, false, true)]
		UPSUserName = 24,
		/// <summary>
		/// UPSPassword : 
		/// </summary>
		[EnumTextValue("UPSPassword")]
		[ColumnEnum("UPSPassword", typeof(System.String), System.Data.DbType.String, false, false, true)]
		UPSPassword = 25,
		/// <summary>
		/// UPSKey : 
		/// </summary>
		[EnumTextValue("UPSKey")]
		[ColumnEnum("UPSKey", typeof(System.String), System.Data.DbType.String, false, false, true)]
		UPSKey = 26,
		/// <summary>
		/// ShippingOriginZipCode : 
		/// </summary>
		[EnumTextValue("ShippingOriginZipCode")]
		[ColumnEnum("ShippingOriginZipCode", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ShippingOriginZipCode = 27,
		/// <summary>
		/// Theme : 
		/// </summary>
		[EnumTextValue("Theme")]
		[ColumnEnum("Theme", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Theme = 28,
		/// <summary>
		/// ShopByPriceMin : 
		/// </summary>
		[EnumTextValue("ShopByPriceMin")]
		[ColumnEnum("ShopByPriceMin", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ShopByPriceMin = 29,
		/// <summary>
		/// ShopByPriceMax : 
		/// </summary>
		[EnumTextValue("ShopByPriceMax")]
		[ColumnEnum("ShopByPriceMax", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ShopByPriceMax = 30,
		/// <summary>
		/// ShopByPriceIncrement : 
		/// </summary>
		[EnumTextValue("ShopByPriceIncrement")]
		[ColumnEnum("ShopByPriceIncrement", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ShopByPriceIncrement = 31,
		/// <summary>
		/// FedExAccountNumber : 
		/// </summary>
		[EnumTextValue("FedExAccountNumber")]
		[ColumnEnum("FedExAccountNumber", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FedExAccountNumber = 32,
		/// <summary>
		/// FedExMeterNumber : 
		/// </summary>
		[EnumTextValue("FedExMeterNumber")]
		[ColumnEnum("FedExMeterNumber", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FedExMeterNumber = 33,
		/// <summary>
		/// FedExProductionKey : 
		/// </summary>
		[EnumTextValue("FedExProductionKey")]
		[ColumnEnum("FedExProductionKey", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FedExProductionKey = 34,
		/// <summary>
		/// FedExSecurityCode : 
		/// </summary>
		[EnumTextValue("FedExSecurityCode")]
		[ColumnEnum("FedExSecurityCode", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FedExSecurityCode = 35,
		/// <summary>
		/// ShippingOriginStateCode : 
		/// </summary>
		[EnumTextValue("ShippingOriginStateCode")]
		[ColumnEnum("ShippingOriginStateCode", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ShippingOriginStateCode = 36,
		/// <summary>
		/// ShippingOriginCountryCode : 
		/// </summary>
		[EnumTextValue("ShippingOriginCountryCode")]
		[ColumnEnum("ShippingOriginCountryCode", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ShippingOriginCountryCode = 37
	}//End enum

	#endregion PortalColumn Enum

} // end namespace
