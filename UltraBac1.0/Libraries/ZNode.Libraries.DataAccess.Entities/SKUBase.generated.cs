	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file SKU.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region SKUEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SKU"/> object.
	/// </remarks>
	public class SKUEventArgs : System.EventArgs
	{
		private SKUColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the SKUEventArgs class.
		///</summary>
		public SKUEventArgs(SKUColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SKUEventArgs class.
		///</summary>
		public SKUEventArgs(SKUColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The SKUColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SKUColumn" />
		public SKUColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all SKU related events.
	///</summary>
	public delegate void SKUEventHandler(object sender, SKUEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeSKU' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(SKU))]
	public abstract partial class SKUBase : EntityBase, IEntityId<SKUKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private SKUEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//SKUEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private SKUEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<SKU> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event SKUEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SKUEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SKUBase"/> instance.
		///</summary>
		public SKUBase()
		{
			this.entityData = new SKUEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SKUBase"/> instance.
		///</summary>
		///<param name="sKUProductID"></param>
		///<param name="skusku"></param>
		///<param name="sKUWarehouseNo"></param>
		///<param name="sKUNote"></param>
		///<param name="sKUQuantityOnHand"></param>
		///<param name="sKUReorderLevel"></param>
		///<param name="sKUWeightAdditional"></param>
		///<param name="sKUSKUPicturePath"></param>
		///<param name="sKUDisplayOrder"></param>
		///<param name="sKURetailPriceAdditional"></param>
		///<param name="sKUWholesalePriceAdditional"></param>
		///<param name="sKUActiveInd"></param>
		///<param name="sKUCustom1"></param>
		///<param name="sKUCustom2"></param>
		///<param name="sKUCustom3"></param>
		public SKUBase(System.Int32 sKUProductID, System.String skusku, System.Int32? sKUWarehouseNo, 
			System.String sKUNote, System.Int32 sKUQuantityOnHand, System.Int32? sKUReorderLevel, System.Decimal? sKUWeightAdditional, 
			System.String sKUSKUPicturePath, System.Int32? sKUDisplayOrder, System.Decimal? sKURetailPriceAdditional, 
			System.Decimal? sKUWholesalePriceAdditional, System.Boolean sKUActiveInd, System.String sKUCustom1, System.String sKUCustom2, 
			System.String sKUCustom3)
		{
			this.entityData = new SKUEntityData();
			this.backupData = null;

			this.ProductID = sKUProductID;
			this.SKU = skusku;
			this.WarehouseNo = sKUWarehouseNo;
			this.Note = sKUNote;
			this.QuantityOnHand = sKUQuantityOnHand;
			this.ReorderLevel = sKUReorderLevel;
			this.WeightAdditional = sKUWeightAdditional;
			this.SKUPicturePath = sKUSKUPicturePath;
			this.DisplayOrder = sKUDisplayOrder;
			this.RetailPriceAdditional = sKURetailPriceAdditional;
			this.WholesalePriceAdditional = sKUWholesalePriceAdditional;
			this.ActiveInd = sKUActiveInd;
			this.Custom1 = sKUCustom1;
			this.Custom2 = sKUCustom2;
			this.Custom3 = sKUCustom3;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SKU"/> instance.
		///</summary>
		///<param name="sKUProductID"></param>
		///<param name="skusku"></param>
		///<param name="sKUWarehouseNo"></param>
		///<param name="sKUNote"></param>
		///<param name="sKUQuantityOnHand"></param>
		///<param name="sKUReorderLevel"></param>
		///<param name="sKUWeightAdditional"></param>
		///<param name="sKUSKUPicturePath"></param>
		///<param name="sKUDisplayOrder"></param>
		///<param name="sKURetailPriceAdditional"></param>
		///<param name="sKUWholesalePriceAdditional"></param>
		///<param name="sKUActiveInd"></param>
		///<param name="sKUCustom1"></param>
		///<param name="sKUCustom2"></param>
		///<param name="sKUCustom3"></param>
		public static SKU CreateSKU(System.Int32 sKUProductID, System.String skusku, System.Int32? sKUWarehouseNo, 
			System.String sKUNote, System.Int32 sKUQuantityOnHand, System.Int32? sKUReorderLevel, System.Decimal? sKUWeightAdditional, 
			System.String sKUSKUPicturePath, System.Int32? sKUDisplayOrder, System.Decimal? sKURetailPriceAdditional, 
			System.Decimal? sKUWholesalePriceAdditional, System.Boolean sKUActiveInd, System.String sKUCustom1, System.String sKUCustom2, 
			System.String sKUCustom3)
		{
			SKU newSKU = new SKU();
			newSKU.ProductID = sKUProductID;
			newSKU.SKU = skusku;
			newSKU.WarehouseNo = sKUWarehouseNo;
			newSKU.Note = sKUNote;
			newSKU.QuantityOnHand = sKUQuantityOnHand;
			newSKU.ReorderLevel = sKUReorderLevel;
			newSKU.WeightAdditional = sKUWeightAdditional;
			newSKU.SKUPicturePath = sKUSKUPicturePath;
			newSKU.DisplayOrder = sKUDisplayOrder;
			newSKU.RetailPriceAdditional = sKURetailPriceAdditional;
			newSKU.WholesalePriceAdditional = sKUWholesalePriceAdditional;
			newSKU.ActiveInd = sKUActiveInd;
			newSKU.Custom1 = sKUCustom1;
			newSKU.Custom2 = sKUCustom2;
			newSKU.Custom3 = sKUCustom3;
			return newSKU;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SKUColumn"/> which has raised the event.</param>
		public void OnColumnChanging(SKUColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SKUColumn"/> which has raised the event.</param>
		public void OnColumnChanged(SKUColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SKUColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(SKUColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SKUEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SKUEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SKUColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(SKUColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SKUEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SKUEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the SKUID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 SKUID
		{
			get
			{
				return this.entityData.SKUID; 
			}
			
			set
			{
				if (this.entityData.SKUID == value)
					return;
					
					
				OnColumnChanging(SKUColumn.SKUID, this.entityData.SKUID);
				this.entityData.SKUID = value;
				this.EntityId.SKUID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.SKUID, this.entityData.SKUID);
				OnPropertyChanged("SKUID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductID
		{
			get
			{
				return this.entityData.ProductID; 
			}
			
			set
			{
				if (this.entityData.ProductID == value)
					return;
					
					
				OnColumnChanging(SKUColumn.ProductID, this.entityData.ProductID);
				this.entityData.ProductID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.ProductID, this.entityData.ProductID);
				OnPropertyChanged("ProductID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SKU property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SKU
		{
			get
			{
				return this.entityData.SKU; 
			}
			
			set
			{
				if (this.entityData.SKU == value)
					return;
					
					
				OnColumnChanging(SKUColumn.SKU, this.entityData.SKU);
				this.entityData.SKU = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.SKU, this.entityData.SKU);
				OnPropertyChanged("SKU");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WarehouseNo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWarehouseNoNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WarehouseNo
		{
			get
			{
				return this.entityData.WarehouseNo; 
			}
			
			set
			{
				if (this.entityData.WarehouseNo == value)
					return;
					
					
				OnColumnChanging(SKUColumn.WarehouseNo, this.entityData.WarehouseNo);
				this.entityData.WarehouseNo = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.WarehouseNo, this.entityData.WarehouseNo);
				OnPropertyChanged("WarehouseNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
					
				OnColumnChanging(SKUColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuantityOnHand property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 QuantityOnHand
		{
			get
			{
				return this.entityData.QuantityOnHand; 
			}
			
			set
			{
				if (this.entityData.QuantityOnHand == value)
					return;
					
					
				OnColumnChanging(SKUColumn.QuantityOnHand, this.entityData.QuantityOnHand);
				this.entityData.QuantityOnHand = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.QuantityOnHand, this.entityData.QuantityOnHand);
				OnPropertyChanged("QuantityOnHand");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReorderLevel property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReorderLevelNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReorderLevel
		{
			get
			{
				return this.entityData.ReorderLevel; 
			}
			
			set
			{
				if (this.entityData.ReorderLevel == value)
					return;
					
					
				OnColumnChanging(SKUColumn.ReorderLevel, this.entityData.ReorderLevel);
				this.entityData.ReorderLevel = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.ReorderLevel, this.entityData.ReorderLevel);
				OnPropertyChanged("ReorderLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WeightAdditional property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWeightAdditionalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WeightAdditional
		{
			get
			{
				return this.entityData.WeightAdditional; 
			}
			
			set
			{
				if (this.entityData.WeightAdditional == value)
					return;
					
					
				OnColumnChanging(SKUColumn.WeightAdditional, this.entityData.WeightAdditional);
				this.entityData.WeightAdditional = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.WeightAdditional, this.entityData.WeightAdditional);
				OnPropertyChanged("WeightAdditional");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SKUPicturePath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SKUPicturePath
		{
			get
			{
				return this.entityData.SKUPicturePath; 
			}
			
			set
			{
				if (this.entityData.SKUPicturePath == value)
					return;
					
					
				OnColumnChanging(SKUColumn.SKUPicturePath, this.entityData.SKUPicturePath);
				this.entityData.SKUPicturePath = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.SKUPicturePath, this.entityData.SKUPicturePath);
				OnPropertyChanged("SKUPicturePath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDisplayOrderNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
					
				OnColumnChanging(SKUColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailPriceAdditional property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsRetailPriceAdditionalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailPriceAdditional
		{
			get
			{
				return this.entityData.RetailPriceAdditional; 
			}
			
			set
			{
				if (this.entityData.RetailPriceAdditional == value)
					return;
					
					
				OnColumnChanging(SKUColumn.RetailPriceAdditional, this.entityData.RetailPriceAdditional);
				this.entityData.RetailPriceAdditional = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.RetailPriceAdditional, this.entityData.RetailPriceAdditional);
				OnPropertyChanged("RetailPriceAdditional");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalePriceAdditional property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsWholesalePriceAdditionalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WholesalePriceAdditional
		{
			get
			{
				return this.entityData.WholesalePriceAdditional; 
			}
			
			set
			{
				if (this.entityData.WholesalePriceAdditional == value)
					return;
					
					
				OnColumnChanging(SKUColumn.WholesalePriceAdditional, this.entityData.WholesalePriceAdditional);
				this.entityData.WholesalePriceAdditional = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.WholesalePriceAdditional, this.entityData.WholesalePriceAdditional);
				OnPropertyChanged("WholesalePriceAdditional");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ActiveInd
		{
			get
			{
				return this.entityData.ActiveInd; 
			}
			
			set
			{
				if (this.entityData.ActiveInd == value)
					return;
					
					
				OnColumnChanging(SKUColumn.ActiveInd, this.entityData.ActiveInd);
				this.entityData.ActiveInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.ActiveInd, this.entityData.ActiveInd);
				OnPropertyChanged("ActiveInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom1
		{
			get
			{
				return this.entityData.Custom1; 
			}
			
			set
			{
				if (this.entityData.Custom1 == value)
					return;
					
					
				OnColumnChanging(SKUColumn.Custom1, this.entityData.Custom1);
				this.entityData.Custom1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.Custom1, this.entityData.Custom1);
				OnPropertyChanged("Custom1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom2
		{
			get
			{
				return this.entityData.Custom2; 
			}
			
			set
			{
				if (this.entityData.Custom2 == value)
					return;
					
					
				OnColumnChanging(SKUColumn.Custom2, this.entityData.Custom2);
				this.entityData.Custom2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.Custom2, this.entityData.Custom2);
				OnPropertyChanged("Custom2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom3
		{
			get
			{
				return this.entityData.Custom3; 
			}
			
			set
			{
				if (this.entityData.Custom3 == value)
					return;
					
					
				OnColumnChanging(SKUColumn.Custom3, this.entityData.Custom3);
				this.entityData.Custom3 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(SKUColumn.Custom3, this.entityData.Custom3);
				OnPropertyChanged("Custom3");
			}
		}
		

		#region Source Foreign Key Property
				
		private Product _productIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Product"/>.
		/// </summary>
		/// <value>The source Product for ProductID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Product ProductIDSource
      	{
            get { return this._productIDSource; }
            set { this._productIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeSKU"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SKUID", "ProductID", "SKU", "WarehouseNo", "Note", "QuantityOnHand", "ReorderLevel", "WeightAdditional", "SKUPicturePath", "DisplayOrder", "RetailPriceAdditional", "WholesalePriceAdditional", "ActiveInd", "Custom1", "Custom2", "Custom3"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of SKUAttribute objects
		///	which are related to this object through the relation FK_SC_SKUAttribute_SC_SKU
		/// </summary>	
		[BindableAttribute()]
		public TList<SKUAttribute> SKUAttributeCollection
		{
			get { return entityData.SKUAttributeCollection; }
			set { entityData.SKUAttributeCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SKUEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SKU) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SKU>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SKU);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SKU Entity 
		///</summary>
		public virtual SKU Copy()
		{
			//shallow copy entity
			SKU copy = new SKU();
			copy.SKUID = this.SKUID;
			copy.ProductID = this.ProductID;
			copy.SKU = this.SKU;
			copy.WarehouseNo = this.WarehouseNo;
			copy.Note = this.Note;
			copy.QuantityOnHand = this.QuantityOnHand;
			copy.ReorderLevel = this.ReorderLevel;
			copy.WeightAdditional = this.WeightAdditional;
			copy.SKUPicturePath = this.SKUPicturePath;
			copy.DisplayOrder = this.DisplayOrder;
			copy.RetailPriceAdditional = this.RetailPriceAdditional;
			copy.WholesalePriceAdditional = this.WholesalePriceAdditional;
			copy.ActiveInd = this.ActiveInd;
			copy.Custom1 = this.Custom1;
			copy.Custom2 = this.Custom2;
			copy.Custom3 = this.Custom3;
					
			copy.AcceptChanges();
			return (SKU)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed SKU Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SKU DeepCopy()
		{
			return EntityHelper.Clone<SKU>(this as SKU);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SKUBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SKUBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="SKUBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="SKUBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SKUBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(SKUBase Object1, SKUBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SKUID != Object2.SKUID)
				equal = false;
			if (Object1.ProductID != Object2.ProductID)
				equal = false;
			if ( Object1.SKU != null && Object2.SKU != null )
			{
				if (Object1.SKU != Object2.SKU)
					equal = false;
			}
			else if (Object1.SKU == null ^ Object2.SKU == null )
			{
				equal = false;
			}
			if ( Object1.WarehouseNo != null && Object2.WarehouseNo != null )
			{
				if (Object1.WarehouseNo != Object2.WarehouseNo)
					equal = false;
			}
			else if (Object1.WarehouseNo == null ^ Object2.WarehouseNo == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if (Object1.QuantityOnHand != Object2.QuantityOnHand)
				equal = false;
			if ( Object1.ReorderLevel != null && Object2.ReorderLevel != null )
			{
				if (Object1.ReorderLevel != Object2.ReorderLevel)
					equal = false;
			}
			else if (Object1.ReorderLevel == null ^ Object2.ReorderLevel == null )
			{
				equal = false;
			}
			if ( Object1.WeightAdditional != null && Object2.WeightAdditional != null )
			{
				if (Object1.WeightAdditional != Object2.WeightAdditional)
					equal = false;
			}
			else if (Object1.WeightAdditional == null ^ Object2.WeightAdditional == null )
			{
				equal = false;
			}
			if ( Object1.SKUPicturePath != null && Object2.SKUPicturePath != null )
			{
				if (Object1.SKUPicturePath != Object2.SKUPicturePath)
					equal = false;
			}
			else if (Object1.SKUPicturePath == null ^ Object2.SKUPicturePath == null )
			{
				equal = false;
			}
			if ( Object1.DisplayOrder != null && Object2.DisplayOrder != null )
			{
				if (Object1.DisplayOrder != Object2.DisplayOrder)
					equal = false;
			}
			else if (Object1.DisplayOrder == null ^ Object2.DisplayOrder == null )
			{
				equal = false;
			}
			if ( Object1.RetailPriceAdditional != null && Object2.RetailPriceAdditional != null )
			{
				if (Object1.RetailPriceAdditional != Object2.RetailPriceAdditional)
					equal = false;
			}
			else if (Object1.RetailPriceAdditional == null ^ Object2.RetailPriceAdditional == null )
			{
				equal = false;
			}
			if ( Object1.WholesalePriceAdditional != null && Object2.WholesalePriceAdditional != null )
			{
				if (Object1.WholesalePriceAdditional != Object2.WholesalePriceAdditional)
					equal = false;
			}
			else if (Object1.WholesalePriceAdditional == null ^ Object2.WholesalePriceAdditional == null )
			{
				equal = false;
			}
			if (Object1.ActiveInd != Object2.ActiveInd)
				equal = false;
			if ( Object1.Custom1 != null && Object2.Custom1 != null )
			{
				if (Object1.Custom1 != Object2.Custom1)
					equal = false;
			}
			else if (Object1.Custom1 == null ^ Object2.Custom1 == null )
			{
				equal = false;
			}
			if ( Object1.Custom2 != null && Object2.Custom2 != null )
			{
				if (Object1.Custom2 != Object2.Custom2)
					equal = false;
			}
			else if (Object1.Custom2 == null ^ Object2.Custom2 == null )
			{
				equal = false;
			}
			if ( Object1.Custom3 != null && Object2.Custom3 != null )
			{
				if (Object1.Custom3 != Object2.Custom3)
					equal = false;
			}
			else if (Object1.Custom3 == null ^ Object2.Custom3 == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((SKUBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static SKUComparer GetComparer()
        {
            return new SKUComparer();
        }
        */

        // Comparer delegates back to SKU
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SKU rhs, SKUColumn which)
        {
            switch (which)
            {
            	
            	
            	case SKUColumn.SKUID:
            		return this.SKUID.CompareTo(rhs.SKUID);
            		
            		                 
            	
            	
            	case SKUColumn.ProductID:
            		return this.ProductID.CompareTo(rhs.ProductID);
            		
            		                 
            	
            	
            	case SKUColumn.SKU:
            		return this.SKU.CompareTo(rhs.SKU);
            		
            		                 
            	
            	
            	case SKUColumn.WarehouseNo:
            		return this.WarehouseNo.Value.CompareTo(rhs.WarehouseNo.Value);
            		
            		                 
            	
            	
            	case SKUColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case SKUColumn.QuantityOnHand:
            		return this.QuantityOnHand.CompareTo(rhs.QuantityOnHand);
            		
            		                 
            	
            	
            	case SKUColumn.ReorderLevel:
            		return this.ReorderLevel.Value.CompareTo(rhs.ReorderLevel.Value);
            		
            		                 
            	
            	
            	case SKUColumn.WeightAdditional:
            		return this.WeightAdditional.Value.CompareTo(rhs.WeightAdditional.Value);
            		
            		                 
            	
            	
            	case SKUColumn.SKUPicturePath:
            		return this.SKUPicturePath.CompareTo(rhs.SKUPicturePath);
            		
            		                 
            	
            	
            	case SKUColumn.DisplayOrder:
            		return this.DisplayOrder.Value.CompareTo(rhs.DisplayOrder.Value);
            		
            		                 
            	
            	
            	case SKUColumn.RetailPriceAdditional:
            		return this.RetailPriceAdditional.Value.CompareTo(rhs.RetailPriceAdditional.Value);
            		
            		                 
            	
            	
            	case SKUColumn.WholesalePriceAdditional:
            		return this.WholesalePriceAdditional.Value.CompareTo(rhs.WholesalePriceAdditional.Value);
            		
            		                 
            	
            	
            	case SKUColumn.ActiveInd:
            		return this.ActiveInd.CompareTo(rhs.ActiveInd);
            		
            		                 
            	
            	
            	case SKUColumn.Custom1:
            		return this.Custom1.CompareTo(rhs.Custom1);
            		
            		                 
            	
            	
            	case SKUColumn.Custom2:
            		return this.Custom2.CompareTo(rhs.Custom2);
            		
            		                 
            	
            	
            	case SKUColumn.Custom3:
            		return this.Custom3.CompareTo(rhs.Custom3);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SKUKey> Members
		
		// member variable for the EntityId property
		private SKUKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public SKUKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SKUKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"SKU" 
					+ this.SKUID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- SKUID: {0}{16}- ProductID: {1}{16}- SKU: {2}{16}- WarehouseNo: {3}{16}- Note: {4}{16}- QuantityOnHand: {5}{16}- ReorderLevel: {6}{16}- WeightAdditional: {7}{16}- SKUPicturePath: {8}{16}- DisplayOrder: {9}{16}- RetailPriceAdditional: {10}{16}- WholesalePriceAdditional: {11}{16}- ActiveInd: {12}{16}- Custom1: {13}{16}- Custom2: {14}{16}- Custom3: {15}{16}", 
				this.SKUID,
				this.ProductID,
				(this.SKU == null) ? string.Empty : this.SKU.ToString(),
				(this.WarehouseNo == null) ? string.Empty : this.WarehouseNo.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				this.QuantityOnHand,
				(this.ReorderLevel == null) ? string.Empty : this.ReorderLevel.ToString(),
				(this.WeightAdditional == null) ? string.Empty : this.WeightAdditional.ToString(),
				(this.SKUPicturePath == null) ? string.Empty : this.SKUPicturePath.ToString(),
				(this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString(),
				(this.RetailPriceAdditional == null) ? string.Empty : this.RetailPriceAdditional.ToString(),
				(this.WholesalePriceAdditional == null) ? string.Empty : this.WholesalePriceAdditional.ToString(),
				this.ActiveInd,
				(this.Custom1 == null) ? string.Empty : this.Custom1.ToString(),
				(this.Custom2 == null) ? string.Empty : this.Custom2.ToString(),
				(this.Custom3 == null) ? string.Empty : this.Custom3.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeSKU' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class SKUEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// SKUID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeSKU"</remarks>
			public System.Int32 SKUID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ProductID : 
		/// </summary>
		public System.Int32		  ProductID = (int)0;
		
		/// <summary>
		/// SKU : 
		/// </summary>
		public System.String		  SKU = string.Empty;
		
		/// <summary>
		/// WarehouseNo : 
		/// </summary>
		public System.Int32?		  WarehouseNo = (int)0;
		
		/// <summary>
		/// Note : 
		/// </summary>
		public System.String		  Note = string.Empty;
		
		/// <summary>
		/// QuantityOnHand : 
		/// </summary>
		public System.Int32		  QuantityOnHand = (int)0;
		
		/// <summary>
		/// ReorderLevel : 
		/// </summary>
		public System.Int32?		  ReorderLevel = (int)0;
		
		/// <summary>
		/// WeightAdditional : 
		/// </summary>
		public System.Decimal?		  WeightAdditional = 0.0m;
		
		/// <summary>
		/// SKUPicturePath : 
		/// </summary>
		public System.String		  SKUPicturePath = string.Empty;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32?		  DisplayOrder = (int)0;
		
		/// <summary>
		/// RetailPriceAdditional : 
		/// </summary>
		public System.Decimal?		  RetailPriceAdditional = 0;
		
		/// <summary>
		/// WholesalePriceAdditional : 
		/// </summary>
		public System.Decimal?		  WholesalePriceAdditional = 0;
		
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		public System.Boolean		  ActiveInd = false;
		
		/// <summary>
		/// Custom1 : 
		/// </summary>
		public System.String		  Custom1 = string.Empty;
		
		/// <summary>
		/// Custom2 : 
		/// </summary>
		public System.String		  Custom2 = string.Empty;
		
		/// <summary>
		/// Custom3 : 
		/// </summary>
		public System.String		  Custom3 = string.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			SKUEntityData _tmp = new SKUEntityData();
						
			_tmp.SKUID = this.SKUID;
			
			_tmp.ProductID = this.ProductID;
			_tmp.SKU = this.SKU;
			_tmp.WarehouseNo = this.WarehouseNo;
			_tmp.Note = this.Note;
			_tmp.QuantityOnHand = this.QuantityOnHand;
			_tmp.ReorderLevel = this.ReorderLevel;
			_tmp.WeightAdditional = this.WeightAdditional;
			_tmp.SKUPicturePath = this.SKUPicturePath;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.RetailPriceAdditional = this.RetailPriceAdditional;
			_tmp.WholesalePriceAdditional = this.WholesalePriceAdditional;
			_tmp.ActiveInd = this.ActiveInd;
			_tmp.Custom1 = this.Custom1;
			_tmp.Custom2 = this.Custom2;
			_tmp.Custom3 = this.Custom3;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region SKUAttributeCollection
		
		private TList<SKUAttribute> sKUAttributeSKUID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation sKUAttributeSKUID
		/// </summary>	
		public TList<SKUAttribute> SKUAttributeCollection
		{
			get
			{
				if (sKUAttributeSKUID == null)
				{
				sKUAttributeSKUID = new TList<SKUAttribute>();
				}
	
				return sKUAttributeSKUID;
			}
			set { sKUAttributeSKUID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
	
	} // End Class
	
	#region SKUComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SKUComparer : System.Collections.Generic.IComparer<SKU>
	{
		SKUColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SKUComparer"/> class.
        /// </summary>
		public SKUComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SKUComparer(SKUColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SKU"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SKU"/> to compare.</param>
        /// <param name="b">The second <c>SKU</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SKU a, SKU b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SKU entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SKU a, SKU b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SKUColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SKUKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SKU"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SKUKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SKUKey class.
		/// </summary>
		public SKUKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SKUKey class.
		/// </summary>
		public SKUKey(SKUBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.skuid = entity.SKUID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SKUKey class.
		/// </summary>
		public SKUKey(System.Int32 skuid)
		{
			#region Init Properties

			this.skuid = skuid;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SKUBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SKUBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SKUID property
		private System.Int32 skuid;
		
		/// <summary>
		/// Gets or sets the SKUID property.
		/// </summary>
		public System.Int32 SKUID
		{
			get { return skuid; }
			set
			{
				if ( Entity != null )
				{
					Entity.SKUID = value;
				}
				
				skuid = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SKUID = ( values["SKUID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SKUID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SKUID", SKUID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SKUID: {0}{1}",
								SKUID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SKUColumn Enum
	
	/// <summary>
	/// Enumerate the SKU columns.
	/// </summary>
	[Serializable]
	public enum SKUColumn : int
	{
		/// <summary>
		/// SKUID : 
		/// </summary>
		[EnumTextValue("SKUID")]
		[ColumnEnum("SKUID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		SKUID = 1,
		/// <summary>
		/// ProductID : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductID = 2,
		/// <summary>
		/// SKU : 
		/// </summary>
		[EnumTextValue("SKU")]
		[ColumnEnum("SKU", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SKU = 3,
		/// <summary>
		/// WarehouseNo : 
		/// </summary>
		[EnumTextValue("WarehouseNo")]
		[ColumnEnum("WarehouseNo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WarehouseNo = 4,
		/// <summary>
		/// Note : 
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Note = 5,
		/// <summary>
		/// QuantityOnHand : 
		/// </summary>
		[EnumTextValue("QuantityOnHand")]
		[ColumnEnum("QuantityOnHand", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		QuantityOnHand = 6,
		/// <summary>
		/// ReorderLevel : 
		/// </summary>
		[EnumTextValue("ReorderLevel")]
		[ColumnEnum("ReorderLevel", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReorderLevel = 7,
		/// <summary>
		/// WeightAdditional : 
		/// </summary>
		[EnumTextValue("WeightAdditional")]
		[ColumnEnum("WeightAdditional", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WeightAdditional = 8,
		/// <summary>
		/// SKUPicturePath : 
		/// </summary>
		[EnumTextValue("SKUPicturePath")]
		[ColumnEnum("SKUPicturePath", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SKUPicturePath = 9,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DisplayOrder = 10,
		/// <summary>
		/// RetailPriceAdditional : 
		/// </summary>
		[EnumTextValue("RetailPriceAdditional")]
		[ColumnEnum("RetailPriceAdditional", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		RetailPriceAdditional = 11,
		/// <summary>
		/// WholesalePriceAdditional : 
		/// </summary>
		[EnumTextValue("WholesalePriceAdditional")]
		[ColumnEnum("WholesalePriceAdditional", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		WholesalePriceAdditional = 12,
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		[EnumTextValue("ActiveInd")]
		[ColumnEnum("ActiveInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ActiveInd = 13,
		/// <summary>
		/// Custom1 : 
		/// </summary>
		[EnumTextValue("Custom1")]
		[ColumnEnum("Custom1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Custom1 = 14,
		/// <summary>
		/// Custom2 : 
		/// </summary>
		[EnumTextValue("Custom2")]
		[ColumnEnum("Custom2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Custom2 = 15,
		/// <summary>
		/// Custom3 : 
		/// </summary>
		[EnumTextValue("Custom3")]
		[ColumnEnum("Custom3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Custom3 = 16
	}//End enum

	#endregion SKUColumn Enum

} // end namespace
