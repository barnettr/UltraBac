	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file Order.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region OrderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Order"/> object.
	/// </remarks>
	public class OrderEventArgs : System.EventArgs
	{
		private OrderColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the OrderEventArgs class.
		///</summary>
		public OrderEventArgs(OrderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OrderEventArgs class.
		///</summary>
		public OrderEventArgs(OrderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The OrderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OrderColumn" />
		public OrderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Order related events.
	///</summary>
	public delegate void OrderEventHandler(object sender, OrderEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeOrder' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Order))]
	public abstract partial class OrderBase : EntityBase, IEntityId<OrderKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private OrderEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//OrderEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private OrderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Order> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event OrderEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrderEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrderBase"/> instance.
		///</summary>
		public OrderBase()
		{
			this.entityData = new OrderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OrderBase"/> instance.
		///</summary>
		///<param name="orderPortalId"></param>
		///<param name="orderAccountID"></param>
		///<param name="orderOrderStateID"></param>
		///<param name="orderShippingID"></param>
		///<param name="orderPaymentTypeId"></param>
		///<param name="orderShipFirstName"></param>
		///<param name="orderShipLastName"></param>
		///<param name="orderShipCompanyName"></param>
		///<param name="orderShipStreet"></param>
		///<param name="orderShipStreet1"></param>
		///<param name="orderShipCity"></param>
		///<param name="orderShipStateCode"></param>
		///<param name="orderShipPostalCode"></param>
		///<param name="orderShipCountry"></param>
		///<param name="orderShipPhoneNumber"></param>
		///<param name="orderShipEmailID"></param>
		///<param name="orderBillingFirstName"></param>
		///<param name="orderBillingLastName"></param>
		///<param name="orderBillingCompanyName"></param>
		///<param name="orderBillingStreet"></param>
		///<param name="orderBillingStreet1"></param>
		///<param name="orderBillingCity"></param>
		///<param name="orderBillingStateCode"></param>
		///<param name="orderBillingPostalCode"></param>
		///<param name="orderBillingCountry"></param>
		///<param name="orderBillingPhoneNumber"></param>
		///<param name="orderBillingEmailId"></param>
		///<param name="orderCardTransactionID"></param>
		///<param name="orderCardTypeId"></param>
		///<param name="orderCardEndsIn"></param>
		///<param name="orderTaxCost"></param>
		///<param name="orderShippingCost"></param>
		///<param name="orderSubTotal"></param>
		///<param name="orderDiscountAmount"></param>
		///<param name="orderTotal"></param>
		///<param name="orderCouponID"></param>
		///<param name="orderOrderDate"></param>
		///<param name="orderCreditCardNumber"></param>
		///<param name="orderCreditCardExp"></param>
		///<param name="orderCreditCardCVV"></param>
		///<param name="orderCustom1"></param>
		///<param name="orderCustom2"></param>
		///<param name="orderAdditionalInstructions"></param>
		///<param name="orderCustom3"></param>
		public OrderBase(System.Int32? orderPortalId, System.Int32? orderAccountID, System.Int32? orderOrderStateID, 
			System.Int32? orderShippingID, System.Int32? orderPaymentTypeId, System.String orderShipFirstName, System.String orderShipLastName, 
			System.String orderShipCompanyName, System.String orderShipStreet, System.String orderShipStreet1, System.String orderShipCity, 
			System.String orderShipStateCode, System.String orderShipPostalCode, System.String orderShipCountry, System.String orderShipPhoneNumber, 
			System.String orderShipEmailID, System.String orderBillingFirstName, System.String orderBillingLastName, 
			System.String orderBillingCompanyName, System.String orderBillingStreet, System.String orderBillingStreet1, 
			System.String orderBillingCity, System.String orderBillingStateCode, System.String orderBillingPostalCode, 
			System.String orderBillingCountry, System.String orderBillingPhoneNumber, System.String orderBillingEmailId, 
			System.String orderCardTransactionID, System.Int32? orderCardTypeId, System.String orderCardEndsIn, System.Decimal? orderTaxCost, 
			System.Decimal? orderShippingCost, System.Decimal? orderSubTotal, System.Decimal? orderDiscountAmount, 
			System.Decimal? orderTotal, System.Int32? orderCouponID, System.DateTime? orderOrderDate, System.String orderCreditCardNumber, 
			System.String orderCreditCardExp, System.String orderCreditCardCVV, System.String orderCustom1, System.String orderCustom2, 
			System.String orderAdditionalInstructions, System.String orderCustom3)
		{
			this.entityData = new OrderEntityData();
			this.backupData = null;

			this.PortalId = orderPortalId;
			this.AccountID = orderAccountID;
			this.OrderStateID = orderOrderStateID;
			this.ShippingID = orderShippingID;
			this.PaymentTypeId = orderPaymentTypeId;
			this.ShipFirstName = orderShipFirstName;
			this.ShipLastName = orderShipLastName;
			this.ShipCompanyName = orderShipCompanyName;
			this.ShipStreet = orderShipStreet;
			this.ShipStreet1 = orderShipStreet1;
			this.ShipCity = orderShipCity;
			this.ShipStateCode = orderShipStateCode;
			this.ShipPostalCode = orderShipPostalCode;
			this.ShipCountry = orderShipCountry;
			this.ShipPhoneNumber = orderShipPhoneNumber;
			this.ShipEmailID = orderShipEmailID;
			this.BillingFirstName = orderBillingFirstName;
			this.BillingLastName = orderBillingLastName;
			this.BillingCompanyName = orderBillingCompanyName;
			this.BillingStreet = orderBillingStreet;
			this.BillingStreet1 = orderBillingStreet1;
			this.BillingCity = orderBillingCity;
			this.BillingStateCode = orderBillingStateCode;
			this.BillingPostalCode = orderBillingPostalCode;
			this.BillingCountry = orderBillingCountry;
			this.BillingPhoneNumber = orderBillingPhoneNumber;
			this.BillingEmailId = orderBillingEmailId;
			this.CardTransactionID = orderCardTransactionID;
			this.CardTypeId = orderCardTypeId;
			this.CardEndsIn = orderCardEndsIn;
			this.TaxCost = orderTaxCost;
			this.ShippingCost = orderShippingCost;
			this.SubTotal = orderSubTotal;
			this.DiscountAmount = orderDiscountAmount;
			this.Total = orderTotal;
			this.CouponID = orderCouponID;
			this.OrderDate = orderOrderDate;
			this.CreditCardNumber = orderCreditCardNumber;
			this.CreditCardExp = orderCreditCardExp;
			this.CreditCardCVV = orderCreditCardCVV;
			this.Custom1 = orderCustom1;
			this.Custom2 = orderCustom2;
			this.AdditionalInstructions = orderAdditionalInstructions;
			this.Custom3 = orderCustom3;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Order"/> instance.
		///</summary>
		///<param name="orderPortalId"></param>
		///<param name="orderAccountID"></param>
		///<param name="orderOrderStateID"></param>
		///<param name="orderShippingID"></param>
		///<param name="orderPaymentTypeId"></param>
		///<param name="orderShipFirstName"></param>
		///<param name="orderShipLastName"></param>
		///<param name="orderShipCompanyName"></param>
		///<param name="orderShipStreet"></param>
		///<param name="orderShipStreet1"></param>
		///<param name="orderShipCity"></param>
		///<param name="orderShipStateCode"></param>
		///<param name="orderShipPostalCode"></param>
		///<param name="orderShipCountry"></param>
		///<param name="orderShipPhoneNumber"></param>
		///<param name="orderShipEmailID"></param>
		///<param name="orderBillingFirstName"></param>
		///<param name="orderBillingLastName"></param>
		///<param name="orderBillingCompanyName"></param>
		///<param name="orderBillingStreet"></param>
		///<param name="orderBillingStreet1"></param>
		///<param name="orderBillingCity"></param>
		///<param name="orderBillingStateCode"></param>
		///<param name="orderBillingPostalCode"></param>
		///<param name="orderBillingCountry"></param>
		///<param name="orderBillingPhoneNumber"></param>
		///<param name="orderBillingEmailId"></param>
		///<param name="orderCardTransactionID"></param>
		///<param name="orderCardTypeId"></param>
		///<param name="orderCardEndsIn"></param>
		///<param name="orderTaxCost"></param>
		///<param name="orderShippingCost"></param>
		///<param name="orderSubTotal"></param>
		///<param name="orderDiscountAmount"></param>
		///<param name="orderTotal"></param>
		///<param name="orderCouponID"></param>
		///<param name="orderOrderDate"></param>
		///<param name="orderCreditCardNumber"></param>
		///<param name="orderCreditCardExp"></param>
		///<param name="orderCreditCardCVV"></param>
		///<param name="orderCustom1"></param>
		///<param name="orderCustom2"></param>
		///<param name="orderAdditionalInstructions"></param>
		///<param name="orderCustom3"></param>
		public static Order CreateOrder(System.Int32? orderPortalId, System.Int32? orderAccountID, System.Int32? orderOrderStateID, 
			System.Int32? orderShippingID, System.Int32? orderPaymentTypeId, System.String orderShipFirstName, System.String orderShipLastName, 
			System.String orderShipCompanyName, System.String orderShipStreet, System.String orderShipStreet1, System.String orderShipCity, 
			System.String orderShipStateCode, System.String orderShipPostalCode, System.String orderShipCountry, System.String orderShipPhoneNumber, 
			System.String orderShipEmailID, System.String orderBillingFirstName, System.String orderBillingLastName, 
			System.String orderBillingCompanyName, System.String orderBillingStreet, System.String orderBillingStreet1, 
			System.String orderBillingCity, System.String orderBillingStateCode, System.String orderBillingPostalCode, 
			System.String orderBillingCountry, System.String orderBillingPhoneNumber, System.String orderBillingEmailId, 
			System.String orderCardTransactionID, System.Int32? orderCardTypeId, System.String orderCardEndsIn, System.Decimal? orderTaxCost, 
			System.Decimal? orderShippingCost, System.Decimal? orderSubTotal, System.Decimal? orderDiscountAmount, 
			System.Decimal? orderTotal, System.Int32? orderCouponID, System.DateTime? orderOrderDate, System.String orderCreditCardNumber, 
			System.String orderCreditCardExp, System.String orderCreditCardCVV, System.String orderCustom1, System.String orderCustom2, 
			System.String orderAdditionalInstructions, System.String orderCustom3)
		{
			Order newOrder = new Order();
			newOrder.PortalId = orderPortalId;
			newOrder.AccountID = orderAccountID;
			newOrder.OrderStateID = orderOrderStateID;
			newOrder.ShippingID = orderShippingID;
			newOrder.PaymentTypeId = orderPaymentTypeId;
			newOrder.ShipFirstName = orderShipFirstName;
			newOrder.ShipLastName = orderShipLastName;
			newOrder.ShipCompanyName = orderShipCompanyName;
			newOrder.ShipStreet = orderShipStreet;
			newOrder.ShipStreet1 = orderShipStreet1;
			newOrder.ShipCity = orderShipCity;
			newOrder.ShipStateCode = orderShipStateCode;
			newOrder.ShipPostalCode = orderShipPostalCode;
			newOrder.ShipCountry = orderShipCountry;
			newOrder.ShipPhoneNumber = orderShipPhoneNumber;
			newOrder.ShipEmailID = orderShipEmailID;
			newOrder.BillingFirstName = orderBillingFirstName;
			newOrder.BillingLastName = orderBillingLastName;
			newOrder.BillingCompanyName = orderBillingCompanyName;
			newOrder.BillingStreet = orderBillingStreet;
			newOrder.BillingStreet1 = orderBillingStreet1;
			newOrder.BillingCity = orderBillingCity;
			newOrder.BillingStateCode = orderBillingStateCode;
			newOrder.BillingPostalCode = orderBillingPostalCode;
			newOrder.BillingCountry = orderBillingCountry;
			newOrder.BillingPhoneNumber = orderBillingPhoneNumber;
			newOrder.BillingEmailId = orderBillingEmailId;
			newOrder.CardTransactionID = orderCardTransactionID;
			newOrder.CardTypeId = orderCardTypeId;
			newOrder.CardEndsIn = orderCardEndsIn;
			newOrder.TaxCost = orderTaxCost;
			newOrder.ShippingCost = orderShippingCost;
			newOrder.SubTotal = orderSubTotal;
			newOrder.DiscountAmount = orderDiscountAmount;
			newOrder.Total = orderTotal;
			newOrder.CouponID = orderCouponID;
			newOrder.OrderDate = orderOrderDate;
			newOrder.CreditCardNumber = orderCreditCardNumber;
			newOrder.CreditCardExp = orderCreditCardExp;
			newOrder.CreditCardCVV = orderCreditCardCVV;
			newOrder.Custom1 = orderCustom1;
			newOrder.Custom2 = orderCustom2;
			newOrder.AdditionalInstructions = orderAdditionalInstructions;
			newOrder.Custom3 = orderCustom3;
			return newOrder;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		public void OnColumnChanging(OrderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		public void OnColumnChanged(OrderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(OrderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OrderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OrderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(OrderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OrderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OrderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the OrderID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 OrderID
		{
			get
			{
				return this.entityData.OrderID; 
			}
			
			set
			{
				if (this.entityData.OrderID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.OrderID, this.entityData.OrderID);
				this.entityData.OrderID = value;
				this.EntityId.OrderID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.OrderID, this.entityData.OrderID);
				OnPropertyChanged("OrderID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PortalId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPortalIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PortalId
		{
			get
			{
				return this.entityData.PortalId; 
			}
			
			set
			{
				if (this.entityData.PortalId == value)
					return;
					
					
				OnColumnChanging(OrderColumn.PortalId, this.entityData.PortalId);
				this.entityData.PortalId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.PortalId, this.entityData.PortalId);
				OnPropertyChanged("PortalId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAccountIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AccountID
		{
			get
			{
				return this.entityData.AccountID; 
			}
			
			set
			{
				if (this.entityData.AccountID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.AccountID, this.entityData.AccountID);
				this.entityData.AccountID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.AccountID, this.entityData.AccountID);
				OnPropertyChanged("AccountID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderStateID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrderStateIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrderStateID
		{
			get
			{
				return this.entityData.OrderStateID; 
			}
			
			set
			{
				if (this.entityData.OrderStateID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.OrderStateID, this.entityData.OrderStateID);
				this.entityData.OrderStateID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.OrderStateID, this.entityData.OrderStateID);
				OnPropertyChanged("OrderStateID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippingID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsShippingIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ShippingID
		{
			get
			{
				return this.entityData.ShippingID; 
			}
			
			set
			{
				if (this.entityData.ShippingID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShippingID, this.entityData.ShippingID);
				this.entityData.ShippingID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShippingID, this.entityData.ShippingID);
				OnPropertyChanged("ShippingID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPaymentTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PaymentTypeId
		{
			get
			{
				return this.entityData.PaymentTypeId; 
			}
			
			set
			{
				if (this.entityData.PaymentTypeId == value)
					return;
					
					
				OnColumnChanging(OrderColumn.PaymentTypeId, this.entityData.PaymentTypeId);
				this.entityData.PaymentTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.PaymentTypeId, this.entityData.PaymentTypeId);
				OnPropertyChanged("PaymentTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipFirstName
		{
			get
			{
				return this.entityData.ShipFirstName; 
			}
			
			set
			{
				if (this.entityData.ShipFirstName == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipFirstName, this.entityData.ShipFirstName);
				this.entityData.ShipFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipFirstName, this.entityData.ShipFirstName);
				OnPropertyChanged("ShipFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipLastName
		{
			get
			{
				return this.entityData.ShipLastName; 
			}
			
			set
			{
				if (this.entityData.ShipLastName == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipLastName, this.entityData.ShipLastName);
				this.entityData.ShipLastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipLastName, this.entityData.ShipLastName);
				OnPropertyChanged("ShipLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipCompanyName
		{
			get
			{
				return this.entityData.ShipCompanyName; 
			}
			
			set
			{
				if (this.entityData.ShipCompanyName == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipCompanyName, this.entityData.ShipCompanyName);
				this.entityData.ShipCompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipCompanyName, this.entityData.ShipCompanyName);
				OnPropertyChanged("ShipCompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipStreet property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipStreet
		{
			get
			{
				return this.entityData.ShipStreet; 
			}
			
			set
			{
				if (this.entityData.ShipStreet == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipStreet, this.entityData.ShipStreet);
				this.entityData.ShipStreet = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipStreet, this.entityData.ShipStreet);
				OnPropertyChanged("ShipStreet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipStreet1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipStreet1
		{
			get
			{
				return this.entityData.ShipStreet1; 
			}
			
			set
			{
				if (this.entityData.ShipStreet1 == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipStreet1, this.entityData.ShipStreet1);
				this.entityData.ShipStreet1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipStreet1, this.entityData.ShipStreet1);
				OnPropertyChanged("ShipStreet1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipCity
		{
			get
			{
				return this.entityData.ShipCity; 
			}
			
			set
			{
				if (this.entityData.ShipCity == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipCity, this.entityData.ShipCity);
				this.entityData.ShipCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipCity, this.entityData.ShipCity);
				OnPropertyChanged("ShipCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipStateCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String ShipStateCode
		{
			get
			{
				return this.entityData.ShipStateCode; 
			}
			
			set
			{
				if (this.entityData.ShipStateCode == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipStateCode, this.entityData.ShipStateCode);
				this.entityData.ShipStateCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipStateCode, this.entityData.ShipStateCode);
				OnPropertyChanged("ShipStateCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String ShipPostalCode
		{
			get
			{
				return this.entityData.ShipPostalCode; 
			}
			
			set
			{
				if (this.entityData.ShipPostalCode == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipPostalCode, this.entityData.ShipPostalCode);
				this.entityData.ShipPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipPostalCode, this.entityData.ShipPostalCode);
				OnPropertyChanged("ShipPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String ShipCountry
		{
			get
			{
				return this.entityData.ShipCountry; 
			}
			
			set
			{
				if (this.entityData.ShipCountry == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipCountry, this.entityData.ShipCountry);
				this.entityData.ShipCountry = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipCountry, this.entityData.ShipCountry);
				OnPropertyChanged("ShipCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipPhoneNumber
		{
			get
			{
				return this.entityData.ShipPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.ShipPhoneNumber == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipPhoneNumber, this.entityData.ShipPhoneNumber);
				this.entityData.ShipPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipPhoneNumber, this.entityData.ShipPhoneNumber);
				OnPropertyChanged("ShipPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipEmailID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String ShipEmailID
		{
			get
			{
				return this.entityData.ShipEmailID; 
			}
			
			set
			{
				if (this.entityData.ShipEmailID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShipEmailID, this.entityData.ShipEmailID);
				this.entityData.ShipEmailID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShipEmailID, this.entityData.ShipEmailID);
				OnPropertyChanged("ShipEmailID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingFirstName
		{
			get
			{
				return this.entityData.BillingFirstName; 
			}
			
			set
			{
				if (this.entityData.BillingFirstName == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingFirstName, this.entityData.BillingFirstName);
				this.entityData.BillingFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingFirstName, this.entityData.BillingFirstName);
				OnPropertyChanged("BillingFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingLastName
		{
			get
			{
				return this.entityData.BillingLastName; 
			}
			
			set
			{
				if (this.entityData.BillingLastName == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingLastName, this.entityData.BillingLastName);
				this.entityData.BillingLastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingLastName, this.entityData.BillingLastName);
				OnPropertyChanged("BillingLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingCompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingCompanyName
		{
			get
			{
				return this.entityData.BillingCompanyName; 
			}
			
			set
			{
				if (this.entityData.BillingCompanyName == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingCompanyName, this.entityData.BillingCompanyName);
				this.entityData.BillingCompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingCompanyName, this.entityData.BillingCompanyName);
				OnPropertyChanged("BillingCompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStreet property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingStreet
		{
			get
			{
				return this.entityData.BillingStreet; 
			}
			
			set
			{
				if (this.entityData.BillingStreet == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingStreet, this.entityData.BillingStreet);
				this.entityData.BillingStreet = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingStreet, this.entityData.BillingStreet);
				OnPropertyChanged("BillingStreet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStreet1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingStreet1
		{
			get
			{
				return this.entityData.BillingStreet1; 
			}
			
			set
			{
				if (this.entityData.BillingStreet1 == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingStreet1, this.entityData.BillingStreet1);
				this.entityData.BillingStreet1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingStreet1, this.entityData.BillingStreet1);
				OnPropertyChanged("BillingStreet1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingCity
		{
			get
			{
				return this.entityData.BillingCity; 
			}
			
			set
			{
				if (this.entityData.BillingCity == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingCity, this.entityData.BillingCity);
				this.entityData.BillingCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingCity, this.entityData.BillingCity);
				OnPropertyChanged("BillingCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStateCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String BillingStateCode
		{
			get
			{
				return this.entityData.BillingStateCode; 
			}
			
			set
			{
				if (this.entityData.BillingStateCode == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingStateCode, this.entityData.BillingStateCode);
				this.entityData.BillingStateCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingStateCode, this.entityData.BillingStateCode);
				OnPropertyChanged("BillingStateCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String BillingPostalCode
		{
			get
			{
				return this.entityData.BillingPostalCode; 
			}
			
			set
			{
				if (this.entityData.BillingPostalCode == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingPostalCode, this.entityData.BillingPostalCode);
				this.entityData.BillingPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingPostalCode, this.entityData.BillingPostalCode);
				OnPropertyChanged("BillingPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String BillingCountry
		{
			get
			{
				return this.entityData.BillingCountry; 
			}
			
			set
			{
				if (this.entityData.BillingCountry == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingCountry, this.entityData.BillingCountry);
				this.entityData.BillingCountry = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingCountry, this.entityData.BillingCountry);
				OnPropertyChanged("BillingCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingPhoneNumber
		{
			get
			{
				return this.entityData.BillingPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.BillingPhoneNumber == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingPhoneNumber, this.entityData.BillingPhoneNumber);
				this.entityData.BillingPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingPhoneNumber, this.entityData.BillingPhoneNumber);
				OnPropertyChanged("BillingPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingEmailId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String BillingEmailId
		{
			get
			{
				return this.entityData.BillingEmailId; 
			}
			
			set
			{
				if (this.entityData.BillingEmailId == value)
					return;
					
					
				OnColumnChanging(OrderColumn.BillingEmailId, this.entityData.BillingEmailId);
				this.entityData.BillingEmailId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.BillingEmailId, this.entityData.BillingEmailId);
				OnPropertyChanged("BillingEmailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardTransactionID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String CardTransactionID
		{
			get
			{
				return this.entityData.CardTransactionID; 
			}
			
			set
			{
				if (this.entityData.CardTransactionID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CardTransactionID, this.entityData.CardTransactionID);
				this.entityData.CardTransactionID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CardTransactionID, this.entityData.CardTransactionID);
				OnPropertyChanged("CardTransactionID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCardTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CardTypeId
		{
			get
			{
				return this.entityData.CardTypeId; 
			}
			
			set
			{
				if (this.entityData.CardTypeId == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CardTypeId, this.entityData.CardTypeId);
				this.entityData.CardTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CardTypeId, this.entityData.CardTypeId);
				OnPropertyChanged("CardTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardEndsIn property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String CardEndsIn
		{
			get
			{
				return this.entityData.CardEndsIn; 
			}
			
			set
			{
				if (this.entityData.CardEndsIn == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CardEndsIn, this.entityData.CardEndsIn);
				this.entityData.CardEndsIn = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CardEndsIn, this.entityData.CardEndsIn);
				OnPropertyChanged("CardEndsIn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxCost property. 
		///		
		/// </summary>
		/// <value>This type is smallmoney.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsTaxCostNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TaxCost
		{
			get
			{
				return this.entityData.TaxCost; 
			}
			
			set
			{
				if (this.entityData.TaxCost == value)
					return;
					
					
				OnColumnChanging(OrderColumn.TaxCost, this.entityData.TaxCost);
				this.entityData.TaxCost = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.TaxCost, this.entityData.TaxCost);
				OnPropertyChanged("TaxCost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippingCost property. 
		///		
		/// </summary>
		/// <value>This type is smallmoney.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsShippingCostNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ShippingCost
		{
			get
			{
				return this.entityData.ShippingCost; 
			}
			
			set
			{
				if (this.entityData.ShippingCost == value)
					return;
					
					
				OnColumnChanging(OrderColumn.ShippingCost, this.entityData.ShippingCost);
				this.entityData.ShippingCost = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.ShippingCost, this.entityData.ShippingCost);
				OnPropertyChanged("ShippingCost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubTotal property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsSubTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SubTotal
		{
			get
			{
				return this.entityData.SubTotal; 
			}
			
			set
			{
				if (this.entityData.SubTotal == value)
					return;
					
					
				OnColumnChanging(OrderColumn.SubTotal, this.entityData.SubTotal);
				this.entityData.SubTotal = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.SubTotal, this.entityData.SubTotal);
				OnPropertyChanged("SubTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscountAmount property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsDiscountAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscountAmount
		{
			get
			{
				return this.entityData.DiscountAmount; 
			}
			
			set
			{
				if (this.entityData.DiscountAmount == value)
					return;
					
					
				OnColumnChanging(OrderColumn.DiscountAmount, this.entityData.DiscountAmount);
				this.entityData.DiscountAmount = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.DiscountAmount, this.entityData.DiscountAmount);
				OnPropertyChanged("DiscountAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Total property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Total
		{
			get
			{
				return this.entityData.Total; 
			}
			
			set
			{
				if (this.entityData.Total == value)
					return;
					
					
				OnColumnChanging(OrderColumn.Total, this.entityData.Total);
				this.entityData.Total = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.Total, this.entityData.Total);
				OnPropertyChanged("Total");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CouponID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCouponIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CouponID
		{
			get
			{
				return this.entityData.CouponID; 
			}
			
			set
			{
				if (this.entityData.CouponID == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CouponID, this.entityData.CouponID);
				this.entityData.CouponID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CouponID, this.entityData.CouponID);
				OnPropertyChanged("CouponID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsOrderDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? OrderDate
		{
			get
			{
				return this.entityData.OrderDate; 
			}
			
			set
			{
				if (this.entityData.OrderDate == value)
					return;
					
					
				OnColumnChanging(OrderColumn.OrderDate, this.entityData.OrderDate);
				this.entityData.OrderDate = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.OrderDate, this.entityData.OrderDate);
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String CreditCardNumber
		{
			get
			{
				return this.entityData.CreditCardNumber; 
			}
			
			set
			{
				if (this.entityData.CreditCardNumber == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CreditCardNumber, this.entityData.CreditCardNumber);
				this.entityData.CreditCardNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CreditCardNumber, this.entityData.CreditCardNumber);
				OnPropertyChanged("CreditCardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardExp property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String CreditCardExp
		{
			get
			{
				return this.entityData.CreditCardExp; 
			}
			
			set
			{
				if (this.entityData.CreditCardExp == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CreditCardExp, this.entityData.CreditCardExp);
				this.entityData.CreditCardExp = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CreditCardExp, this.entityData.CreditCardExp);
				OnPropertyChanged("CreditCardExp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardCVV property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String CreditCardCVV
		{
			get
			{
				return this.entityData.CreditCardCVV; 
			}
			
			set
			{
				if (this.entityData.CreditCardCVV == value)
					return;
					
					
				OnColumnChanging(OrderColumn.CreditCardCVV, this.entityData.CreditCardCVV);
				this.entityData.CreditCardCVV = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.CreditCardCVV, this.entityData.CreditCardCVV);
				OnPropertyChanged("CreditCardCVV");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom1
		{
			get
			{
				return this.entityData.Custom1; 
			}
			
			set
			{
				if (this.entityData.Custom1 == value)
					return;
					
					
				OnColumnChanging(OrderColumn.Custom1, this.entityData.Custom1);
				this.entityData.Custom1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.Custom1, this.entityData.Custom1);
				OnPropertyChanged("Custom1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom2
		{
			get
			{
				return this.entityData.Custom2; 
			}
			
			set
			{
				if (this.entityData.Custom2 == value)
					return;
					
					
				OnColumnChanging(OrderColumn.Custom2, this.entityData.Custom2);
				this.entityData.Custom2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.Custom2, this.entityData.Custom2);
				OnPropertyChanged("Custom2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdditionalInstructions property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String AdditionalInstructions
		{
			get
			{
				return this.entityData.AdditionalInstructions; 
			}
			
			set
			{
				if (this.entityData.AdditionalInstructions == value)
					return;
					
					
				OnColumnChanging(OrderColumn.AdditionalInstructions, this.entityData.AdditionalInstructions);
				this.entityData.AdditionalInstructions = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.AdditionalInstructions, this.entityData.AdditionalInstructions);
				OnPropertyChanged("AdditionalInstructions");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom3 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom3
		{
			get
			{
				return this.entityData.Custom3; 
			}
			
			set
			{
				if (this.entityData.Custom3 == value)
					return;
					
					
				OnColumnChanging(OrderColumn.Custom3, this.entityData.Custom3);
				this.entityData.Custom3 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(OrderColumn.Custom3, this.entityData.Custom3);
				OnPropertyChanged("Custom3");
			}
		}
		

		#region Source Foreign Key Property
				
		private Portal _portalIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Portal"/>.
		/// </summary>
		/// <value>The source Portal for PortalId.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Portal PortalIdSource
      	{
            get { return this._portalIdSource; }
            set { this._portalIdSource = value; }
      	}
		private Shipping _shippingIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Shipping"/>.
		/// </summary>
		/// <value>The source Shipping for ShippingID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Shipping ShippingIDSource
      	{
            get { return this._shippingIDSource; }
            set { this._shippingIDSource = value; }
      	}
		private Account _accountIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Account"/>.
		/// </summary>
		/// <value>The source Account for AccountID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Account AccountIDSource
      	{
            get { return this._accountIDSource; }
            set { this._accountIDSource = value; }
      	}
		private Coupon _couponIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Coupon"/>.
		/// </summary>
		/// <value>The source Coupon for CouponID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Coupon CouponIDSource
      	{
            get { return this._couponIDSource; }
            set { this._couponIDSource = value; }
      	}
		private OrderState _orderStateIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="OrderState"/>.
		/// </summary>
		/// <value>The source OrderState for OrderStateID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual OrderState OrderStateIDSource
      	{
            get { return this._orderStateIDSource; }
            set { this._orderStateIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeOrder"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderID", "PortalId", "AccountID", "OrderStateID", "ShippingID", "PaymentTypeId", "ShipFirstName", "ShipLastName", "ShipCompanyName", "ShipStreet", "ShipStreet1", "ShipCity", "ShipStateCode", "ShipPostalCode", "ShipCountry", "ShipPhoneNumber", "ShipEmailID", "BillingFirstName", "BillingLastName", "BillingCompanyName", "BillingStreet", "BillingStreet1", "BillingCity", "BillingStateCode", "BillingPostalCode", "BillingCountry", "BillingPhoneNumber", "BillingEmailId", "CardTransactionID", "CardTypeId", "CardEndsIn", "TaxCost", "ShippingCost", "SubTotal", "DiscountAmount", "Total", "CouponID", "OrderDate", "CreditCardNumber", "CreditCardExp", "CreditCardCVV", "Custom1", "Custom2", "AdditionalInstructions", "Custom3"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of OrderLineItem objects
		///	which are related to this object through the relation FK_SC_OrderLineItem_SC_Order
		/// </summary>	
		[BindableAttribute()]
		public TList<OrderLineItem> OrderLineItemCollection
		{
			get { return entityData.OrderLineItemCollection; }
			set { entityData.OrderLineItemCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OrderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Order) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Order>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Order);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Order Entity 
		///</summary>
		public virtual Order Copy()
		{
			//shallow copy entity
			Order copy = new Order();
			copy.OrderID = this.OrderID;
			copy.PortalId = this.PortalId;
			copy.AccountID = this.AccountID;
			copy.OrderStateID = this.OrderStateID;
			copy.ShippingID = this.ShippingID;
			copy.PaymentTypeId = this.PaymentTypeId;
			copy.ShipFirstName = this.ShipFirstName;
			copy.ShipLastName = this.ShipLastName;
			copy.ShipCompanyName = this.ShipCompanyName;
			copy.ShipStreet = this.ShipStreet;
			copy.ShipStreet1 = this.ShipStreet1;
			copy.ShipCity = this.ShipCity;
			copy.ShipStateCode = this.ShipStateCode;
			copy.ShipPostalCode = this.ShipPostalCode;
			copy.ShipCountry = this.ShipCountry;
			copy.ShipPhoneNumber = this.ShipPhoneNumber;
			copy.ShipEmailID = this.ShipEmailID;
			copy.BillingFirstName = this.BillingFirstName;
			copy.BillingLastName = this.BillingLastName;
			copy.BillingCompanyName = this.BillingCompanyName;
			copy.BillingStreet = this.BillingStreet;
			copy.BillingStreet1 = this.BillingStreet1;
			copy.BillingCity = this.BillingCity;
			copy.BillingStateCode = this.BillingStateCode;
			copy.BillingPostalCode = this.BillingPostalCode;
			copy.BillingCountry = this.BillingCountry;
			copy.BillingPhoneNumber = this.BillingPhoneNumber;
			copy.BillingEmailId = this.BillingEmailId;
			copy.CardTransactionID = this.CardTransactionID;
			copy.CardTypeId = this.CardTypeId;
			copy.CardEndsIn = this.CardEndsIn;
			copy.TaxCost = this.TaxCost;
			copy.ShippingCost = this.ShippingCost;
			copy.SubTotal = this.SubTotal;
			copy.DiscountAmount = this.DiscountAmount;
			copy.Total = this.Total;
			copy.CouponID = this.CouponID;
			copy.OrderDate = this.OrderDate;
			copy.CreditCardNumber = this.CreditCardNumber;
			copy.CreditCardExp = this.CreditCardExp;
			copy.CreditCardCVV = this.CreditCardCVV;
			copy.Custom1 = this.Custom1;
			copy.Custom2 = this.Custom2;
			copy.AdditionalInstructions = this.AdditionalInstructions;
			copy.Custom3 = this.Custom3;
					
			copy.AcceptChanges();
			return (Order)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Order Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Order DeepCopy()
		{
			return EntityHelper.Clone<Order>(this as Order);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrderBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="OrderBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="OrderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(OrderBase Object1, OrderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderID != Object2.OrderID)
				equal = false;
			if ( Object1.PortalId != null && Object2.PortalId != null )
			{
				if (Object1.PortalId != Object2.PortalId)
					equal = false;
			}
			else if (Object1.PortalId == null ^ Object2.PortalId == null )
			{
				equal = false;
			}
			if ( Object1.AccountID != null && Object2.AccountID != null )
			{
				if (Object1.AccountID != Object2.AccountID)
					equal = false;
			}
			else if (Object1.AccountID == null ^ Object2.AccountID == null )
			{
				equal = false;
			}
			if ( Object1.OrderStateID != null && Object2.OrderStateID != null )
			{
				if (Object1.OrderStateID != Object2.OrderStateID)
					equal = false;
			}
			else if (Object1.OrderStateID == null ^ Object2.OrderStateID == null )
			{
				equal = false;
			}
			if ( Object1.ShippingID != null && Object2.ShippingID != null )
			{
				if (Object1.ShippingID != Object2.ShippingID)
					equal = false;
			}
			else if (Object1.ShippingID == null ^ Object2.ShippingID == null )
			{
				equal = false;
			}
			if ( Object1.PaymentTypeId != null && Object2.PaymentTypeId != null )
			{
				if (Object1.PaymentTypeId != Object2.PaymentTypeId)
					equal = false;
			}
			else if (Object1.PaymentTypeId == null ^ Object2.PaymentTypeId == null )
			{
				equal = false;
			}
			if ( Object1.ShipFirstName != null && Object2.ShipFirstName != null )
			{
				if (Object1.ShipFirstName != Object2.ShipFirstName)
					equal = false;
			}
			else if (Object1.ShipFirstName == null ^ Object2.ShipFirstName == null )
			{
				equal = false;
			}
			if ( Object1.ShipLastName != null && Object2.ShipLastName != null )
			{
				if (Object1.ShipLastName != Object2.ShipLastName)
					equal = false;
			}
			else if (Object1.ShipLastName == null ^ Object2.ShipLastName == null )
			{
				equal = false;
			}
			if ( Object1.ShipCompanyName != null && Object2.ShipCompanyName != null )
			{
				if (Object1.ShipCompanyName != Object2.ShipCompanyName)
					equal = false;
			}
			else if (Object1.ShipCompanyName == null ^ Object2.ShipCompanyName == null )
			{
				equal = false;
			}
			if ( Object1.ShipStreet != null && Object2.ShipStreet != null )
			{
				if (Object1.ShipStreet != Object2.ShipStreet)
					equal = false;
			}
			else if (Object1.ShipStreet == null ^ Object2.ShipStreet == null )
			{
				equal = false;
			}
			if ( Object1.ShipStreet1 != null && Object2.ShipStreet1 != null )
			{
				if (Object1.ShipStreet1 != Object2.ShipStreet1)
					equal = false;
			}
			else if (Object1.ShipStreet1 == null ^ Object2.ShipStreet1 == null )
			{
				equal = false;
			}
			if ( Object1.ShipCity != null && Object2.ShipCity != null )
			{
				if (Object1.ShipCity != Object2.ShipCity)
					equal = false;
			}
			else if (Object1.ShipCity == null ^ Object2.ShipCity == null )
			{
				equal = false;
			}
			if ( Object1.ShipStateCode != null && Object2.ShipStateCode != null )
			{
				if (Object1.ShipStateCode != Object2.ShipStateCode)
					equal = false;
			}
			else if (Object1.ShipStateCode == null ^ Object2.ShipStateCode == null )
			{
				equal = false;
			}
			if ( Object1.ShipPostalCode != null && Object2.ShipPostalCode != null )
			{
				if (Object1.ShipPostalCode != Object2.ShipPostalCode)
					equal = false;
			}
			else if (Object1.ShipPostalCode == null ^ Object2.ShipPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.ShipCountry != null && Object2.ShipCountry != null )
			{
				if (Object1.ShipCountry != Object2.ShipCountry)
					equal = false;
			}
			else if (Object1.ShipCountry == null ^ Object2.ShipCountry == null )
			{
				equal = false;
			}
			if ( Object1.ShipPhoneNumber != null && Object2.ShipPhoneNumber != null )
			{
				if (Object1.ShipPhoneNumber != Object2.ShipPhoneNumber)
					equal = false;
			}
			else if (Object1.ShipPhoneNumber == null ^ Object2.ShipPhoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.ShipEmailID != null && Object2.ShipEmailID != null )
			{
				if (Object1.ShipEmailID != Object2.ShipEmailID)
					equal = false;
			}
			else if (Object1.ShipEmailID == null ^ Object2.ShipEmailID == null )
			{
				equal = false;
			}
			if ( Object1.BillingFirstName != null && Object2.BillingFirstName != null )
			{
				if (Object1.BillingFirstName != Object2.BillingFirstName)
					equal = false;
			}
			else if (Object1.BillingFirstName == null ^ Object2.BillingFirstName == null )
			{
				equal = false;
			}
			if ( Object1.BillingLastName != null && Object2.BillingLastName != null )
			{
				if (Object1.BillingLastName != Object2.BillingLastName)
					equal = false;
			}
			else if (Object1.BillingLastName == null ^ Object2.BillingLastName == null )
			{
				equal = false;
			}
			if ( Object1.BillingCompanyName != null && Object2.BillingCompanyName != null )
			{
				if (Object1.BillingCompanyName != Object2.BillingCompanyName)
					equal = false;
			}
			else if (Object1.BillingCompanyName == null ^ Object2.BillingCompanyName == null )
			{
				equal = false;
			}
			if ( Object1.BillingStreet != null && Object2.BillingStreet != null )
			{
				if (Object1.BillingStreet != Object2.BillingStreet)
					equal = false;
			}
			else if (Object1.BillingStreet == null ^ Object2.BillingStreet == null )
			{
				equal = false;
			}
			if ( Object1.BillingStreet1 != null && Object2.BillingStreet1 != null )
			{
				if (Object1.BillingStreet1 != Object2.BillingStreet1)
					equal = false;
			}
			else if (Object1.BillingStreet1 == null ^ Object2.BillingStreet1 == null )
			{
				equal = false;
			}
			if ( Object1.BillingCity != null && Object2.BillingCity != null )
			{
				if (Object1.BillingCity != Object2.BillingCity)
					equal = false;
			}
			else if (Object1.BillingCity == null ^ Object2.BillingCity == null )
			{
				equal = false;
			}
			if ( Object1.BillingStateCode != null && Object2.BillingStateCode != null )
			{
				if (Object1.BillingStateCode != Object2.BillingStateCode)
					equal = false;
			}
			else if (Object1.BillingStateCode == null ^ Object2.BillingStateCode == null )
			{
				equal = false;
			}
			if ( Object1.BillingPostalCode != null && Object2.BillingPostalCode != null )
			{
				if (Object1.BillingPostalCode != Object2.BillingPostalCode)
					equal = false;
			}
			else if (Object1.BillingPostalCode == null ^ Object2.BillingPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.BillingCountry != null && Object2.BillingCountry != null )
			{
				if (Object1.BillingCountry != Object2.BillingCountry)
					equal = false;
			}
			else if (Object1.BillingCountry == null ^ Object2.BillingCountry == null )
			{
				equal = false;
			}
			if ( Object1.BillingPhoneNumber != null && Object2.BillingPhoneNumber != null )
			{
				if (Object1.BillingPhoneNumber != Object2.BillingPhoneNumber)
					equal = false;
			}
			else if (Object1.BillingPhoneNumber == null ^ Object2.BillingPhoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.BillingEmailId != null && Object2.BillingEmailId != null )
			{
				if (Object1.BillingEmailId != Object2.BillingEmailId)
					equal = false;
			}
			else if (Object1.BillingEmailId == null ^ Object2.BillingEmailId == null )
			{
				equal = false;
			}
			if ( Object1.CardTransactionID != null && Object2.CardTransactionID != null )
			{
				if (Object1.CardTransactionID != Object2.CardTransactionID)
					equal = false;
			}
			else if (Object1.CardTransactionID == null ^ Object2.CardTransactionID == null )
			{
				equal = false;
			}
			if ( Object1.CardTypeId != null && Object2.CardTypeId != null )
			{
				if (Object1.CardTypeId != Object2.CardTypeId)
					equal = false;
			}
			else if (Object1.CardTypeId == null ^ Object2.CardTypeId == null )
			{
				equal = false;
			}
			if ( Object1.CardEndsIn != null && Object2.CardEndsIn != null )
			{
				if (Object1.CardEndsIn != Object2.CardEndsIn)
					equal = false;
			}
			else if (Object1.CardEndsIn == null ^ Object2.CardEndsIn == null )
			{
				equal = false;
			}
			if ( Object1.TaxCost != null && Object2.TaxCost != null )
			{
				if (Object1.TaxCost != Object2.TaxCost)
					equal = false;
			}
			else if (Object1.TaxCost == null ^ Object2.TaxCost == null )
			{
				equal = false;
			}
			if ( Object1.ShippingCost != null && Object2.ShippingCost != null )
			{
				if (Object1.ShippingCost != Object2.ShippingCost)
					equal = false;
			}
			else if (Object1.ShippingCost == null ^ Object2.ShippingCost == null )
			{
				equal = false;
			}
			if ( Object1.SubTotal != null && Object2.SubTotal != null )
			{
				if (Object1.SubTotal != Object2.SubTotal)
					equal = false;
			}
			else if (Object1.SubTotal == null ^ Object2.SubTotal == null )
			{
				equal = false;
			}
			if ( Object1.DiscountAmount != null && Object2.DiscountAmount != null )
			{
				if (Object1.DiscountAmount != Object2.DiscountAmount)
					equal = false;
			}
			else if (Object1.DiscountAmount == null ^ Object2.DiscountAmount == null )
			{
				equal = false;
			}
			if ( Object1.Total != null && Object2.Total != null )
			{
				if (Object1.Total != Object2.Total)
					equal = false;
			}
			else if (Object1.Total == null ^ Object2.Total == null )
			{
				equal = false;
			}
			if ( Object1.CouponID != null && Object2.CouponID != null )
			{
				if (Object1.CouponID != Object2.CouponID)
					equal = false;
			}
			else if (Object1.CouponID == null ^ Object2.CouponID == null )
			{
				equal = false;
			}
			if ( Object1.OrderDate != null && Object2.OrderDate != null )
			{
				if (Object1.OrderDate != Object2.OrderDate)
					equal = false;
			}
			else if (Object1.OrderDate == null ^ Object2.OrderDate == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardNumber != null && Object2.CreditCardNumber != null )
			{
				if (Object1.CreditCardNumber != Object2.CreditCardNumber)
					equal = false;
			}
			else if (Object1.CreditCardNumber == null ^ Object2.CreditCardNumber == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardExp != null && Object2.CreditCardExp != null )
			{
				if (Object1.CreditCardExp != Object2.CreditCardExp)
					equal = false;
			}
			else if (Object1.CreditCardExp == null ^ Object2.CreditCardExp == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardCVV != null && Object2.CreditCardCVV != null )
			{
				if (Object1.CreditCardCVV != Object2.CreditCardCVV)
					equal = false;
			}
			else if (Object1.CreditCardCVV == null ^ Object2.CreditCardCVV == null )
			{
				equal = false;
			}
			if ( Object1.Custom1 != null && Object2.Custom1 != null )
			{
				if (Object1.Custom1 != Object2.Custom1)
					equal = false;
			}
			else if (Object1.Custom1 == null ^ Object2.Custom1 == null )
			{
				equal = false;
			}
			if ( Object1.Custom2 != null && Object2.Custom2 != null )
			{
				if (Object1.Custom2 != Object2.Custom2)
					equal = false;
			}
			else if (Object1.Custom2 == null ^ Object2.Custom2 == null )
			{
				equal = false;
			}
			if ( Object1.AdditionalInstructions != null && Object2.AdditionalInstructions != null )
			{
				if (Object1.AdditionalInstructions != Object2.AdditionalInstructions)
					equal = false;
			}
			else if (Object1.AdditionalInstructions == null ^ Object2.AdditionalInstructions == null )
			{
				equal = false;
			}
			if ( Object1.Custom3 != null && Object2.Custom3 != null )
			{
				if (Object1.Custom3 != Object2.Custom3)
					equal = false;
			}
			else if (Object1.Custom3 == null ^ Object2.Custom3 == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((OrderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static OrderComparer GetComparer()
        {
            return new OrderComparer();
        }
        */

        // Comparer delegates back to Order
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Order rhs, OrderColumn which)
        {
            switch (which)
            {
            	
            	
            	case OrderColumn.OrderID:
            		return this.OrderID.CompareTo(rhs.OrderID);
            		
            		                 
            	
            	
            	case OrderColumn.PortalId:
            		return this.PortalId.Value.CompareTo(rhs.PortalId.Value);
            		
            		                 
            	
            	
            	case OrderColumn.AccountID:
            		return this.AccountID.Value.CompareTo(rhs.AccountID.Value);
            		
            		                 
            	
            	
            	case OrderColumn.OrderStateID:
            		return this.OrderStateID.Value.CompareTo(rhs.OrderStateID.Value);
            		
            		                 
            	
            	
            	case OrderColumn.ShippingID:
            		return this.ShippingID.Value.CompareTo(rhs.ShippingID.Value);
            		
            		                 
            	
            	
            	case OrderColumn.PaymentTypeId:
            		return this.PaymentTypeId.Value.CompareTo(rhs.PaymentTypeId.Value);
            		
            		                 
            	
            	
            	case OrderColumn.ShipFirstName:
            		return this.ShipFirstName.CompareTo(rhs.ShipFirstName);
            		
            		                 
            	
            	
            	case OrderColumn.ShipLastName:
            		return this.ShipLastName.CompareTo(rhs.ShipLastName);
            		
            		                 
            	
            	
            	case OrderColumn.ShipCompanyName:
            		return this.ShipCompanyName.CompareTo(rhs.ShipCompanyName);
            		
            		                 
            	
            	
            	case OrderColumn.ShipStreet:
            		return this.ShipStreet.CompareTo(rhs.ShipStreet);
            		
            		                 
            	
            	
            	case OrderColumn.ShipStreet1:
            		return this.ShipStreet1.CompareTo(rhs.ShipStreet1);
            		
            		                 
            	
            	
            	case OrderColumn.ShipCity:
            		return this.ShipCity.CompareTo(rhs.ShipCity);
            		
            		                 
            	
            	
            	case OrderColumn.ShipStateCode:
            		return this.ShipStateCode.CompareTo(rhs.ShipStateCode);
            		
            		                 
            	
            	
            	case OrderColumn.ShipPostalCode:
            		return this.ShipPostalCode.CompareTo(rhs.ShipPostalCode);
            		
            		                 
            	
            	
            	case OrderColumn.ShipCountry:
            		return this.ShipCountry.CompareTo(rhs.ShipCountry);
            		
            		                 
            	
            	
            	case OrderColumn.ShipPhoneNumber:
            		return this.ShipPhoneNumber.CompareTo(rhs.ShipPhoneNumber);
            		
            		                 
            	
            	
            	case OrderColumn.ShipEmailID:
            		return this.ShipEmailID.CompareTo(rhs.ShipEmailID);
            		
            		                 
            	
            	
            	case OrderColumn.BillingFirstName:
            		return this.BillingFirstName.CompareTo(rhs.BillingFirstName);
            		
            		                 
            	
            	
            	case OrderColumn.BillingLastName:
            		return this.BillingLastName.CompareTo(rhs.BillingLastName);
            		
            		                 
            	
            	
            	case OrderColumn.BillingCompanyName:
            		return this.BillingCompanyName.CompareTo(rhs.BillingCompanyName);
            		
            		                 
            	
            	
            	case OrderColumn.BillingStreet:
            		return this.BillingStreet.CompareTo(rhs.BillingStreet);
            		
            		                 
            	
            	
            	case OrderColumn.BillingStreet1:
            		return this.BillingStreet1.CompareTo(rhs.BillingStreet1);
            		
            		                 
            	
            	
            	case OrderColumn.BillingCity:
            		return this.BillingCity.CompareTo(rhs.BillingCity);
            		
            		                 
            	
            	
            	case OrderColumn.BillingStateCode:
            		return this.BillingStateCode.CompareTo(rhs.BillingStateCode);
            		
            		                 
            	
            	
            	case OrderColumn.BillingPostalCode:
            		return this.BillingPostalCode.CompareTo(rhs.BillingPostalCode);
            		
            		                 
            	
            	
            	case OrderColumn.BillingCountry:
            		return this.BillingCountry.CompareTo(rhs.BillingCountry);
            		
            		                 
            	
            	
            	case OrderColumn.BillingPhoneNumber:
            		return this.BillingPhoneNumber.CompareTo(rhs.BillingPhoneNumber);
            		
            		                 
            	
            	
            	case OrderColumn.BillingEmailId:
            		return this.BillingEmailId.CompareTo(rhs.BillingEmailId);
            		
            		                 
            	
            	
            	case OrderColumn.CardTransactionID:
            		return this.CardTransactionID.CompareTo(rhs.CardTransactionID);
            		
            		                 
            	
            	
            	case OrderColumn.CardTypeId:
            		return this.CardTypeId.Value.CompareTo(rhs.CardTypeId.Value);
            		
            		                 
            	
            	
            	case OrderColumn.CardEndsIn:
            		return this.CardEndsIn.CompareTo(rhs.CardEndsIn);
            		
            		                 
            	
            	
            	case OrderColumn.TaxCost:
            		return this.TaxCost.Value.CompareTo(rhs.TaxCost.Value);
            		
            		                 
            	
            	
            	case OrderColumn.ShippingCost:
            		return this.ShippingCost.Value.CompareTo(rhs.ShippingCost.Value);
            		
            		                 
            	
            	
            	case OrderColumn.SubTotal:
            		return this.SubTotal.Value.CompareTo(rhs.SubTotal.Value);
            		
            		                 
            	
            	
            	case OrderColumn.DiscountAmount:
            		return this.DiscountAmount.Value.CompareTo(rhs.DiscountAmount.Value);
            		
            		                 
            	
            	
            	case OrderColumn.Total:
            		return this.Total.Value.CompareTo(rhs.Total.Value);
            		
            		                 
            	
            	
            	case OrderColumn.CouponID:
            		return this.CouponID.Value.CompareTo(rhs.CouponID.Value);
            		
            		                 
            	
            	
            	case OrderColumn.OrderDate:
            		return this.OrderDate.Value.CompareTo(rhs.OrderDate.Value);
            		
            		                 
            	
            	
            	case OrderColumn.CreditCardNumber:
            		return this.CreditCardNumber.CompareTo(rhs.CreditCardNumber);
            		
            		                 
            	
            	
            	case OrderColumn.CreditCardExp:
            		return this.CreditCardExp.CompareTo(rhs.CreditCardExp);
            		
            		                 
            	
            	
            	case OrderColumn.CreditCardCVV:
            		return this.CreditCardCVV.CompareTo(rhs.CreditCardCVV);
            		
            		                 
            	
            	
            	case OrderColumn.Custom1:
            		return this.Custom1.CompareTo(rhs.Custom1);
            		
            		                 
            	
            	
            	case OrderColumn.Custom2:
            		return this.Custom2.CompareTo(rhs.Custom2);
            		
            		                 
            	
            	
            	case OrderColumn.AdditionalInstructions:
            		return this.AdditionalInstructions.CompareTo(rhs.AdditionalInstructions);
            		
            		                 
            	
            	
            	case OrderColumn.Custom3:
            		return this.Custom3.CompareTo(rhs.Custom3);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OrderKey> Members
		
		// member variable for the EntityId property
		private OrderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public OrderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OrderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Order" 
					+ this.OrderID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{46}{45}- OrderID: {0}{45}- PortalId: {1}{45}- AccountID: {2}{45}- OrderStateID: {3}{45}- ShippingID: {4}{45}- PaymentTypeId: {5}{45}- ShipFirstName: {6}{45}- ShipLastName: {7}{45}- ShipCompanyName: {8}{45}- ShipStreet: {9}{45}- ShipStreet1: {10}{45}- ShipCity: {11}{45}- ShipStateCode: {12}{45}- ShipPostalCode: {13}{45}- ShipCountry: {14}{45}- ShipPhoneNumber: {15}{45}- ShipEmailID: {16}{45}- BillingFirstName: {17}{45}- BillingLastName: {18}{45}- BillingCompanyName: {19}{45}- BillingStreet: {20}{45}- BillingStreet1: {21}{45}- BillingCity: {22}{45}- BillingStateCode: {23}{45}- BillingPostalCode: {24}{45}- BillingCountry: {25}{45}- BillingPhoneNumber: {26}{45}- BillingEmailId: {27}{45}- CardTransactionID: {28}{45}- CardTypeId: {29}{45}- CardEndsIn: {30}{45}- TaxCost: {31}{45}- ShippingCost: {32}{45}- SubTotal: {33}{45}- DiscountAmount: {34}{45}- Total: {35}{45}- CouponID: {36}{45}- OrderDate: {37}{45}- CreditCardNumber: {38}{45}- CreditCardExp: {39}{45}- CreditCardCVV: {40}{45}- Custom1: {41}{45}- Custom2: {42}{45}- AdditionalInstructions: {43}{45}- Custom3: {44}{45}", 
				this.OrderID,
				(this.PortalId == null) ? string.Empty : this.PortalId.ToString(),
				(this.AccountID == null) ? string.Empty : this.AccountID.ToString(),
				(this.OrderStateID == null) ? string.Empty : this.OrderStateID.ToString(),
				(this.ShippingID == null) ? string.Empty : this.ShippingID.ToString(),
				(this.PaymentTypeId == null) ? string.Empty : this.PaymentTypeId.ToString(),
				(this.ShipFirstName == null) ? string.Empty : this.ShipFirstName.ToString(),
				(this.ShipLastName == null) ? string.Empty : this.ShipLastName.ToString(),
				(this.ShipCompanyName == null) ? string.Empty : this.ShipCompanyName.ToString(),
				(this.ShipStreet == null) ? string.Empty : this.ShipStreet.ToString(),
				(this.ShipStreet1 == null) ? string.Empty : this.ShipStreet1.ToString(),
				(this.ShipCity == null) ? string.Empty : this.ShipCity.ToString(),
				(this.ShipStateCode == null) ? string.Empty : this.ShipStateCode.ToString(),
				(this.ShipPostalCode == null) ? string.Empty : this.ShipPostalCode.ToString(),
				(this.ShipCountry == null) ? string.Empty : this.ShipCountry.ToString(),
				(this.ShipPhoneNumber == null) ? string.Empty : this.ShipPhoneNumber.ToString(),
				(this.ShipEmailID == null) ? string.Empty : this.ShipEmailID.ToString(),
				(this.BillingFirstName == null) ? string.Empty : this.BillingFirstName.ToString(),
				(this.BillingLastName == null) ? string.Empty : this.BillingLastName.ToString(),
				(this.BillingCompanyName == null) ? string.Empty : this.BillingCompanyName.ToString(),
				(this.BillingStreet == null) ? string.Empty : this.BillingStreet.ToString(),
				(this.BillingStreet1 == null) ? string.Empty : this.BillingStreet1.ToString(),
				(this.BillingCity == null) ? string.Empty : this.BillingCity.ToString(),
				(this.BillingStateCode == null) ? string.Empty : this.BillingStateCode.ToString(),
				(this.BillingPostalCode == null) ? string.Empty : this.BillingPostalCode.ToString(),
				(this.BillingCountry == null) ? string.Empty : this.BillingCountry.ToString(),
				(this.BillingPhoneNumber == null) ? string.Empty : this.BillingPhoneNumber.ToString(),
				(this.BillingEmailId == null) ? string.Empty : this.BillingEmailId.ToString(),
				(this.CardTransactionID == null) ? string.Empty : this.CardTransactionID.ToString(),
				(this.CardTypeId == null) ? string.Empty : this.CardTypeId.ToString(),
				(this.CardEndsIn == null) ? string.Empty : this.CardEndsIn.ToString(),
				(this.TaxCost == null) ? string.Empty : this.TaxCost.ToString(),
				(this.ShippingCost == null) ? string.Empty : this.ShippingCost.ToString(),
				(this.SubTotal == null) ? string.Empty : this.SubTotal.ToString(),
				(this.DiscountAmount == null) ? string.Empty : this.DiscountAmount.ToString(),
				(this.Total == null) ? string.Empty : this.Total.ToString(),
				(this.CouponID == null) ? string.Empty : this.CouponID.ToString(),
				(this.OrderDate == null) ? string.Empty : this.OrderDate.ToString(),
				(this.CreditCardNumber == null) ? string.Empty : this.CreditCardNumber.ToString(),
				(this.CreditCardExp == null) ? string.Empty : this.CreditCardExp.ToString(),
				(this.CreditCardCVV == null) ? string.Empty : this.CreditCardCVV.ToString(),
				(this.Custom1 == null) ? string.Empty : this.Custom1.ToString(),
				(this.Custom2 == null) ? string.Empty : this.Custom2.ToString(),
				(this.AdditionalInstructions == null) ? string.Empty : this.AdditionalInstructions.ToString(),
				(this.Custom3 == null) ? string.Empty : this.Custom3.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeOrder' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class OrderEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// OrderID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeOrder"</remarks>
			public System.Int32 OrderID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PortalId : 
		/// </summary>
		public System.Int32?		  PortalId = (int)0;
		
		/// <summary>
		/// AccountID : 
		/// </summary>
		public System.Int32?		  AccountID = (int)0;
		
		/// <summary>
		/// OrderStateID : 
		/// </summary>
		public System.Int32?		  OrderStateID = (int)0;
		
		/// <summary>
		/// ShippingID : 
		/// </summary>
		public System.Int32?		  ShippingID = (int)0;
		
		/// <summary>
		/// PaymentTypeId : 
		/// </summary>
		public System.Int32?		  PaymentTypeId = (int)0;
		
		/// <summary>
		/// ShipFirstName : 
		/// </summary>
		public System.String		  ShipFirstName = string.Empty;
		
		/// <summary>
		/// ShipLastName : 
		/// </summary>
		public System.String		  ShipLastName = string.Empty;
		
		/// <summary>
		/// ShipCompanyName : 
		/// </summary>
		public System.String		  ShipCompanyName = string.Empty;
		
		/// <summary>
		/// ShipStreet : 
		/// </summary>
		public System.String		  ShipStreet = string.Empty;
		
		/// <summary>
		/// ShipStreet1 : 
		/// </summary>
		public System.String		  ShipStreet1 = string.Empty;
		
		/// <summary>
		/// ShipCity : 
		/// </summary>
		public System.String		  ShipCity = string.Empty;
		
		/// <summary>
		/// ShipStateCode : 
		/// </summary>
		public System.String		  ShipStateCode = string.Empty;
		
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		public System.String		  ShipPostalCode = string.Empty;
		
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		public System.String		  ShipCountry = string.Empty;
		
		/// <summary>
		/// ShipPhoneNumber : 
		/// </summary>
		public System.String		  ShipPhoneNumber = string.Empty;
		
		/// <summary>
		/// ShipEmailID : 
		/// </summary>
		public System.String		  ShipEmailID = string.Empty;
		
		/// <summary>
		/// BillingFirstName : 
		/// </summary>
		public System.String		  BillingFirstName = string.Empty;
		
		/// <summary>
		/// BillingLastName : 
		/// </summary>
		public System.String		  BillingLastName = string.Empty;
		
		/// <summary>
		/// BillingCompanyName : 
		/// </summary>
		public System.String		  BillingCompanyName = string.Empty;
		
		/// <summary>
		/// BillingStreet : 
		/// </summary>
		public System.String		  BillingStreet = string.Empty;
		
		/// <summary>
		/// BillingStreet1 : 
		/// </summary>
		public System.String		  BillingStreet1 = string.Empty;
		
		/// <summary>
		/// BillingCity : 
		/// </summary>
		public System.String		  BillingCity = string.Empty;
		
		/// <summary>
		/// BillingStateCode : 
		/// </summary>
		public System.String		  BillingStateCode = string.Empty;
		
		/// <summary>
		/// BillingPostalCode : 
		/// </summary>
		public System.String		  BillingPostalCode = string.Empty;
		
		/// <summary>
		/// BillingCountry : 
		/// </summary>
		public System.String		  BillingCountry = string.Empty;
		
		/// <summary>
		/// BillingPhoneNumber : 
		/// </summary>
		public System.String		  BillingPhoneNumber = string.Empty;
		
		/// <summary>
		/// BillingEmailId : 
		/// </summary>
		public System.String		  BillingEmailId = string.Empty;
		
		/// <summary>
		/// CardTransactionID : 
		/// </summary>
		public System.String		  CardTransactionID = string.Empty;
		
		/// <summary>
		/// CardTypeId : 
		/// </summary>
		public System.Int32?		  CardTypeId = (int)0;
		
		/// <summary>
		/// CardEndsIn : 
		/// </summary>
		public System.String		  CardEndsIn = string.Empty;
		
		/// <summary>
		/// TaxCost : 
		/// </summary>
		public System.Decimal?		  TaxCost = 0;
		
		/// <summary>
		/// ShippingCost : 
		/// </summary>
		public System.Decimal?		  ShippingCost = 0;
		
		/// <summary>
		/// SubTotal : 
		/// </summary>
		public System.Decimal?		  SubTotal = 0;
		
		/// <summary>
		/// DiscountAmount : 
		/// </summary>
		public System.Decimal?		  DiscountAmount = 0;
		
		/// <summary>
		/// Total : 
		/// </summary>
		public System.Decimal?		  Total = 0;
		
		/// <summary>
		/// CouponID : 
		/// </summary>
		public System.Int32?		  CouponID = (int)0;
		
		/// <summary>
		/// OrderDate : 
		/// </summary>
		public System.DateTime?		  OrderDate = DateTime.MinValue;
		
		/// <summary>
		/// CreditCardNumber : 
		/// </summary>
		public System.String		  CreditCardNumber = string.Empty;
		
		/// <summary>
		/// CreditCardExp : 
		/// </summary>
		public System.String		  CreditCardExp = string.Empty;
		
		/// <summary>
		/// CreditCardCVV : 
		/// </summary>
		public System.String		  CreditCardCVV = string.Empty;
		
		/// <summary>
		/// Custom1 : 
		/// </summary>
		public System.String		  Custom1 = string.Empty;
		
		/// <summary>
		/// Custom2 : 
		/// </summary>
		public System.String		  Custom2 = string.Empty;
		
		/// <summary>
		/// AdditionalInstructions : 
		/// </summary>
		public System.String		  AdditionalInstructions = string.Empty;
		
		/// <summary>
		/// Custom3 : 
		/// </summary>
		public System.String		  Custom3 = string.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			OrderEntityData _tmp = new OrderEntityData();
						
			_tmp.OrderID = this.OrderID;
			
			_tmp.PortalId = this.PortalId;
			_tmp.AccountID = this.AccountID;
			_tmp.OrderStateID = this.OrderStateID;
			_tmp.ShippingID = this.ShippingID;
			_tmp.PaymentTypeId = this.PaymentTypeId;
			_tmp.ShipFirstName = this.ShipFirstName;
			_tmp.ShipLastName = this.ShipLastName;
			_tmp.ShipCompanyName = this.ShipCompanyName;
			_tmp.ShipStreet = this.ShipStreet;
			_tmp.ShipStreet1 = this.ShipStreet1;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipStateCode = this.ShipStateCode;
			_tmp.ShipPostalCode = this.ShipPostalCode;
			_tmp.ShipCountry = this.ShipCountry;
			_tmp.ShipPhoneNumber = this.ShipPhoneNumber;
			_tmp.ShipEmailID = this.ShipEmailID;
			_tmp.BillingFirstName = this.BillingFirstName;
			_tmp.BillingLastName = this.BillingLastName;
			_tmp.BillingCompanyName = this.BillingCompanyName;
			_tmp.BillingStreet = this.BillingStreet;
			_tmp.BillingStreet1 = this.BillingStreet1;
			_tmp.BillingCity = this.BillingCity;
			_tmp.BillingStateCode = this.BillingStateCode;
			_tmp.BillingPostalCode = this.BillingPostalCode;
			_tmp.BillingCountry = this.BillingCountry;
			_tmp.BillingPhoneNumber = this.BillingPhoneNumber;
			_tmp.BillingEmailId = this.BillingEmailId;
			_tmp.CardTransactionID = this.CardTransactionID;
			_tmp.CardTypeId = this.CardTypeId;
			_tmp.CardEndsIn = this.CardEndsIn;
			_tmp.TaxCost = this.TaxCost;
			_tmp.ShippingCost = this.ShippingCost;
			_tmp.SubTotal = this.SubTotal;
			_tmp.DiscountAmount = this.DiscountAmount;
			_tmp.Total = this.Total;
			_tmp.CouponID = this.CouponID;
			_tmp.OrderDate = this.OrderDate;
			_tmp.CreditCardNumber = this.CreditCardNumber;
			_tmp.CreditCardExp = this.CreditCardExp;
			_tmp.CreditCardCVV = this.CreditCardCVV;
			_tmp.Custom1 = this.Custom1;
			_tmp.Custom2 = this.Custom2;
			_tmp.AdditionalInstructions = this.AdditionalInstructions;
			_tmp.Custom3 = this.Custom3;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region OrderLineItemCollection
		
		private TList<OrderLineItem> orderLineItemOrderID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation orderLineItemOrderID
		/// </summary>	
		public TList<OrderLineItem> OrderLineItemCollection
		{
			get
			{
				if (orderLineItemOrderID == null)
				{
				orderLineItemOrderID = new TList<OrderLineItem>();
				}
	
				return orderLineItemOrderID;
			}
			set { orderLineItemOrderID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipFirstName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipLastName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCompanyName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipStreet",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipStreet1",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCity",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipStateCode",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipPostalCode",10));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCountry",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipPhoneNumber",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipEmailID",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingFirstName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingLastName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingCompanyName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingStreet",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingStreet1",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingCity",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingStateCode",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingPostalCode",10));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingCountry",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingPhoneNumber",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingEmailId",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CardEndsIn",4));
		}
   		#endregion
	
	} // End Class
	
	#region OrderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OrderComparer : System.Collections.Generic.IComparer<Order>
	{
		OrderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OrderComparer"/> class.
        /// </summary>
		public OrderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OrderComparer(OrderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Order"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Order"/> to compare.</param>
        /// <param name="b">The second <c>Order</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Order a, Order b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Order entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Order a, Order b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OrderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OrderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Order"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OrderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OrderKey class.
		/// </summary>
		public OrderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OrderKey class.
		/// </summary>
		public OrderKey(OrderBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.orderID = entity.OrderID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OrderKey class.
		/// </summary>
		public OrderKey(System.Int32 orderID)
		{
			#region Init Properties

			this.orderID = orderID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OrderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OrderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderID property
		private System.Int32 orderID;
		
		/// <summary>
		/// Gets or sets the OrderID property.
		/// </summary>
		public System.Int32 OrderID
		{
			get { return orderID; }
			set
			{
				if ( Entity != null )
				{
					Entity.OrderID = value;
				}
				
				orderID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderID = ( values["OrderID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["OrderID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderID", OrderID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderID: {0}{1}",
								OrderID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OrderColumn Enum
	
	/// <summary>
	/// Enumerate the Order columns.
	/// </summary>
	[Serializable]
	public enum OrderColumn : int
	{
		/// <summary>
		/// OrderID : 
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		OrderID = 1,
		/// <summary>
		/// PortalId : 
		/// </summary>
		[EnumTextValue("PortalId")]
		[ColumnEnum("PortalId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PortalId = 2,
		/// <summary>
		/// AccountID : 
		/// </summary>
		[EnumTextValue("AccountID")]
		[ColumnEnum("AccountID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AccountID = 3,
		/// <summary>
		/// OrderStateID : 
		/// </summary>
		[EnumTextValue("OrderStateID")]
		[ColumnEnum("OrderStateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrderStateID = 4,
		/// <summary>
		/// ShippingID : 
		/// </summary>
		[EnumTextValue("ShippingID")]
		[ColumnEnum("ShippingID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ShippingID = 5,
		/// <summary>
		/// PaymentTypeId : 
		/// </summary>
		[EnumTextValue("PaymentTypeId")]
		[ColumnEnum("PaymentTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PaymentTypeId = 6,
		/// <summary>
		/// ShipFirstName : 
		/// </summary>
		[EnumTextValue("ShipFirstName")]
		[ColumnEnum("ShipFirstName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipFirstName = 7,
		/// <summary>
		/// ShipLastName : 
		/// </summary>
		[EnumTextValue("ShipLastName")]
		[ColumnEnum("ShipLastName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipLastName = 8,
		/// <summary>
		/// ShipCompanyName : 
		/// </summary>
		[EnumTextValue("ShipCompanyName")]
		[ColumnEnum("ShipCompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipCompanyName = 9,
		/// <summary>
		/// ShipStreet : 
		/// </summary>
		[EnumTextValue("ShipStreet")]
		[ColumnEnum("ShipStreet", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipStreet = 10,
		/// <summary>
		/// ShipStreet1 : 
		/// </summary>
		[EnumTextValue("ShipStreet1")]
		[ColumnEnum("ShipStreet1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipStreet1 = 11,
		/// <summary>
		/// ShipCity : 
		/// </summary>
		[EnumTextValue("ShipCity")]
		[ColumnEnum("ShipCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipCity = 12,
		/// <summary>
		/// ShipStateCode : 
		/// </summary>
		[EnumTextValue("ShipStateCode")]
		[ColumnEnum("ShipStateCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		ShipStateCode = 13,
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		[EnumTextValue("ShipPostalCode")]
		[ColumnEnum("ShipPostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		ShipPostalCode = 14,
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		[EnumTextValue("ShipCountry")]
		[ColumnEnum("ShipCountry", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		ShipCountry = 15,
		/// <summary>
		/// ShipPhoneNumber : 
		/// </summary>
		[EnumTextValue("ShipPhoneNumber")]
		[ColumnEnum("ShipPhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipPhoneNumber = 16,
		/// <summary>
		/// ShipEmailID : 
		/// </summary>
		[EnumTextValue("ShipEmailID")]
		[ColumnEnum("ShipEmailID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		ShipEmailID = 17,
		/// <summary>
		/// BillingFirstName : 
		/// </summary>
		[EnumTextValue("BillingFirstName")]
		[ColumnEnum("BillingFirstName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingFirstName = 18,
		/// <summary>
		/// BillingLastName : 
		/// </summary>
		[EnumTextValue("BillingLastName")]
		[ColumnEnum("BillingLastName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingLastName = 19,
		/// <summary>
		/// BillingCompanyName : 
		/// </summary>
		[EnumTextValue("BillingCompanyName")]
		[ColumnEnum("BillingCompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingCompanyName = 20,
		/// <summary>
		/// BillingStreet : 
		/// </summary>
		[EnumTextValue("BillingStreet")]
		[ColumnEnum("BillingStreet", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingStreet = 21,
		/// <summary>
		/// BillingStreet1 : 
		/// </summary>
		[EnumTextValue("BillingStreet1")]
		[ColumnEnum("BillingStreet1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingStreet1 = 22,
		/// <summary>
		/// BillingCity : 
		/// </summary>
		[EnumTextValue("BillingCity")]
		[ColumnEnum("BillingCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingCity = 23,
		/// <summary>
		/// BillingStateCode : 
		/// </summary>
		[EnumTextValue("BillingStateCode")]
		[ColumnEnum("BillingStateCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		BillingStateCode = 24,
		/// <summary>
		/// BillingPostalCode : 
		/// </summary>
		[EnumTextValue("BillingPostalCode")]
		[ColumnEnum("BillingPostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		BillingPostalCode = 25,
		/// <summary>
		/// BillingCountry : 
		/// </summary>
		[EnumTextValue("BillingCountry")]
		[ColumnEnum("BillingCountry", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		BillingCountry = 26,
		/// <summary>
		/// BillingPhoneNumber : 
		/// </summary>
		[EnumTextValue("BillingPhoneNumber")]
		[ColumnEnum("BillingPhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingPhoneNumber = 27,
		/// <summary>
		/// BillingEmailId : 
		/// </summary>
		[EnumTextValue("BillingEmailId")]
		[ColumnEnum("BillingEmailId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		BillingEmailId = 28,
		/// <summary>
		/// CardTransactionID : 
		/// </summary>
		[EnumTextValue("CardTransactionID")]
		[ColumnEnum("CardTransactionID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		CardTransactionID = 29,
		/// <summary>
		/// CardTypeId : 
		/// </summary>
		[EnumTextValue("CardTypeId")]
		[ColumnEnum("CardTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CardTypeId = 30,
		/// <summary>
		/// CardEndsIn : 
		/// </summary>
		[EnumTextValue("CardEndsIn")]
		[ColumnEnum("CardEndsIn", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 4)]
		CardEndsIn = 31,
		/// <summary>
		/// TaxCost : 
		/// </summary>
		[EnumTextValue("TaxCost")]
		[ColumnEnum("TaxCost", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		TaxCost = 32,
		/// <summary>
		/// ShippingCost : 
		/// </summary>
		[EnumTextValue("ShippingCost")]
		[ColumnEnum("ShippingCost", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		ShippingCost = 33,
		/// <summary>
		/// SubTotal : 
		/// </summary>
		[EnumTextValue("SubTotal")]
		[ColumnEnum("SubTotal", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		SubTotal = 34,
		/// <summary>
		/// DiscountAmount : 
		/// </summary>
		[EnumTextValue("DiscountAmount")]
		[ColumnEnum("DiscountAmount", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		DiscountAmount = 35,
		/// <summary>
		/// Total : 
		/// </summary>
		[EnumTextValue("Total")]
		[ColumnEnum("Total", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		Total = 36,
		/// <summary>
		/// CouponID : 
		/// </summary>
		[EnumTextValue("CouponID")]
		[ColumnEnum("CouponID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CouponID = 37,
		/// <summary>
		/// OrderDate : 
		/// </summary>
		[EnumTextValue("OrderDate")]
		[ColumnEnum("OrderDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OrderDate = 38,
		/// <summary>
		/// CreditCardNumber : 
		/// </summary>
		[EnumTextValue("CreditCardNumber")]
		[ColumnEnum("CreditCardNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		CreditCardNumber = 39,
		/// <summary>
		/// CreditCardExp : 
		/// </summary>
		[EnumTextValue("CreditCardExp")]
		[ColumnEnum("CreditCardExp", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		CreditCardExp = 40,
		/// <summary>
		/// CreditCardCVV : 
		/// </summary>
		[EnumTextValue("CreditCardCVV")]
		[ColumnEnum("CreditCardCVV", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		CreditCardCVV = 41,
		/// <summary>
		/// Custom1 : 
		/// </summary>
		[EnumTextValue("Custom1")]
		[ColumnEnum("Custom1", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom1 = 42,
		/// <summary>
		/// Custom2 : 
		/// </summary>
		[EnumTextValue("Custom2")]
		[ColumnEnum("Custom2", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom2 = 43,
		/// <summary>
		/// AdditionalInstructions : 
		/// </summary>
		[EnumTextValue("AdditionalInstructions")]
		[ColumnEnum("AdditionalInstructions", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AdditionalInstructions = 44,
		/// <summary>
		/// Custom3 : 
		/// </summary>
		[EnumTextValue("Custom3")]
		[ColumnEnum("Custom3", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom3 = 45
	}//End enum

	#endregion OrderColumn Enum

} // end namespace
