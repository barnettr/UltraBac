	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file AddOn.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region AddOnEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AddOn"/> object.
	/// </remarks>
	public class AddOnEventArgs : System.EventArgs
	{
		private AddOnColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the AddOnEventArgs class.
		///</summary>
		public AddOnEventArgs(AddOnColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AddOnEventArgs class.
		///</summary>
		public AddOnEventArgs(AddOnColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The AddOnColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AddOnColumn" />
		public AddOnColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all AddOn related events.
	///</summary>
	public delegate void AddOnEventHandler(object sender, AddOnEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeAddOn' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(AddOn))]
	public abstract partial class AddOnBase : EntityBase, IEntityId<AddOnKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private AddOnEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//AddOnEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private AddOnEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<AddOn> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AddOnEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AddOnEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AddOnBase"/> instance.
		///</summary>
		public AddOnBase()
		{
			this.entityData = new AddOnEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AddOnBase"/> instance.
		///</summary>
		///<param name="addOnProductID"></param>
		///<param name="addOnTitle"></param>
		///<param name="addOnName"></param>
		///<param name="addOnDescription"></param>
		///<param name="addOnDisplayOrder"></param>
		///<param name="addOnDisplayType"></param>
		///<param name="addOnOptionalInd"></param>
		///<param name="addOnAllowBackOrder"></param>
		///<param name="addOnInStockMsg"></param>
		///<param name="addOnOutOfStockMsg"></param>
		///<param name="addOnBackOrderMsg"></param>
		///<param name="addOnPromptMsg"></param>
		///<param name="addOnTrackInventoryInd"></param>
		public AddOnBase(System.Int32 addOnProductID, System.String addOnTitle, System.String addOnName, 
			System.String addOnDescription, System.Int32 addOnDisplayOrder, System.String addOnDisplayType, System.Boolean addOnOptionalInd, 
			System.Boolean addOnAllowBackOrder, System.String addOnInStockMsg, System.String addOnOutOfStockMsg, System.String addOnBackOrderMsg, 
			System.String addOnPromptMsg, System.Boolean addOnTrackInventoryInd)
		{
			this.entityData = new AddOnEntityData();
			this.backupData = null;

			this.ProductID = addOnProductID;
			this.Title = addOnTitle;
			this.Name = addOnName;
			this.Description = addOnDescription;
			this.DisplayOrder = addOnDisplayOrder;
			this.DisplayType = addOnDisplayType;
			this.OptionalInd = addOnOptionalInd;
			this.AllowBackOrder = addOnAllowBackOrder;
			this.InStockMsg = addOnInStockMsg;
			this.OutOfStockMsg = addOnOutOfStockMsg;
			this.BackOrderMsg = addOnBackOrderMsg;
			this.PromptMsg = addOnPromptMsg;
			this.TrackInventoryInd = addOnTrackInventoryInd;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AddOn"/> instance.
		///</summary>
		///<param name="addOnProductID"></param>
		///<param name="addOnTitle"></param>
		///<param name="addOnName"></param>
		///<param name="addOnDescription"></param>
		///<param name="addOnDisplayOrder"></param>
		///<param name="addOnDisplayType"></param>
		///<param name="addOnOptionalInd"></param>
		///<param name="addOnAllowBackOrder"></param>
		///<param name="addOnInStockMsg"></param>
		///<param name="addOnOutOfStockMsg"></param>
		///<param name="addOnBackOrderMsg"></param>
		///<param name="addOnPromptMsg"></param>
		///<param name="addOnTrackInventoryInd"></param>
		public static AddOn CreateAddOn(System.Int32 addOnProductID, System.String addOnTitle, System.String addOnName, 
			System.String addOnDescription, System.Int32 addOnDisplayOrder, System.String addOnDisplayType, System.Boolean addOnOptionalInd, 
			System.Boolean addOnAllowBackOrder, System.String addOnInStockMsg, System.String addOnOutOfStockMsg, System.String addOnBackOrderMsg, 
			System.String addOnPromptMsg, System.Boolean addOnTrackInventoryInd)
		{
			AddOn newAddOn = new AddOn();
			newAddOn.ProductID = addOnProductID;
			newAddOn.Title = addOnTitle;
			newAddOn.Name = addOnName;
			newAddOn.Description = addOnDescription;
			newAddOn.DisplayOrder = addOnDisplayOrder;
			newAddOn.DisplayType = addOnDisplayType;
			newAddOn.OptionalInd = addOnOptionalInd;
			newAddOn.AllowBackOrder = addOnAllowBackOrder;
			newAddOn.InStockMsg = addOnInStockMsg;
			newAddOn.OutOfStockMsg = addOnOutOfStockMsg;
			newAddOn.BackOrderMsg = addOnBackOrderMsg;
			newAddOn.PromptMsg = addOnPromptMsg;
			newAddOn.TrackInventoryInd = addOnTrackInventoryInd;
			return newAddOn;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AddOnColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AddOnColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AddOnColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AddOnEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AddOnEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AddOnColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AddOnColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AddOnEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AddOnEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the AddOnID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AddOnID
		{
			get
			{
				return this.entityData.AddOnID; 
			}
			
			set
			{
				if (this.entityData.AddOnID == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.AddOnID, this.entityData.AddOnID);
				this.entityData.AddOnID = value;
				this.EntityId.AddOnID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.AddOnID, this.entityData.AddOnID);
				OnPropertyChanged("AddOnID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductID
		{
			get
			{
				return this.entityData.ProductID; 
			}
			
			set
			{
				if (this.entityData.ProductID == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.ProductID, this.entityData.ProductID);
				this.entityData.ProductID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.ProductID, this.entityData.ProductID);
				OnPropertyChanged("ProductID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DisplayType
		{
			get
			{
				return this.entityData.DisplayType; 
			}
			
			set
			{
				if (this.entityData.DisplayType == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.DisplayType, this.entityData.DisplayType);
				this.entityData.DisplayType = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.DisplayType, this.entityData.DisplayType);
				OnPropertyChanged("DisplayType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OptionalInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OptionalInd
		{
			get
			{
				return this.entityData.OptionalInd; 
			}
			
			set
			{
				if (this.entityData.OptionalInd == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.OptionalInd, this.entityData.OptionalInd);
				this.entityData.OptionalInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.OptionalInd, this.entityData.OptionalInd);
				OnPropertyChanged("OptionalInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllowBackOrder property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean AllowBackOrder
		{
			get
			{
				return this.entityData.AllowBackOrder; 
			}
			
			set
			{
				if (this.entityData.AllowBackOrder == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.AllowBackOrder, this.entityData.AllowBackOrder);
				this.entityData.AllowBackOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.AllowBackOrder, this.entityData.AllowBackOrder);
				OnPropertyChanged("AllowBackOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InStockMsg property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String InStockMsg
		{
			get
			{
				return this.entityData.InStockMsg; 
			}
			
			set
			{
				if (this.entityData.InStockMsg == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.InStockMsg, this.entityData.InStockMsg);
				this.entityData.InStockMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.InStockMsg, this.entityData.InStockMsg);
				OnPropertyChanged("InStockMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutOfStockMsg property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String OutOfStockMsg
		{
			get
			{
				return this.entityData.OutOfStockMsg; 
			}
			
			set
			{
				if (this.entityData.OutOfStockMsg == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.OutOfStockMsg, this.entityData.OutOfStockMsg);
				this.entityData.OutOfStockMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.OutOfStockMsg, this.entityData.OutOfStockMsg);
				OnPropertyChanged("OutOfStockMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BackOrderMsg property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String BackOrderMsg
		{
			get
			{
				return this.entityData.BackOrderMsg; 
			}
			
			set
			{
				if (this.entityData.BackOrderMsg == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.BackOrderMsg, this.entityData.BackOrderMsg);
				this.entityData.BackOrderMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.BackOrderMsg, this.entityData.BackOrderMsg);
				OnPropertyChanged("BackOrderMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PromptMsg property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String PromptMsg
		{
			get
			{
				return this.entityData.PromptMsg; 
			}
			
			set
			{
				if (this.entityData.PromptMsg == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.PromptMsg, this.entityData.PromptMsg);
				this.entityData.PromptMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.PromptMsg, this.entityData.PromptMsg);
				OnPropertyChanged("PromptMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrackInventoryInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean TrackInventoryInd
		{
			get
			{
				return this.entityData.TrackInventoryInd; 
			}
			
			set
			{
				if (this.entityData.TrackInventoryInd == value)
					return;
					
					
				OnColumnChanging(AddOnColumn.TrackInventoryInd, this.entityData.TrackInventoryInd);
				this.entityData.TrackInventoryInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AddOnColumn.TrackInventoryInd, this.entityData.TrackInventoryInd);
				OnPropertyChanged("TrackInventoryInd");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeAddOn"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AddOnID", "ProductID", "Title", "Name", "Description", "DisplayOrder", "DisplayType", "OptionalInd", "AllowBackOrder", "InStockMsg", "OutOfStockMsg", "BackOrderMsg", "PromptMsg", "TrackInventoryInd"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of AddOnValue objects
		///	which are related to this object through the relation FK_ZNodeProductAddOnValue_ZNodeProductAddOn
		/// </summary>	
		[BindableAttribute()]
		public TList<AddOnValue> AddOnValueCollection
		{
			get { return entityData.AddOnValueCollection; }
			set { entityData.AddOnValueCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductAddOn objects
		///	which are related to this object through the relation FK_ZNodeProductAddOn_ZNodeAddOn
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductAddOn> ProductAddOnCollection
		{
			get { return entityData.ProductAddOnCollection; }
			set { entityData.ProductAddOnCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AddOnEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AddOn) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AddOn>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AddOn);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AddOn Entity 
		///</summary>
		public virtual AddOn Copy()
		{
			//shallow copy entity
			AddOn copy = new AddOn();
			copy.AddOnID = this.AddOnID;
			copy.ProductID = this.ProductID;
			copy.Title = this.Title;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.DisplayOrder = this.DisplayOrder;
			copy.DisplayType = this.DisplayType;
			copy.OptionalInd = this.OptionalInd;
			copy.AllowBackOrder = this.AllowBackOrder;
			copy.InStockMsg = this.InStockMsg;
			copy.OutOfStockMsg = this.OutOfStockMsg;
			copy.BackOrderMsg = this.BackOrderMsg;
			copy.PromptMsg = this.PromptMsg;
			copy.TrackInventoryInd = this.TrackInventoryInd;
					
			copy.AcceptChanges();
			return (AddOn)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AddOn Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AddOn DeepCopy()
		{
			return EntityHelper.Clone<AddOn>(this as AddOn);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AddOnBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AddOnBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AddOnBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AddOnBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AddOnBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AddOnBase Object1, AddOnBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AddOnID != Object2.AddOnID)
				equal = false;
			if (Object1.ProductID != Object2.ProductID)
				equal = false;
			if (Object1.Title != Object2.Title)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.Description != Object2.Description)
				equal = false;
			if (Object1.DisplayOrder != Object2.DisplayOrder)
				equal = false;
			if (Object1.DisplayType != Object2.DisplayType)
				equal = false;
			if (Object1.OptionalInd != Object2.OptionalInd)
				equal = false;
			if (Object1.AllowBackOrder != Object2.AllowBackOrder)
				equal = false;
			if (Object1.InStockMsg != Object2.InStockMsg)
				equal = false;
			if (Object1.OutOfStockMsg != Object2.OutOfStockMsg)
				equal = false;
			if (Object1.BackOrderMsg != Object2.BackOrderMsg)
				equal = false;
			if (Object1.PromptMsg != Object2.PromptMsg)
				equal = false;
			if (Object1.TrackInventoryInd != Object2.TrackInventoryInd)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((AddOnBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static AddOnComparer GetComparer()
        {
            return new AddOnComparer();
        }
        */

        // Comparer delegates back to AddOn
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AddOn rhs, AddOnColumn which)
        {
            switch (which)
            {
            	
            	
            	case AddOnColumn.AddOnID:
            		return this.AddOnID.CompareTo(rhs.AddOnID);
            		
            		                 
            	
            	
            	case AddOnColumn.ProductID:
            		return this.ProductID.CompareTo(rhs.ProductID);
            		
            		                 
            	
            	
            	case AddOnColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case AddOnColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case AddOnColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case AddOnColumn.DisplayOrder:
            		return this.DisplayOrder.CompareTo(rhs.DisplayOrder);
            		
            		                 
            	
            	
            	case AddOnColumn.DisplayType:
            		return this.DisplayType.CompareTo(rhs.DisplayType);
            		
            		                 
            	
            	
            	case AddOnColumn.OptionalInd:
            		return this.OptionalInd.CompareTo(rhs.OptionalInd);
            		
            		                 
            	
            	
            	case AddOnColumn.AllowBackOrder:
            		return this.AllowBackOrder.CompareTo(rhs.AllowBackOrder);
            		
            		                 
            	
            	
            	case AddOnColumn.InStockMsg:
            		return this.InStockMsg.CompareTo(rhs.InStockMsg);
            		
            		                 
            	
            	
            	case AddOnColumn.OutOfStockMsg:
            		return this.OutOfStockMsg.CompareTo(rhs.OutOfStockMsg);
            		
            		                 
            	
            	
            	case AddOnColumn.BackOrderMsg:
            		return this.BackOrderMsg.CompareTo(rhs.BackOrderMsg);
            		
            		                 
            	
            	
            	case AddOnColumn.PromptMsg:
            		return this.PromptMsg.CompareTo(rhs.PromptMsg);
            		
            		                 
            	
            	
            	case AddOnColumn.TrackInventoryInd:
            		return this.TrackInventoryInd.CompareTo(rhs.TrackInventoryInd);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AddOnKey> Members
		
		// member variable for the EntityId property
		private AddOnKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public AddOnKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AddOnKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"AddOn" 
					+ this.AddOnID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- AddOnID: {0}{14}- ProductID: {1}{14}- Title: {2}{14}- Name: {3}{14}- Description: {4}{14}- DisplayOrder: {5}{14}- DisplayType: {6}{14}- OptionalInd: {7}{14}- AllowBackOrder: {8}{14}- InStockMsg: {9}{14}- OutOfStockMsg: {10}{14}- BackOrderMsg: {11}{14}- PromptMsg: {12}{14}- TrackInventoryInd: {13}{14}", 
				this.AddOnID,
				this.ProductID,
				this.Title,
				this.Name,
				this.Description,
				this.DisplayOrder,
				this.DisplayType,
				this.OptionalInd,
				this.AllowBackOrder,
				this.InStockMsg,
				this.OutOfStockMsg,
				this.BackOrderMsg,
				this.PromptMsg,
				this.TrackInventoryInd,
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeAddOn' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class AddOnEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// AddOnID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeAddOn"</remarks>
			public System.Int32 AddOnID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ProductID : 
		/// </summary>
		public System.Int32		  ProductID = (int)0;
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String		  Title = string.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32		  DisplayOrder = (int)0;
		
		/// <summary>
		/// DisplayType : 
		/// </summary>
		public System.String		  DisplayType = string.Empty;
		
		/// <summary>
		/// OptionalInd : 
		/// </summary>
		public System.Boolean		  OptionalInd = false;
		
		/// <summary>
		/// AllowBackOrder : 
		/// </summary>
		public System.Boolean		  AllowBackOrder = false;
		
		/// <summary>
		/// InStockMsg : 
		/// </summary>
		public System.String		  InStockMsg = string.Empty;
		
		/// <summary>
		/// OutOfStockMsg : 
		/// </summary>
		public System.String		  OutOfStockMsg = string.Empty;
		
		/// <summary>
		/// BackOrderMsg : 
		/// </summary>
		public System.String		  BackOrderMsg = string.Empty;
		
		/// <summary>
		/// PromptMsg : 
		/// </summary>
		public System.String		  PromptMsg = string.Empty;
		
		/// <summary>
		/// TrackInventoryInd : 
		/// </summary>
		public System.Boolean		  TrackInventoryInd = false;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			AddOnEntityData _tmp = new AddOnEntityData();
						
			_tmp.AddOnID = this.AddOnID;
			
			_tmp.ProductID = this.ProductID;
			_tmp.Title = this.Title;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.DisplayType = this.DisplayType;
			_tmp.OptionalInd = this.OptionalInd;
			_tmp.AllowBackOrder = this.AllowBackOrder;
			_tmp.InStockMsg = this.InStockMsg;
			_tmp.OutOfStockMsg = this.OutOfStockMsg;
			_tmp.BackOrderMsg = this.BackOrderMsg;
			_tmp.PromptMsg = this.PromptMsg;
			_tmp.TrackInventoryInd = this.TrackInventoryInd;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region AddOnValueCollection
		
		private TList<AddOnValue> addOnValueAddOnID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation addOnValueAddOnID
		/// </summary>	
		public TList<AddOnValue> AddOnValueCollection
		{
			get
			{
				if (addOnValueAddOnID == null)
				{
				addOnValueAddOnID = new TList<AddOnValue>();
				}
	
				return addOnValueAddOnID;
			}
			set { addOnValueAddOnID = value; }
		}
		
		#endregion

		#region ProductAddOnCollection
		
		private TList<ProductAddOn> productAddOnAddOnID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productAddOnAddOnID
		/// </summary>	
		public TList<ProductAddOn> ProductAddOnCollection
		{
			get
			{
				if (productAddOnAddOnID == null)
				{
				productAddOnAddOnID = new TList<ProductAddOn>();
				}
	
				return productAddOnAddOnID;
			}
			set { productAddOnAddOnID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Title");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Description");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"DisplayType");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("DisplayType",50));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"InStockMsg");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"OutOfStockMsg");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"BackOrderMsg");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"PromptMsg");
		}
   		#endregion
	
	} // End Class
	
	#region AddOnComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AddOnComparer : System.Collections.Generic.IComparer<AddOn>
	{
		AddOnColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AddOnComparer"/> class.
        /// </summary>
		public AddOnComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AddOnComparer(AddOnColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AddOn"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AddOn"/> to compare.</param>
        /// <param name="b">The second <c>AddOn</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AddOn a, AddOn b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AddOn entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AddOn a, AddOn b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AddOnColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AddOnKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AddOn"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AddOnKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AddOnKey class.
		/// </summary>
		public AddOnKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AddOnKey class.
		/// </summary>
		public AddOnKey(AddOnBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.addOnID = entity.AddOnID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AddOnKey class.
		/// </summary>
		public AddOnKey(System.Int32 addOnID)
		{
			#region Init Properties

			this.addOnID = addOnID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AddOnBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AddOnBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AddOnID property
		private System.Int32 addOnID;
		
		/// <summary>
		/// Gets or sets the AddOnID property.
		/// </summary>
		public System.Int32 AddOnID
		{
			get { return addOnID; }
			set
			{
				if ( Entity != null )
				{
					Entity.AddOnID = value;
				}
				
				addOnID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AddOnID = ( values["AddOnID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AddOnID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AddOnID", AddOnID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AddOnID: {0}{1}",
								AddOnID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AddOnColumn Enum
	
	/// <summary>
	/// Enumerate the AddOn columns.
	/// </summary>
	[Serializable]
	public enum AddOnColumn : int
	{
		/// <summary>
		/// AddOnID : 
		/// </summary>
		[EnumTextValue("AddOnID")]
		[ColumnEnum("AddOnID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AddOnID = 1,
		/// <summary>
		/// ProductID : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductID = 2,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Title = 3,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Name = 4,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, false)]
		Description = 5,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DisplayOrder = 6,
		/// <summary>
		/// DisplayType : 
		/// </summary>
		[EnumTextValue("DisplayType")]
		[ColumnEnum("DisplayType", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DisplayType = 7,
		/// <summary>
		/// OptionalInd : 
		/// </summary>
		[EnumTextValue("OptionalInd")]
		[ColumnEnum("OptionalInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OptionalInd = 8,
		/// <summary>
		/// AllowBackOrder : 
		/// </summary>
		[EnumTextValue("AllowBackOrder")]
		[ColumnEnum("AllowBackOrder", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		AllowBackOrder = 9,
		/// <summary>
		/// InStockMsg : 
		/// </summary>
		[EnumTextValue("InStockMsg")]
		[ColumnEnum("InStockMsg", typeof(System.String), System.Data.DbType.String, false, false, false)]
		InStockMsg = 10,
		/// <summary>
		/// OutOfStockMsg : 
		/// </summary>
		[EnumTextValue("OutOfStockMsg")]
		[ColumnEnum("OutOfStockMsg", typeof(System.String), System.Data.DbType.String, false, false, false)]
		OutOfStockMsg = 11,
		/// <summary>
		/// BackOrderMsg : 
		/// </summary>
		[EnumTextValue("BackOrderMsg")]
		[ColumnEnum("BackOrderMsg", typeof(System.String), System.Data.DbType.String, false, false, false)]
		BackOrderMsg = 12,
		/// <summary>
		/// PromptMsg : 
		/// </summary>
		[EnumTextValue("PromptMsg")]
		[ColumnEnum("PromptMsg", typeof(System.String), System.Data.DbType.String, false, false, false)]
		PromptMsg = 13,
		/// <summary>
		/// TrackInventoryInd : 
		/// </summary>
		[EnumTextValue("TrackInventoryInd")]
		[ColumnEnum("TrackInventoryInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		TrackInventoryInd = 14
	}//End enum

	#endregion AddOnColumn Enum

} // end namespace
