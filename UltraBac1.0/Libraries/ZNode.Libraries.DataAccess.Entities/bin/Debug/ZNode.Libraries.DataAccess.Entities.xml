<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZNode.Libraries.DataAccess.Entities</name>
    </assembly>
    <members>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase">
            <summary>
            Provides the core entity factory behavior.  Will create a type based on a string
            or a type and will try to auto discover which assembly this type lives in, even if it's
            not a local referenced assembly.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.IEntityFactory">
            <summary>
            Exposes a factory to create an entity based on a typeString and a default type.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.IEntityFactory.CreateEntity(System.String,System.Type)">
            <summary>
            Create an entity based on a string.  
            It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString">string of entity to discover and create</param>
            <param name="defaultType">if string is not found defaultType will be created.</param>
            <returns>Created IEntity object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.IEntityFactory.CreateViewEntity(System.String,System.Type)">
            <summary>
            Create a readonly entity based on a string for views.  
            It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString">string of entity to discover and create</param>
            <param name="defaultType">if string is not found defaultType will be created.</param>
            <returns>Created IEntity object</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntityFactory.CurrentEntityAssembly">
            <summary>
            Gets the current assembly responsible for entity creation.
            </summary>
            <value>The current assembly.</value>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.currentAssembly">
            <summary>
            The current assembly from which to attempt to create entities from.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.defaultCreationalNamespace">
            <summary>
            This will create entities by default if not found in the current assembly
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.internalTypeCache">
            <summary>
            This provides a cache of already discovered types, so that there is minimal performance hit after first lookup.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.syncRoot">
            <summary>
            A synchronization object
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.currentEntityAssemblyNamespace">
            <summary>
            This is the namespace for the currentAssembly property
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CreateEntity(System.String,System.Type)">
            <summary>
            Create an entity based on a string.
            It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString">string of entity to discover and create</param>
            <param name="defaultType">if string is not found defaultType will be created.</param>
            <returns>Created IEntity object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CreateViewEntity(System.String,System.Type)">
            <summary>
            Create a view entity based on a string.
            It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString">string of entity to discover and create</param>
            <param name="defaultType">if string is not found defaultType will be created.</param>
            <returns>Created object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.Create(System.String)">
            <summary>
            Create an entity based on a string.  It will autodiscover the type based on
            based on any information we can gather.
            </summary>
            <param name="typeString">string of entity to discover and create</param>
            <returns>created IEntity object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.Create``1">
            <summary>
            Create an entity of generic type T
            </summary>
            <returns>T</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.Create(System.String,System.Type)">
            <summary>
            Create an entity based on a string.  It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString"></param>
            <param name="defaultType"></param>
            <returns>IEntity</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.Create(System.Type)">
            <summary>
            Creates an <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object and begins tracking on the object.
            </summary>
            <param name="type">known type to create</param>
            <returns>created IEntity object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CreateReadOnlyEntity(System.String,System.Type)">
            <summary>
            Create an entity based on a string from a view.  It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString"></param>
            <param name="defaultType"></param>
            <returns>Object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CreateReadOnlyEntity(System.Type)">
            <summary>
            Creates an view object.
            </summary>
            <param name="type">known type to create</param>
            <returns>created view ReadOnlyEntity entity object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CoreCreate(System.String,System.Type)">
            <summary>
            Create an entity based on a string.  It will autodiscover the type based on any information we can gather.
            </summary>
            <param name="typeString"></param>
            <param name="defaultType"></param>
            <returns>object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CoreCreate(System.Type)">
            <summary>
            Creates an object and begins .
            </summary>
            <param name="type">known type to create</param>
            <returns>created object</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.ResolveType(System.String)">
            <summary>
            Resolves a type based on a string.  It will attempt to Auto-Discover the type, 
            based on it's fullname or partial names.
            </summary>
            <param name="typeString">the string of the type to resolve</param>
            <returns>IEntity</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.ResolveType(System.String,System.String)">
            <summary>
            Resolves a type based on a string.  It will attempt to Auto-Discover the type, 
            based on it's fullname or partial names.
            </summary>
            <param name="typeString">the string of the type to resolve</param>
            <param name="defaultNamespace">the string of the type to resolve</param>
            <returns>IEntity</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.GetClassNameFromString(System.String)">
            <summary>
            Parses a string and gets the class name from a qualified name, based on [Type, Assembly]
            </summary>
            <param name="typeString"></param>
            <example>
                MyNamespace.MyType, MyNamespace
            </example>
            <returns>string of the qualified classname</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.GetAssemblyNameFromString(System.String)">
            <summary>
            Parses a string and gets the class name from a qualified name, based on [Type, Assembly]
            </summary>
            <param name="typeString"></param>
            <example>
                MyNamespace.MyType, MyNamespace
            </example>
            <returns>string of the qualified Assembly Name</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.FlushTypeCache">
            <summary>
            Flushes the Internal Type Cache
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.OnEntityCreating(System.Type)">
            <summary>
            Used to fire the event just before an entity is creating.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.OnEntityCreated(ZNode.Libraries.DataAccess.Entities.IEntity,System.Type)">
            <summary>
            Used to fire the an event when the entity has just been created.
            </summary>
            <param name="entity">The entity.</param>
            <param name="type">The type.</param>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityCreating">
            <summary>
            Exposes an Event which fires when an Entity is about to be created.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityCreated">
            <summary>
            Exposes an Event which fires when an Entity has been created.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CurrentEntityAssembly">
            <summary>
            Gets the current assembly.
            </summary>
            <value>The current assembly.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.CurrentEntityAssemblyNamespace">
            <summary>
            Gets the current entity assembly namespace to discover types from.
            </summary>
            <value>The current assembly.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityCreatingEventHandler">
            <summary>
            A delegate to handle <see cref="E:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityCreating"/> events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityCreatedEventHandler">
            <summary>
            A delegate to handle <see cref="E:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityCreated"/> events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityEventArgs">
            <summary>
            Used to suppliment information for the EntityCreating and EntityCreated events.
            </summary>
            <remarks>
            The EntityCreating and EntityCreated events occur when an Entity is about to be created,
            or just after an Entity is created.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.IEntity,System.Type)">
            <summary>
            Initalizes a new Instance of the ComponentEntityEventArgs class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityEventArgs.Entity">
            <summary>
            The entity that is about to be created or has just been created.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityFactoryBase.EntityEventArgs.CreationalType">
            <summary>
            Gets the type of the entity to be created.
            </summary>
            <value>The type of the creational.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ListBase`1">
            <summary>
            A abstract generic base class for the nettiers entities that are generated from tables and views. 
            Supports filtering, databinding, searching and sorting.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TList{T}"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.InitializeList">
            <summary>
            Initialize any member variables when the list is created
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Searches for the index of the item that has the specified property descriptor with the specified value.
            </summary>
            <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search for.</param>
            <param name="key">The value of <i>property</i> to match.</param>
            <returns>The zero-based index of the item that matches the property descriptor and contains the specified value. </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object,System.Boolean)">
            <summary>
            Searches for the index of the item that has the specified property descriptor with the specified value.
            </summary>
            <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search for.</param>
            <param name="key">The value of <i>property</i> to match.</param>
            <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
            <returns>The zero-based index of the item that matches the property descriptor and contains the specified value. </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object,System.Int32,System.Boolean)">
            <summary>
            Searches for the index of the item that has the specified property descriptor with the specified value.
            </summary>
            <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"> to search for.</see></param>
            <param name="key">The value of <i>property</i> to match.</param>
            <param name="start">The index in the list at which to start the search.</param>
            <param name="ignoreCase">Indicator of whether to perform a case-sensitive or case insensitive search (string properties only).</param>
            <returns>The zero-based index of the item that matches the property descriptor and contains the specified value. </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the items in the list
            </summary>
            <param name="prop">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that specifies the property to sort on.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.RemoveSortCore">
            <summary>
            Removes any sort applied to the list.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.RemoveFilter">
            <summary>
            Removes the current filter applied to the data source..
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
             Sorts the data source based on the given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/>.
            </summary>
            <param name="sorts">The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> containing the sorts to apply to the data source.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
             Sorts the data source based on a <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see> and a <see cref="T:System.ComponentModel.ListSortDirection">ListSortDirection</see>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to sort the collection by.</param>
            <param name="direction">The <see cref="T:System.ComponentModel.ListSortDirection"/> in which to sort the collection.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplySortInternal(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire list using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">comparison is a null reference.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplySortInternal(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire list using the specified comparer. 
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or a null reference (Nothing in Visual Basic) to use the default comparer <see cref="F:System.Collections.Comparer.Default"/>.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire list using the specified comparer. 
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or a null reference (Nothing in Visual Basic) to use the default comparer <see cref="F:System.Collections.Comparer.Default"/>.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire list using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">comparison is a null reference.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Sort(System.String)">
            <summary>
            Sorts the elements in the entire list using the specified Order By statement.
            </summary>
            <param name="orderBy">SQL-like string representing the properties to sort the list by.</param>
            <remarks><i>orderBy</i> should be in the following format: 
            <para>PropertyName[[ [[ASC]|DESC]][, PropertyName[ [[ASC]|DESC]][,...]]]</para></remarks>
            <example><c>list.Sort("Property1, Property2 DESC, Property3 ASC");</c></example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplyFilter">
            <summary>
            Force the filtering of the collection, based on the filter expression set through the <c cref="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.Filter"/> property.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ApplyFilter(System.Predicate{`0})">
            <summary>
            Force the filtering of the collection, based on the use of the specified Predicate.
            </summary>
            <param name="match"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.RemoveFilteredItem(System.Int32)">
            <summary>
            Removes the non criteria matching item at the specified index for the current filter set.
            Adds the Item to the ExcludedItem  collection without changing EntityState
            </summary>
            <param name="index">The zero-based index of non criteria matching item to remove.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.OnItemChanged(System.Object,System.EventArgs)">
            <summary>
            Represents the method that will handle the ItemChanged event of the CurrencyManager class
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>This raises the ListChanged event of the list.</remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Shuffle">
             <summary>
            		Sorts the collection based on a random shuffle.
             </summary>
             <author>Steven Smith</author>
             <url>http://blogs.aspadvice.com/ssmith/archive/2005/01/27/2480.aspx</url>
            <remarks></remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Clone">
            <summary>
             Creates an exact copy of this instance.
            </summary>
            <implements><see cref="M:System.ICloneable.Clone"/></implements>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.MakeCopyOf(System.Object)">
            <summary>
             Creates an exact copy of this TList{T} object.
            </summary>
            <returns>A new, identical copy of the TList{T} casted as object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.EntityChanged(`0)">
            <summary>
            Raises the ListChanged event indicating that a item in the list has changed.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            This member allows binding objects to discover the field/column information.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            This member returns the name displayed in the IDE.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.GetList">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Find(System.Enum,System.Object)">
            <summary>
             Finds the first <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object in the current list matching the search criteria.
            </summary>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Find(System.Enum,System.Object,System.Boolean)">
            <summary>
             Finds the first <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object in the current list matching the search criteria.
            </summary>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Find(System.String,System.Object)">
            <summary>
             Finds the first <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object in the current list matching the search criteria.
            </summary>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Find(System.String,System.Object,System.Boolean)">
            <summary>
             Finds the first <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> object in the current list matching the search criteria.
            </summary>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.IsNullOrEmpty(ZNode.Libraries.DataAccess.Entities.ListBase{`0})">
            <summary>
            Indicates whether the specified TList object is a null reference (Nothing in Visual Basic) or an empty collection (no item in it).
            </summary>
            <param name="list">The list.</param>
            <returns>
            	<c>true</c> if the object is null or has no item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the specified array.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.AddRange(`0[])">
            <summary>
            Adds an array of items to the list of items for a TList.
            </summary>
            <param name="array">The array of items to add.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.AddRange(ZNode.Libraries.DataAccess.Entities.ListBase{`0})">
            <summary>
            Adds an array of items to the list of items for a TList.
            </summary>
            <param name="list">The list of items to add.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.AddRange(System.Collections.Generic.List{`0})">
            <summary>
            Adds an array of items to the list of items for a VList.
            </summary>
            <param name="list">The list of items to add.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the elements to search for.</param>
            <returns>
            A <see cref="T:TList`1"></see> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:TList`1"></see>.
            </returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>		
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:TList`1"></see>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.</param>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.
            </returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ToArray">
            <summary>
             Convert list of entities to an <see cref="T:System.Array"/>
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.ToDataSet(System.Boolean)">
            <summary>
            Recursively adds child relationships of a <seealso cref="T:ZNode.Libraries.DataAccess.Entities.ListBase`1"/> Entities and 
            builds out a nested dataset including <see cref="T:System.Data.DataRelation"/> relationships.
            </summary>
            <param name="includeChildren">You can optionally go deep by including includeChildren</param>
            <returns>DataSet</returns>
            <example>
             An example using the Northwind database would be to deep load a TList or VList, 
             and then call list.ToDataSet(true/false);
             <code><![CDATA[
               TList<Categories> list = DataRepository.CategoriesProvider.GetAll();
               DataRepository.CategoriesProvider.DeepLoad(list, true);
               DataSet ds = list.ToDataSet(true);
               ds.WriteXml("C:\\Test2.xml");
               ]]></code>
            </example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ListBase`1.AddRelations(System.Data.DataSet,System.Collections.Generic.List{System.Data.DataColumn},System.Boolean)">
            <summary>
            Recursively adds child relationships of a TList's Entity and builds out a nested dataset including relationships.
            </summary>
            <param name="dataset">An already instatiated dataset which will be used to fill all objects.</param>
            <param name="parentKeys">Used to pass down the parent primary key to a child datatable to add a dataRelation</param>
            <param name="includeChildren">bool, include deep load of all child collections in this object graph?</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SupportsSearchingCore">
            <summary>
            Gets a value indicating whether the list supports searching. 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SupportsSortingCore">
            <summary>
            Gets a value indicating whether the list supports sorting. 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.IsSortedCore">
            <summary>
            Gets a value indicating whether the list is sorted. 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SortDirectionCore">
            <summary>
            Gets the direction the list is sorted.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SortPropertyCore">
            <summary>
            Gets the property descriptor that is used for sorting
            </summary>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"/> used for sorting the list.</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SortDescriptions">
            <summary>
            Gets the collection of sort descriptions currently applied to the data source.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SupportsAdvancedSorting">
            <summary>
            Gets a value indicating whether the data source supports advanced sorting.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.SupportsFiltering">
            <summary>
            Gets a value indicating whether the data source supports filtering.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.IsFiltering">
            <summary>
            Indicates whether a filter is currently applied to the collection.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.ExcludedItems">
            <summary>
            Get the list of items that are excluded by the current filter.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
            <summary>
            Gets a value indicating whether the object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> events.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.PropertyCollection">
            <summary>
            Gets or sets the property descriptor collection for T.  
            </summary>
            <value>The property collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.ContainsListCollection">
            <summary>
            Return TRUE if our list contains additional/child lists.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ListBase`1.Site">
            <summary>
            Get / Set the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ListBase`1.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SortComparer`1">
            <summary>
            Generic Sort comparer for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1"/> class.
            </summary>
            <typeparam name="T">Type of object to sort.</typeparam>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SortComparer`1.m_SortCollection">
            <summary>
            Collection of properties to sort by.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SortComparer`1.m_PropDesc">
            <summary>
            Property to sort by.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SortComparer`1.m_Direction">
            <summary>
            Direction to sort by
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SortComparer`1.m_PropertyDescriptors">
            <summary>
            Collection of properties for T.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a new instance of the SortComparer class.
            </summary>
            <param name="propDesc">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to sort by.</param>
            <param name="direction">The <see cref="T:System.ComponentModel.ListSortDirection"/> to sort the list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Create a new instance of the SortComparer class.
            </summary>
            <param name="sortCollection">A <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> containing the properties to sort the list by.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.#ctor(System.String)">
            <summary>
            Create a new instance of the SortComparer class.
            </summary>
            <param name="orderBy">SQL-like string representing the properties to sort the list by.</param>
            <remarks><i>orderBy</i> should be in the following format: 
            <para>PropertyName[[ [[ASC]|DESC]][, PropertyName[ [[ASC]|DESC]][,...]]]</para></remarks>
            <example><c>list.Sort("Property1, Property2 DESC, Property3 ASC");</c></example>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Value is less than zero: <c>x</c> is less than <c>y</c>
            <para>Value is equal to zero: <c>x</c> equals <c>y</c></para>
            <para>Value is greater than zero: <c>x</c> is greater than <c>y</c></para>
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.CompareValues(System.Object,System.Object,System.ComponentModel.ListSortDirection)">
            <summary>
            Compare two objects
            </summary>
            <param name="xValue">The first object to compare</param>
            <param name="yValue">The second object to compare</param>
            <param name="direction">The direction to sort the objects in</param>
            <returns>Returns an integer representing the order of the objects</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.ParseOrderBy(System.String)">
            <summary>
            Parses a string into a <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/>.
            </summary>
            <param name="orderBy">SQL-like string of sort properties</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SortComparer`1.Initialize">
            <summary>
            Initializes the SortComparer object
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Country">
            <summary>
             An object representation of the 'ZNodeCountry' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryBase">
            <summary>
             An object representation of the 'ZNodeCountry' table. [No description found the database]	
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityBase">
            <summary>
            The base object for each database table entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityBaseCore">
            <summary>
            The base object for each database table entity.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.IEntity">
            <summary>
            The interface that each business object of the model implements.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.IEntity.AcceptChanges">
            <summary>
            Accepts the changes made to this object by setting each flags to false.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.IEntity.MarkToDelete">
            <summary>
            Marks entity to be deleted.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.TableName">
            <summary>
            The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.IsDirty">
             <summary>
            	Indicates if the object has been modified from its original state.
             </summary>
            <value>True if object has been modified from its original state; otherwise False;</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.IsNew">
             <summary>
            	Indicates if the object is new.
             </summary>
            <value>True if objectis new; otherwise False;</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.IsDeleted">
            <summary>
            True if object has been marked as deleted. ReadOnly.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.IsValid">
            <summary>
            Indicates if the object is in a valid state
            </summary>
            <value>True if object is valid; otherwise False.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.EntityState">
            <summary>
            Returns one of EntityState enum values - intended to replace IsNew, IsDirty, IsDeleted.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
            <value>A string array that holds the columns names.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.Tag">
            <summary>
                Gets or sets the object that contains supplemental data about this object.
            </summary>
            <value>Object</value>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.IEntity.PropertyChanged">
            <summary>
            Event to indicate that a property has changed.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.IsEntityTracked">
            <summary>
            Determines whether this entity is being tracked.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntity.EntityTrackingKey">
            <summary>
             The tracking key used to with the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EntityBaseCore"/> class.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.currentEntityState">
            <summary>
            The EntityState of the entity
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.isEntityTracked">
            <summary>
            Determines whether the entity is being tracked by the Locator.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.suppressEntityEvents">
            <summary>
            Suppresses Entity Events from Firing, 
            useful when loading the entities from the database.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.bindingIsNew">
            <summary>
             Used by in place editing of databinding features for new inserted row.
            Indicates that we are in the middle of an IBinding insert transaction.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.AcceptChanges">
            <summary>
            Accepts the changes made to this object.
            </summary>
            <remarks>
            After calling this method <see cref="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsDirty"/> and <see cref="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsNew"/> are false. <see cref="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsDeleted"/> flag remain unchanged as it is handled by the parent List.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.CancelChanges">
            <summary>
              TODO: Revert all changes and restore original values.
              Currently not supported.
            </summary>
             <exception cref="T:System.NotSupportedException">This method is not currently supported and always throws this exception.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.MarkToDelete">
            <summary>
               Marks entity to be deleted.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.RemoveDeleteMark">
            <summary>
               Remove the "isDeleted" mark from the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.tag">
            <summary>
            Object that contains data to associate with this object
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.OnPropertyChanged(System.String)">
            <summary>
            Called when a property is changed
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property is changed
            </summary>
            <param name="e">PropertyChangedEventArgs</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.AddValidationRules">
             <summary>
             Assigns validation rules to this object.
             </summary>
             <remarks>
             This method can be overridden in a derived class to add custom validation rules. 
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.Validate">
            <summary>
            Force this object to validate itself using the assigned business rules.
            </summary>
            <remarks>Validates all properties.</remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.Validate(System.String)">
            <summary>
            Force the object to validate itself using the assigned business rules.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.Validate(System.Enum)">
            <summary>
            Force the object to validate itself using the assigned business rules.
            </summary>
            <param name="column">Column enumeration representingt the column to validate.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.TableName">
            <summary>
            The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
            <value>A string array that holds the columns names.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsDeleted">
            <summary>
            	True if object has been <see cref="M:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.MarkToDelete"/>. ReadOnly.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsDirty">
            <summary>
            	Indicates if the object has been modified from its original state.
            </summary>
            <remarks>True if object has been modified from its original state; otherwise False;</remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsNew">
            <summary>
            	Indicates if the object is new.
            </summary>
            <remarks>True if objectis new; otherwise False;</remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.EntityState">
            <summary>
            	Indicates state of object
            </summary>
            <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.Tag">
            <summary>
                Gets or sets the object that contains supplemental data about this object.
            </summary>
            <value>Object</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsEntityTracked">
            <summary>
            Determines whether this entity is being tracked.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.SuppressEntityEvents">
            <summary>
            Determines whether this entity is to suppress events while set to true.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.PropertyChanged">
            <summary>
            Event to indicate that a property has changed.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <value></value>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>      
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.Item(System.String)">
            <summary>
            Gets the <see cref="T:String"/> with the specified column name.
            </summary>
            <value></value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.ValidationRules">
            <summary>
            Returns the list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules"/> associated with this object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.IsValid">
            <summary>
            Returns <see langword="true" /> if the object is valid, 
            <see langword="false" /> if the object validation rules that have indicated failure. 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityBaseCore.BrokenRulesList">
            <summary>
            Returns a list of all the validation rules that failed.
            </summary>
            <returns><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList"/></returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.IEntityId`1">
            <summary>
            Defines a common property which represents the
            unique identifier for a business object.
            </summary>
            <typeparam name="EntityKey">The value type or
            class to be used for the EntityId property.</typeparam>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.IEntityId`1.EntityId">
            <summary>
            Gets or sets the value of the unique identifier
            for the current business object.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.#ctor(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryBase"/> instance.
            </summary>
            <param name="countryCode"></param>
            <param name="countryPortalID"></param>
            <param name="countryName"></param>
            <param name="countryDisplayOrder"></param>
            <param name="countryActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.CreateCountry(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> instance.
            </summary>
            <param name="countryCode"></param>
            <param name="countryPortalID"></param>
            <param name="countryName"></param>
            <param name="countryDisplayOrder"></param>
            <param name="countryActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CountryColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CountryBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CountryColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CountryBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CountryColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CountryBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CountryColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CountryBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.Copy">
            <summary>
              Returns a Typed Country Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.DeepCopy">
            <summary>
              Returns a Typed Country Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.Equals(ZNode.Libraries.DataAccess.Entities.CountryBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.Equals(ZNode.Libraries.DataAccess.Entities.CountryBase,ZNode.Libraries.DataAccess.Entities.CountryBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CountryBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CountryBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CountryBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.Code">
            <summary>
            	Gets or sets the Code property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.OriginalCode">
            <summary>
            	Get the original value of the Code property.
            	
            </summary>
            <remarks>This is the original value of the Code property.</remarks>
            <value>This type is varchar</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsPortalIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.TaxRuleCollection">
            <summary>
            Holds a collection of TaxRule objects
            which are related to this object through the relation FK_ZNodeTaxRule_ZNodeCountry
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.ShippingCollection">
            <summary>
            Holds a collection of Shipping objects
            which are related to this object through the relation FK_ZNodeShipping_ZNodeCountry
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CountryBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CountryBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCountry' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.Code">
            <summary>			
            Code : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCountry"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.OriginalCode">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.TaxRuleCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation taxRuleDestinationCountryCode
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryBase.CountryEntityData.ShippingCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation shippingDestinationCountryCode
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Country.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValue">
            <summary>
             An object representation of the 'ZNodeAddOnValue' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase">
            <summary>
             An object representation of the 'ZNodeAddOnValue' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.Decimal,System.Decimal)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase"/> instance.
            </summary>
            <param name="addOnValueAddOnID"></param>
            <param name="addOnValueName"></param>
            <param name="addOnValueDescription"></param>
            <param name="addOnValueSKU"></param>
            <param name="addOnValueQuantityOnHand"></param>
            <param name="addOnValueDefaultInd"></param>
            <param name="addOnValueDisplayOrder"></param>
            <param name="addOnValueImageFile"></param>
            <param name="addOnValuePrice"></param>
            <param name="addOnValueWeight"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.CreateAddOnValue(System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.Decimal,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> instance.
            </summary>
            <param name="addOnValueAddOnID"></param>
            <param name="addOnValueName"></param>
            <param name="addOnValueDescription"></param>
            <param name="addOnValueSKU"></param>
            <param name="addOnValueQuantityOnHand"></param>
            <param name="addOnValueDefaultInd"></param>
            <param name="addOnValueDisplayOrder"></param>
            <param name="addOnValueImageFile"></param>
            <param name="addOnValuePrice"></param>
            <param name="addOnValueWeight"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Copy">
            <summary>
              Returns a Typed AddOnValue Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.DeepCopy">
            <summary>
              Returns a Typed AddOnValue Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Equals(ZNode.Libraries.DataAccess.Entities.AddOnValueBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Equals(ZNode.Libraries.DataAccess.Entities.AddOnValueBase,ZNode.Libraries.DataAccess.Entities.AddOnValueBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueID">
            <summary>
            	Gets or sets the AddOnValueID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnID">
            <summary>
            	Gets or sets the AddOnID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.SKU">
            <summary>
            	Gets or sets the SKU property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.QuantityOnHand">
            <summary>
            	Gets or sets the QuantityOnHand property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.DefaultInd">
            <summary>
            	Gets or sets the DefaultInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ImageFile">
            <summary>
            	Gets or sets the ImageFile property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Price">
            <summary>
            	Gets or sets the Price property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Weight">
            <summary>
            	Gets or sets the Weight property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/>.
            </summary>
            <value>The source AddOn for AddOnID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData">
            <summary>
            	The data structure representation of the 'ZNodeAddOnValue' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.AddOnValueID">
            <summary>			
            AddOnValueID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeAddOnValue"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.AddOnID">
            <summary>
            AddOnID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.QuantityOnHand">
            <summary>
            QuantityOnHand : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.DefaultInd">
            <summary>
            DefaultInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.Price">
            <summary>
            Price : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueBase.AddOnValueEntityData.Weight">
            <summary>
            Weight : 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValue.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn)">
            <summary>
             Initalizes a new Instance of the CaseStatusEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CaseStatusEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusEventArgs.Column">
            <summary>
             The CaseStatusColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusEventHandler">
            <summary>
             Define a delegate for all CaseStatus related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase">
            <summary>
             An object representation of the 'ZNodeCaseStatus' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase"/> instance.
            </summary>
            <param name="caseStatusCaseStatusID"></param>
            <param name="caseStatusCaseStatusNme"></param>
            <param name="caseStatusViewOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CreateCaseStatus(System.Int32,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> instance.
            </summary>
            <param name="caseStatusCaseStatusID"></param>
            <param name="caseStatusCaseStatusNme"></param>
            <param name="caseStatusViewOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Copy">
            <summary>
              Returns a Typed CaseStatus Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.DeepCopy">
            <summary>
              Returns a Typed CaseStatus Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Equals(ZNode.Libraries.DataAccess.Entities.CaseStatusBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Equals(ZNode.Libraries.DataAccess.Entities.CaseStatusBase,ZNode.Libraries.DataAccess.Entities.CaseStatusBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusID">
            <summary>
            	Gets or sets the CaseStatusID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.OriginalCaseStatusID">
            <summary>
            	Get the original value of the CaseStatusID property.
            	
            </summary>
            <remarks>This is the original value of the CaseStatusID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusNme">
            <summary>
            	Gets or sets the CaseStatusNme property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ViewOrder">
            <summary>
            	Gets or sets the ViewOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseCollection">
            <summary>
            Holds a collection of Case objects
            which are related to this object through the relation FK_Case_CaseStatus
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCaseStatus' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusEntityData.CaseStatusID">
            <summary>			
            CaseStatusID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCaseStatus"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusEntityData.OriginalCaseStatusID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusEntityData.CaseStatusNme">
            <summary>
            CaseStatusNme : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusEntityData.ViewOrder">
            <summary>
            ViewOrder : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusBase.CaseStatusEntityData.CaseCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation @caseCaseStatusID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CaseStatusComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CaseStatusColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer.Equals(ZNode.Libraries.DataAccess.Entities.CaseStatus,ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> to compare.</param>
            <param name="b">The second <c>CaseStatus</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer.Compare(ZNode.Libraries.DataAccess.Entities.CaseStatus,ZNode.Libraries.DataAccess.Entities.CaseStatus)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> object.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityKeyBase">
            <summary>
            The base object for each database table's unique identifier.
            </summary>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityKeyBaseCore">
            <summary>
            The base object for each database table's unique identifier.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.IEntityKey">
            <summary>
            Defines a method that allows setting of property values
            based on the key/value pairs of an IDictionary object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.IEntityKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied IDictionary object into
            properties of the current object.
            </summary>
            <param name="values">An IDictionary instance that contains the key/value
            pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.IEntityKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityKeyBaseCore.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied IDictionary object into
            properties of the current object.
            </summary>
            <param name="values">An IDictionary instance that contains the key/value
            pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityKeyBaseCore.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityKeyBaseCore.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current object.
            </summary>
            <param name="obj">The System.Object to compare with the current object.</param>
            <returns>Returns true if the specified System.Object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityKeyBaseCore.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.#ctor">
            <summary>
            Initializes a new instance of the CaseStatusKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.#ctor(ZNode.Libraries.DataAccess.Entities.CaseStatusBase)">
            <summary>
            Initializes a new instance of the CaseStatusKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CaseStatusKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseStatusKey.CaseStatusID">
            <summary>
            Gets or sets the CaseStatusID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn">
            <summary>
            Enumerate the CaseStatus columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn.CaseStatusID">
            <summary>
            CaseStatusID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn.CaseStatusNme">
            <summary>
            CaseStatusNme : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseStatusColumn.ViewOrder">
            <summary>
            ViewOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseStatus">
            <summary>
             An object representation of the 'ZNodeCaseStatus' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseStatus.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.StateColumn)">
            <summary>
             Initalizes a new Instance of the StateEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.StateColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the StateEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateEventArgs.Column">
            <summary>
             The StateColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.StateColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateEventHandler">
            <summary>
             Define a delegate for all State related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateBase">
            <summary>
             An object representation of the 'ZNodeState' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.StateBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.StateBase"/> instance.
            </summary>
            <param name="stateCode"></param>
            <param name="stateCountryCode"></param>
            <param name="stateName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.CreateState(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> instance.
            </summary>
            <param name="stateCode"></param>
            <param name="stateCountryCode"></param>
            <param name="stateName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.StateColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StateBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StateColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.StateColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StateBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StateColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.StateColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StateBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StateColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.StateColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StateBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StateColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.Copy">
            <summary>
              Returns a Typed State Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.DeepCopy">
            <summary>
              Returns a Typed State Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.Equals(ZNode.Libraries.DataAccess.Entities.StateBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.StateBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.Equals(ZNode.Libraries.DataAccess.Entities.StateBase,ZNode.Libraries.DataAccess.Entities.StateBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.StateBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.StateBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.StateBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StateBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StateBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.Code">
            <summary>
            	Gets or sets the Code property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.OriginalCode">
            <summary>
            	Get the original value of the Code property.
            	
            </summary>
            <remarks>This is the original value of the Code property.</remarks>
            <value>This type is varchar</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.CountryCode">
            <summary>
            	Gets or sets the CountryCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StateBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StateBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateBase.StateEntityData">
            <summary>
            	The data structure representation of the 'ZNodeState' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.StateEntityData.Code">
            <summary>			
            Code : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeState"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.StateEntityData.OriginalCode">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.StateEntityData.CountryCode">
            <summary>
            CountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateBase.StateEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StateComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateComparer.#ctor(ZNode.Libraries.DataAccess.Entities.StateColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateComparer.Equals(ZNode.Libraries.DataAccess.Entities.State,ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.State"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.State"/> to compare.</param>
            <param name="b">The second <c>State</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateComparer.Compare(ZNode.Libraries.DataAccess.Entities.State,ZNode.Libraries.DataAccess.Entities.State)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateKey.#ctor">
            <summary>
            Initializes a new instance of the StateKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateKey.#ctor(ZNode.Libraries.DataAccess.Entities.StateBase)">
            <summary>
            Initializes a new instance of the StateKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StateKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StateKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StateKey.Code">
            <summary>
            Gets or sets the Code property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StateColumn">
            <summary>
            Enumerate the State columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateColumn.Code">
            <summary>
            Code : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateColumn.CountryCode">
            <summary>
            CountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StateColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute">
            <summary>
             An object representation of the 'ZNodeProductAttribute' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase">
            <summary>
             An object representation of the 'ZNodeProductAttribute' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.#ctor(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase"/> instance.
            </summary>
            <param name="productAttributeAttributeTypeId"></param>
            <param name="productAttributeName"></param>
            <param name="productAttributeExternalId"></param>
            <param name="productAttributeDisplayOrder"></param>
            <param name="productAttributeIsActive"></param>
            <param name="productAttributeOldAttributeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.CreateProductAttribute(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> instance.
            </summary>
            <param name="productAttributeAttributeTypeId"></param>
            <param name="productAttributeName"></param>
            <param name="productAttributeExternalId"></param>
            <param name="productAttributeDisplayOrder"></param>
            <param name="productAttributeIsActive"></param>
            <param name="productAttributeOldAttributeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Copy">
            <summary>
              Returns a Typed ProductAttribute Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.DeepCopy">
            <summary>
              Returns a Typed ProductAttribute Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductAttributeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductAttributeBase,ZNode.Libraries.DataAccess.Entities.ProductAttributeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.AttributeId">
            <summary>
            	Gets or sets the AttributeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.AttributeTypeId">
            <summary>
            	Gets or sets the AttributeTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ExternalId">
            <summary>
            	Gets or sets the ExternalId property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.IsActive">
            <summary>
            	Gets or sets the IsActive property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.OldAttributeId">
            <summary>
            	Gets or sets the OldAttributeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsOldAttributeIdNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.SKUAttributeCollection">
            <summary>
            Holds a collection of SKUAttribute objects
            which are related to this object through the relation FK_SC_SKUAttribute_SC_Attribute
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductAttribute' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.AttributeId">
            <summary>			
            AttributeId : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductAttribute"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.AttributeTypeId">
            <summary>
            AttributeTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.ExternalId">
            <summary>
            ExternalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.IsActive">
            <summary>
            IsActive : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.OldAttributeId">
            <summary>
            OldAttributeId : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeBase.ProductAttributeEntityData.SKUAttributeCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation sKUAttributeAttributeId
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttribute.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Product">
            <summary>
             An object representation of the 'ZNodeProduct' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductBase">
            <summary>
             An object representation of the 'ZNodeProduct' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductBase"/> instance.
            </summary>
            <param name="productPortalID"></param>
            <param name="productName"></param>
            <param name="productShortDescription"></param>
            <param name="productDescription"></param>
            <param name="productFeaturesDesc"></param>
            <param name="productProductNum"></param>
            <param name="productProductTypeID"></param>
            <param name="productRetailPrice"></param>
            <param name="productWholesalePrice"></param>
            <param name="productSalePrice"></param>
            <param name="productImageFile"></param>
            <param name="productWeight"></param>
            <param name="productActiveInd"></param>
            <param name="productDisplayOrder"></param>
            <param name="productCallForPricing"></param>
            <param name="productHomepageSpecial"></param>
            <param name="productCategorySpecial"></param>
            <param name="productInventoryDisplay"></param>
            <param name="productKeywords"></param>
            <param name="productManufacturerID"></param>
            <param name="productAdditionalInfoLink"></param>
            <param name="productAdditionalInfoLinkLabel"></param>
            <param name="productShippingRuleTypeID"></param>
            <param name="productSEOTitle"></param>
            <param name="productSEOKeywords"></param>
            <param name="productSEODescription"></param>
            <param name="productCustom1"></param>
            <param name="productCustom2"></param>
            <param name="productCustom3"></param>
            <param name="productShipEachItemSeparately"></param>
            <param name="productSKU"></param>
            <param name="productQuantityOnHand"></param>
            <param name="productAllowBackOrder"></param>
            <param name="productBackOrderMsg"></param>
            <param name="productDropShipInd"></param>
            <param name="productDropShipEmailID"></param>
            <param name="productSpecifications"></param>
            <param name="productAdditionalInformation"></param>
            <param name="productInStockMsg"></param>
            <param name="productOutOfStockMsg"></param>
            <param name="productTrackInventoryInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.CreateProduct(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Byte,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> instance.
            </summary>
            <param name="productPortalID"></param>
            <param name="productName"></param>
            <param name="productShortDescription"></param>
            <param name="productDescription"></param>
            <param name="productFeaturesDesc"></param>
            <param name="productProductNum"></param>
            <param name="productProductTypeID"></param>
            <param name="productRetailPrice"></param>
            <param name="productWholesalePrice"></param>
            <param name="productSalePrice"></param>
            <param name="productImageFile"></param>
            <param name="productWeight"></param>
            <param name="productActiveInd"></param>
            <param name="productDisplayOrder"></param>
            <param name="productCallForPricing"></param>
            <param name="productHomepageSpecial"></param>
            <param name="productCategorySpecial"></param>
            <param name="productInventoryDisplay"></param>
            <param name="productKeywords"></param>
            <param name="productManufacturerID"></param>
            <param name="productAdditionalInfoLink"></param>
            <param name="productAdditionalInfoLinkLabel"></param>
            <param name="productShippingRuleTypeID"></param>
            <param name="productSEOTitle"></param>
            <param name="productSEOKeywords"></param>
            <param name="productSEODescription"></param>
            <param name="productCustom1"></param>
            <param name="productCustom2"></param>
            <param name="productCustom3"></param>
            <param name="productShipEachItemSeparately"></param>
            <param name="productSKU"></param>
            <param name="productQuantityOnHand"></param>
            <param name="productAllowBackOrder"></param>
            <param name="productBackOrderMsg"></param>
            <param name="productDropShipInd"></param>
            <param name="productDropShipEmailID"></param>
            <param name="productSpecifications"></param>
            <param name="productAdditionalInformation"></param>
            <param name="productInStockMsg"></param>
            <param name="productOutOfStockMsg"></param>
            <param name="productTrackInventoryInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.Copy">
            <summary>
              Returns a Typed Product Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.DeepCopy">
            <summary>
              Returns a Typed Product Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductBase,ZNode.Libraries.DataAccess.Entities.ProductBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ShortDescription">
            <summary>
            	Gets or sets the ShortDescription property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.FeaturesDesc">
            <summary>
            	Gets or sets the FeaturesDesc property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductNum">
            <summary>
            	Gets or sets the ProductNum property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductTypeID">
            <summary>
            	Gets or sets the ProductTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.RetailPrice">
            <summary>
            	Gets or sets the RetailPrice property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsRetailPriceNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.WholesalePrice">
            <summary>
            	Gets or sets the WholesalePrice property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsWholesalePriceNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.SalePrice">
            <summary>
            	Gets or sets the SalePrice property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsSalePriceNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ImageFile">
            <summary>
            	Gets or sets the ImageFile property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Weight">
            <summary>
            	Gets or sets the Weight property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0.0m. It is up to the developer
            to check the value of IsWeightNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.CallForPricing">
            <summary>
            	Gets or sets the CallForPricing property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.HomepageSpecial">
            <summary>
            	Gets or sets the HomepageSpecial property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.CategorySpecial">
            <summary>
            	Gets or sets the CategorySpecial property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.InventoryDisplay">
            <summary>
            	Gets or sets the InventoryDisplay property. 
            	
            </summary>
            <value>This type is tinyint.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Keywords">
            <summary>
            	Gets or sets the Keywords property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ManufacturerID">
            <summary>
            	Gets or sets the ManufacturerID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsManufacturerIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.AdditionalInfoLink">
            <summary>
            	Gets or sets the AdditionalInfoLink property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.AdditionalInfoLinkLabel">
            <summary>
            	Gets or sets the AdditionalInfoLinkLabel property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ShippingRuleTypeID">
            <summary>
            	Gets or sets the ShippingRuleTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsShippingRuleTypeIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.SEOTitle">
            <summary>
            	Gets or sets the SEOTitle property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.SEOKeywords">
            <summary>
            	Gets or sets the SEOKeywords property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.SEODescription">
            <summary>
            	Gets or sets the SEODescription property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ShipEachItemSeparately">
            <summary>
            	Gets or sets the ShipEachItemSeparately property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsShipEachItemSeparatelyNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.SKU">
            <summary>
            	Gets or sets the SKU property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.QuantityOnHand">
            <summary>
            	Gets or sets the QuantityOnHand property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsQuantityOnHandNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.AllowBackOrder">
            <summary>
            	Gets or sets the AllowBackOrder property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsAllowBackOrderNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.BackOrderMsg">
            <summary>
            	Gets or sets the BackOrderMsg property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.DropShipInd">
            <summary>
            	Gets or sets the DropShipInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsDropShipIndNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.DropShipEmailID">
            <summary>
            	Gets or sets the DropShipEmailID property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Specifications">
            <summary>
            	Gets or sets the Specifications property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.AdditionalInformation">
            <summary>
            	Gets or sets the AdditionalInformation property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.InStockMsg">
            <summary>
            	Gets or sets the InStockMsg property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.OutOfStockMsg">
            <summary>
            	Gets or sets the OutOfStockMsg property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.TrackInventoryInd">
            <summary>
            	Gets or sets the TrackInventoryInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsTrackInventoryIndNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ManufacturerIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/>.
            </summary>
            <value>The source Manufacturer for ManufacturerID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/>.
            </summary>
            <value>The source ProductType for ProductTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ShippingRuleTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/>.
            </summary>
            <value>The source ShippingRuleType for ShippingRuleTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductImageCollection">
            <summary>
            Holds a collection of ProductImage objects
            which are related to this object through the relation FK_ZNodeProductView_ZNodeProduct
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductCategoryCollection">
            <summary>
            Holds a collection of ProductCategory objects
            which are related to this object through the relation FK_SC_ProductCategory_SC_Product
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductCrossSellCollection">
            <summary>
            Holds a collection of ProductCrossSell objects
            which are related to this object through the relation FK_SC_ProductCrossSellType_SC_Product
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.SKUCollection">
            <summary>
            Holds a collection of SKU objects
            which are related to this object through the relation FK_SC_SKU_SC_Product
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductHighlightCollection">
            <summary>
            Holds a collection of ProductHighlight objects
            which are related to this object through the relation FK_SC_ProductHighlight_SC_Product
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductAddOnCollection">
            <summary>
            Holds a collection of ProductAddOn objects
            which are related to this object through the relation FK_ZNodeProductAddOn_ZNodeProduct
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProduct' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductID">
            <summary>			
            ProductID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProduct"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ShortDescription">
            <summary>
            ShortDescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.FeaturesDesc">
            <summary>
            FeaturesDesc : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductNum">
            <summary>
            ProductNum : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductTypeID">
            <summary>
            ProductTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.RetailPrice">
            <summary>
            RetailPrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.WholesalePrice">
            <summary>
            WholesalePrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.SalePrice">
            <summary>
            SalePrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Weight">
            <summary>
            Weight : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.CallForPricing">
            <summary>
            CallForPricing : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.HomepageSpecial">
            <summary>
            HomepageSpecial : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.CategorySpecial">
            <summary>
            CategorySpecial : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.InventoryDisplay">
            <summary>
            InventoryDisplay : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Keywords">
            <summary>
            Keywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ManufacturerID">
            <summary>
            ManufacturerID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.AdditionalInfoLink">
            <summary>
            AdditionalInfoLink : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.AdditionalInfoLinkLabel">
            <summary>
            AdditionalInfoLinkLabel : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ShippingRuleTypeID">
            <summary>
            ShippingRuleTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.SEOTitle">
            <summary>
            SEOTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.SEOKeywords">
            <summary>
            SEOKeywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.SEODescription">
            <summary>
            SEODescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ShipEachItemSeparately">
            <summary>
            ShipEachItemSeparately : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.QuantityOnHand">
            <summary>
            QuantityOnHand : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.AllowBackOrder">
            <summary>
            AllowBackOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.BackOrderMsg">
            <summary>
            BackOrderMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.DropShipInd">
            <summary>
            DropShipInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.DropShipEmailID">
            <summary>
            DropShipEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.Specifications">
            <summary>
            Specifications : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.AdditionalInformation">
            <summary>
            AdditionalInformation : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.InStockMsg">
            <summary>
            InStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.OutOfStockMsg">
            <summary>
            OutOfStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.TrackInventoryInd">
            <summary>
            TrackInventoryInd : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductImageCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productImageProductID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductCategoryCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productCategoryProductID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductCrossSellCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productCrossSellProductId
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.SKUCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation skuProductID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductHighlightCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productHighlightProductID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductBase.ProductEntityData.ProductAddOnCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productAddOnProductID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Product.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Product.PurchaseInformation">
            <summary>
            Use the FeaturesDesc field from the database to store Purchase information
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Product.LicensingInformation">
            <summary>
            Use the Specifications field from the database to store Licensing information
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Product.UpgradeInformation">
            <summary>
            Use the AdditionalInformation field from the database to store Upgrade information
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Product.MaintenanceInformation">
            <summary>
            Use the Custom1 field from the database to store maintenance information
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductImageColumn)">
            <summary>
             Initalizes a new Instance of the ProductImageEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductImageColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductImageEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageEventArgs.Column">
            <summary>
             The ProductImageColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageEventHandler">
            <summary>
             Define a delegate for all ProductImage related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase">
            <summary>
             An object representation of the 'ZNodeProductImage' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase"/> instance.
            </summary>
            <param name="productImageProductID"></param>
            <param name="productImageName"></param>
            <param name="productImageImageFile"></param>
            <param name="productImageActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.CreateProductImage(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> instance.
            </summary>
            <param name="productImageProductID"></param>
            <param name="productImageName"></param>
            <param name="productImageImageFile"></param>
            <param name="productImageActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductImageColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductImageColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductImageColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductImageColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Copy">
            <summary>
              Returns a Typed ProductImage Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.DeepCopy">
            <summary>
              Returns a Typed ProductImage Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductImageBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductImageBase,ZNode.Libraries.DataAccess.Entities.ProductImageBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageID">
            <summary>
            	Gets or sets the ProductImageID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ImageFile">
            <summary>
            	Gets or sets the ImageFile property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/>.
            </summary>
            <value>The source Product for ProductID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductImageBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductImage' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageEntityData.ProductImageID">
            <summary>			
            ProductImageID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductImage"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageEntityData.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageEntityData.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageBase.ProductImageEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductImageComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductImageColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductImage,ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> to compare.</param>
            <param name="b">The second <c>ProductImage</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductImage,ZNode.Libraries.DataAccess.Entities.ProductImage)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageKey.#ctor">
            <summary>
            Initializes a new instance of the ProductImageKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductImageBase)">
            <summary>
            Initializes a new instance of the ProductImageKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductImageKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImageKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductImageKey.ProductImageID">
            <summary>
            Gets or sets the ProductImageID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImageColumn">
            <summary>
            Enumerate the ProductImage columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageColumn.ProductImageID">
            <summary>
            ProductImageID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageColumn.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductImageColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityManager">
            <summary>
            Entity Manager provides the management of entity location and creation.
            This is responsible for providing the health and validity of entities as a whole.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.LocateOrCreate``1(System.String,System.String,System.Type)">
            <summary>
            Locates an entity for retrieval from the <see cref="T:Microsoft.Practices.ObjectBuilder.Locator"/>, or instatiates a new instance 
            of the entity if not currently being tracked.
            </summary>
            <typeparam name="Entity">Must implement <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> and is the default type to create, and will be the return type.</typeparam>
            <param name="key">primary key representation</param>
            <param name="typeString">type string to create</param>
            <param name="entityFactoryType">factory used to try to create this entity.</param>
            <returns>Created entity of T</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.LocateOrCreate``1(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Locates an entity for retrieval from the <see cref="T:Microsoft.Practices.ObjectBuilder.Locator"/>, or instatiates a new instance 
            of the entity if not currently being tracked.
            </summary>
            <typeparam name="Entity">Must implement <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> and is the default type to create, and will be the return type.</typeparam>
            <param name="key">primary key representation</param>
            <param name="typeString">type string to create</param>
            <param name="entityFactoryType">factory used to try to create this entity.</param>
            <param name="isLocatorEnabled">bool determining whether to use Entity Locating.</param>
            <returns>Created entity of T</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.CreateViewEntity``1(System.String,System.Type)">
            <summary>
            instatiates a new instance of the entity for view entities that don't implement IEntity and can't be tracked
            </summary>
            <typeparam name="Entity">is the default type to create, and will be the return type.</typeparam>
            <param name="typeString">type string to create</param>
            <param name="entityFactoryType">factory used to try to create this entity.</param>
            <returns>Created entity of T</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.LocateEntity``1(System.String,System.Boolean)">
            <summary>
            Locates an entity for retrieval from the <see cref="T:Microsoft.Practices.ObjectBuilder.Locator"/> if tracking is enabled.
            </summary>
            <typeparam name="Entity">Must implement <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> and is the default type to create, and will be the return type.</typeparam>
            <param name="key">primary key representation</param>
            <param name="isLocatorEnabled">bool determining whether to use Entity Locating.</param>
            <returns>found entity of T, or null</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.StopTracking(System.String)">
            <summary>
            Stops Tracking an Entity, it will be re-added in the next round.
            </summary>
            <param name="key">Entity Key used in the Locator's Bucket</param>
            <returns>true if found, false if not found</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.StartTracking(System.String,ZNode.Libraries.DataAccess.Entities.IEntity,System.Boolean)">
            <summary>
            Starts Tracking an Entity, it will be tracked until modified or persisted.
            </summary>
            <param name="key">Entity Key used in the Locator's Bucket</param>
            <param name="entity">entity to be tracked</param>
            <param name="isTrackingEnabled">Determines whether tracking is enabled</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityManager.TryAddEntityFactory(System.Type)">
            <summary>
            Adds a factory to the EntityFactories property if the parameter type is valid.
            </summary>
            <param name="entityFactoryTypeToCreate">The entity factory type to create.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityManager.EntityFactories">
            <summary>
            Exposes the current entity factory instance.
            </summary>
            <value>The entity factories.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityManager.EntityLocator">
            <summary>
            Expose the current entity locator for consumption by the API.
            </summary>
            <value>The entity locator.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException">
            <summary>
            Exception used to pass information along to the UI when an entity is not valid. <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityBase"/>.IsValid.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(ZNode.Libraries.DataAccess.Entities.EntityBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(ZNode.Libraries.DataAccess.Entities.EntityBase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(System.Collections.IList,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="entityList">The entity list.</param>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(System.Collections.IList,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="entityList">The entity list.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityNotValidException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.EntityList">
            <summary>
            Gets or sets the entity list.
            </summary>
            <value>The entity list.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityNotValidException.ExecutingMethod">
            <summary>
            Gets or sets the executing method.
            </summary>
            <value>The executing method.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.VList`1">
            <summary>
            A generic collection for the nettiers entities that are generated from views. 
            Supports filtering, databinding, searching and sorting.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VList{T}"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:VList{T}"/> class based on another list.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the specified item in the list at the specified index.
            </summary>
            <param name="index">The zero-based index where the item is to be inserted.</param>
            <param name="item">The item to insert in the list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.Clone">
            <summary>
             Creates an exact copy of this VList{T} instance.
            </summary>
            <returns>The VList{T} object this method creates, cast as an object.</returns>
            <implements><see cref="M:System.ICloneable.Clone"/></implements>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.Copy">
            <summary>
             Creates an exact copy of this VList{T} object.
            </summary>
            <returns>A new, identical copy of the VList{T}.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.ForEach``1(ZNode.Libraries.DataAccess.Entities.VList{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the specified array.
            </summary>
            <param name="list">The list.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAll(System.Enum,System.Object)">
            <summary>
             Finds a collection of objects in the current list matching the search criteria.
            </summary>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAll(System.Enum,System.Object,System.Boolean)">
            <summary>
             Finds a collection of objects in the current list matching the search criteria.
            </summary>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAll(System.String,System.Object)">
            <summary>
             Finds a collection of objects in the current list matching the search criteria.
            </summary>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAll(System.String,System.Object,System.Boolean)">
            <summary>
             Finds a collection of objects in the current list matching the search criteria.
            </summary>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.VList{`0}.FindAllByType,System.Enum,System.Object)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType"/> Type to easily search by</param>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.VList{`0}.FindAllByType,System.Enum,System.Object,System.Boolean)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType"/> Type to easily search by</param>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.VList{`0}.FindAllByType,System.String,System.Object)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType"/> Type to easily search by</param>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.VList{`0}.FindAllByType,System.String,System.Object,System.Boolean)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType"/> Type to easily search by</param>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.VList{`0}.FindAllByType,System.ComponentModel.PropertyDescriptor,System.Object,System.Int32,System.Boolean)">
            <summary>
            Searches for the index of the item that has the specified property descriptor with the specified value.
            </summary>
            <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType"/> Type to easily search by</param>
            <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"> to search for.</see></param>
            <param name="key">The value of <i>property</i> to match.</param>
            <param name="start">The index in the list at which to start the search.</param>
            <param name="ignoreCase">Indicator of whether to perform a case-sensitive or case insensitive search (string properties only).</param>
            <returns>The zero-based index of the item that matches the property descriptor and contains the specified value. </returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType">
            <summary>
             Used to by FindAllBy method to all for easy searching.
             </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType.StartsWith">
            <summary>
            Starts with Value in List
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType.EndsWith">
            <summary>
            Ends with Value in List
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.VList`1.FindAllByType.Contains">
            <summary>
            Contains Value in List
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CouponColumn)">
            <summary>
             Initalizes a new Instance of the CouponEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CouponColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CouponEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponEventArgs.Column">
            <summary>
             The CouponColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CouponColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponEventHandler">
            <summary>
             Define a delegate for all Coupon related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponBase">
            <summary>
             An object representation of the 'ZNodeCoupon' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.#ctor(System.String,System.Decimal,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.String,System.Decimal)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponBase"/> instance.
            </summary>
            <param name="couponCouponCode"></param>
            <param name="couponDiscount"></param>
            <param name="couponDiscountTypeID"></param>
            <param name="couponDiscountTargetID"></param>
            <param name="couponStartDate"></param>
            <param name="couponExpDate"></param>
            <param name="couponQuantityAvailable"></param>
            <param name="couponProductList"></param>
            <param name="couponOrderMinimum"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.CreateCoupon(System.String,System.Decimal,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.String,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/> instance.
            </summary>
            <param name="couponCouponCode"></param>
            <param name="couponDiscount"></param>
            <param name="couponDiscountTypeID"></param>
            <param name="couponDiscountTargetID"></param>
            <param name="couponStartDate"></param>
            <param name="couponExpDate"></param>
            <param name="couponQuantityAvailable"></param>
            <param name="couponProductList"></param>
            <param name="couponOrderMinimum"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CouponColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CouponBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CouponColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CouponBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CouponColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CouponBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CouponColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CouponBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.Copy">
            <summary>
              Returns a Typed Coupon Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.DeepCopy">
            <summary>
              Returns a Typed Coupon Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.Equals(ZNode.Libraries.DataAccess.Entities.CouponBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.Equals(ZNode.Libraries.DataAccess.Entities.CouponBase,ZNode.Libraries.DataAccess.Entities.CouponBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CouponBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CouponBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CouponBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponID">
            <summary>
            	Gets or sets the CouponID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponCode">
            <summary>
            	Gets or sets the CouponCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.Discount">
            <summary>
            	Gets or sets the Discount property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.DiscountTypeID">
            <summary>
            	Gets or sets the DiscountTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.DiscountTargetID">
            <summary>
            	Gets or sets the DiscountTargetID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.StartDate">
            <summary>
            	Gets or sets the StartDate property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.ExpDate">
            <summary>
            	Gets or sets the ExpDate property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.QuantityAvailable">
            <summary>
            	Gets or sets the QuantityAvailable property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.ProductList">
            <summary>
            	Gets or sets the ProductList property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.OrderMinimum">
            <summary>
            	Gets or sets the OrderMinimum property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.DiscountTargetIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/>.
            </summary>
            <value>The source DiscountTarget for DiscountTargetID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.DiscountTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/>.
            </summary>
            <value>The source DiscountType for DiscountTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.OrderCollection">
            <summary>
            Holds a collection of Order objects
            which are related to this object through the relation FK_ZNodeOrder_ZNodeCoupon
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CouponBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CouponBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCoupon' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.CouponID">
            <summary>			
            CouponID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCoupon"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.CouponCode">
            <summary>
            CouponCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.Discount">
            <summary>
            Discount : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.DiscountTypeID">
            <summary>
            DiscountTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.DiscountTargetID">
            <summary>
            DiscountTargetID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.StartDate">
            <summary>
            StartDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.ExpDate">
            <summary>
            ExpDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.QuantityAvailable">
            <summary>
            QuantityAvailable : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.ProductList">
            <summary>
            ProductList : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.OrderMinimum">
            <summary>
            OrderMinimum : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponBase.CouponEntityData.OrderCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderCouponID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CouponComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CouponColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponComparer.Equals(ZNode.Libraries.DataAccess.Entities.Coupon,ZNode.Libraries.DataAccess.Entities.Coupon)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/> to compare.</param>
            <param name="b">The second <c>Coupon</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Coupon)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponComparer.Compare(ZNode.Libraries.DataAccess.Entities.Coupon,ZNode.Libraries.DataAccess.Entities.Coupon)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponKey.#ctor">
            <summary>
            Initializes a new instance of the CouponKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponKey.#ctor(ZNode.Libraries.DataAccess.Entities.CouponBase)">
            <summary>
            Initializes a new instance of the CouponKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CouponKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CouponKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CouponKey.CouponID">
            <summary>
            Gets or sets the CouponID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CouponColumn">
            <summary>
            Enumerate the Coupon columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.CouponID">
            <summary>
            CouponID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.CouponCode">
            <summary>
            CouponCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.Discount">
            <summary>
            Discount : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.DiscountTypeID">
            <summary>
            DiscountTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.DiscountTargetID">
            <summary>
            DiscountTargetID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.StartDate">
            <summary>
            StartDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.ExpDate">
            <summary>
            ExpDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.QuantityAvailable">
            <summary>
            QuantityAvailable : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.ProductList">
            <summary>
            ProductList : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CouponColumn.OrderMinimum">
            <summary>
            OrderMinimum : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPage">
            <summary>
             An object representation of the 'ZNodeContentPage' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase">
            <summary>
             An object representation of the 'ZNodeContentPage' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase"/> instance.
            </summary>
            <param name="contentPageName"></param>
            <param name="contentPagePortalID"></param>
            <param name="contentPageTitle"></param>
            <param name="contentPageSEOTitle"></param>
            <param name="contentPageSEOMetaKeywords"></param>
            <param name="contentPageSEOMetaDescription"></param>
            <param name="contentPageAllowDelete"></param>
            <param name="contentPageTemplateName"></param>
            <param name="contentPageActiveInd"></param>
            <param name="contentPageAnalyticsCode"></param>
            <param name="contentPageCustom1"></param>
            <param name="contentPageCustom2"></param>
            <param name="contentPageCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.CreateContentPage(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> instance.
            </summary>
            <param name="contentPageName"></param>
            <param name="contentPagePortalID"></param>
            <param name="contentPageTitle"></param>
            <param name="contentPageSEOTitle"></param>
            <param name="contentPageSEOMetaKeywords"></param>
            <param name="contentPageSEOMetaDescription"></param>
            <param name="contentPageAllowDelete"></param>
            <param name="contentPageTemplateName"></param>
            <param name="contentPageActiveInd"></param>
            <param name="contentPageAnalyticsCode"></param>
            <param name="contentPageCustom1"></param>
            <param name="contentPageCustom2"></param>
            <param name="contentPageCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ContentPageColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ContentPageColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ContentPageColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ContentPageColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Copy">
            <summary>
              Returns a Typed ContentPage Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.DeepCopy">
            <summary>
              Returns a Typed ContentPage Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Equals(ZNode.Libraries.DataAccess.Entities.ContentPageBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Equals(ZNode.Libraries.DataAccess.Entities.ContentPageBase,ZNode.Libraries.DataAccess.Entities.ContentPageBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageID">
            <summary>
            	Gets or sets the ContentPageID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Title">
            <summary>
            	Gets or sets the Title property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.SEOTitle">
            <summary>
            	Gets or sets the SEOTitle property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.SEOMetaKeywords">
            <summary>
            	Gets or sets the SEOMetaKeywords property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.SEOMetaDescription">
            <summary>
            	Gets or sets the SEOMetaDescription property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.AllowDelete">
            <summary>
            	Gets or sets the AllowDelete property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.TemplateName">
            <summary>
            	Gets or sets the TemplateName property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.AnalyticsCode">
            <summary>
            	Gets or sets the AnalyticsCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageRevisionCollection">
            <summary>
            Holds a collection of ContentPageRevision objects
            which are related to this object through the relation FK_ZNodePageRevision_ZNodePage
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData">
            <summary>
            	The data structure representation of the 'ZNodeContentPage' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.ContentPageID">
            <summary>			
            ContentPageID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeContentPage"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.SEOTitle">
            <summary>
            SEOTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.SEOMetaKeywords">
            <summary>
            SEOMetaKeywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.SEOMetaDescription">
            <summary>
            SEOMetaDescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.AllowDelete">
            <summary>
            AllowDelete : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.TemplateName">
            <summary>
            TemplateName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.AnalyticsCode">
            <summary>
            AnalyticsCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageBase.ContentPageEntityData.ContentPageRevisionCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation contentPageRevisionContentPageID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPage.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> instance.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPage.Summary">
            <summary>
            Uses the Custom1 field of the ContentPageBase to store a short summary for a page, useful for
            databound controls
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPage.HasAutomaticRedirect">
            <summary>
            Specifies whether the content page has specified a RedirectPage
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPage.RedirectPage">
            <summary>
            If specified, all visits to this content page will redirect to this page.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPage.IsResellerProtectedPage">
            <summary>
            If true, will require visitors to log in as Reseller to view a page
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPage.FormEmailRecipient">
            <summary>
            Form pages will submit emails to these comma separated email addresses
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductImage">
            <summary>
             An object representation of the 'ZNodeProductImage' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductImage.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductImage"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn)">
            <summary>
             Initalizes a new Instance of the ProductHighlightEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductHighlightEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightEventArgs.Column">
            <summary>
             The ProductHighlightColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightEventHandler">
            <summary>
             Define a delegate for all ProductHighlight related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase">
            <summary>
             An object representation of the 'ZNodeProductHighlight' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.#ctor(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase"/> instance.
            </summary>
            <param name="productHighlightProductHighlightID"></param>
            <param name="productHighlightProductID"></param>
            <param name="productHighlightHighlightID"></param>
            <param name="productHighlightDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.CreateProductHighlight(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> instance.
            </summary>
            <param name="productHighlightProductHighlightID"></param>
            <param name="productHighlightProductID"></param>
            <param name="productHighlightHighlightID"></param>
            <param name="productHighlightDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Copy">
            <summary>
              Returns a Typed ProductHighlight Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.DeepCopy">
            <summary>
              Returns a Typed ProductHighlight Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductHighlightBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductHighlightBase,ZNode.Libraries.DataAccess.Entities.ProductHighlightBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightID">
            <summary>
            	Gets or sets the ProductHighlightID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.OriginalProductHighlightID">
            <summary>
            	Get the original value of the ProductHighlightID property.
            	
            </summary>
            <remarks>This is the original value of the ProductHighlightID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.HighlightID">
            <summary>
            	Gets or sets the HighlightID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsDisplayOrderNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.HighlightIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/>.
            </summary>
            <value>The source Highlight for HighlightID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/>.
            </summary>
            <value>The source Product for ProductID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductHighlight' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightEntityData.ProductHighlightID">
            <summary>			
            ProductHighlightID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductHighlight"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightEntityData.OriginalProductHighlightID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightEntityData.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightEntityData.HighlightID">
            <summary>
            HighlightID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightBase.ProductHighlightEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductHighlightComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductHighlight,ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> to compare.</param>
            <param name="b">The second <c>ProductHighlight</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductHighlight,ZNode.Libraries.DataAccess.Entities.ProductHighlight)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.#ctor">
            <summary>
            Initializes a new instance of the ProductHighlightKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductHighlightBase)">
            <summary>
            Initializes a new instance of the ProductHighlightKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductHighlightKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductHighlightKey.ProductHighlightID">
            <summary>
            Gets or sets the ProductHighlightID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn">
            <summary>
            Enumerate the ProductHighlight columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn.ProductHighlightID">
            <summary>
            ProductHighlightID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn.HighlightID">
            <summary>
            HighlightID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductHighlightColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules">
            <summary>
            Static class that contains common validation rules.  Each rule conforms to the <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> delegate.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.NotNull(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Rule that does not allow a property value to be null
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
            <returns>Returns true if the property value is not null; false otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.StringRequired(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Rule ensuring a String value contains one or more
            characters.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against String property values.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.StringMaxLength(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Rule ensuring a String value doesn't exceed
            a specified length.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against String property values.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxWords(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Summary description for MaxWords.
            </summary>
            <param name="target"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RegexIsMatch(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Rule ensuring a String value is matching
            a specified regular expression.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated, must be of type RegexRuleArgs</param>
            <returns>False if the rule is broken; true otherwise.</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against String property values.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.LessThanValue``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Generic rule that determines if an object's property is less than a particular value.
            </summary>
            <typeparam name="T">Datatype of the property to validate</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.LessThanOrEqualToValue``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Generic rule that determines if an object's property is less than or equal to a particular value.
            </summary>
            <typeparam name="T">Datatype of the property to validate</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.EqualsValue``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Generic rule that determines if an object's property is equal to a particular value.
            </summary>
            <typeparam name="T">Datatype of the property to validate</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.GreaterThanValue``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Generic rule that determines if an object's property is greater than a particular value.
            </summary>
            <typeparam name="T">Datatype of the property to validate</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.GreaterThanOrEqualToValue``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Generic rule that determines if an object's property is greater than or equal to a particular value.
            </summary>
            <typeparam name="T">Datatype of the property to validate</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValues``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValueRuleArgs{``0},ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareType)">
            <summary>
            Private method that compares a property value with a specified value.
            </summary>
            <typeparam name="T">Datatype of the property to validate.</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <param name="compareType"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareType"/> defining the type of comparison that will be made.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.InRange``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Generic rule that determines if an object's property is within a specified range.
            </summary>
            <typeparam name="T">Datatype of the property to validate.  Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="target">Object containing the data to validate.</param>
            <param name="e"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> containing the information about the object to be validated.</param>
            <returns>False if the rule is broken; true otherwise.</returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxLengthRuleArgs">
            <summary>
            Class used with the <see cref="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.StringMaxLength(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)"/>.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs">
            <summary>
            Object that provides additional information about an validation rule.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of the object
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs.ToString">
            <summary>
            Return a string representation of the object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs.PropertyName">
            <summary>
            The name of the property to be validated.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs.Description">
            <summary>
            Detailed description of why the rule was invalidated.  This should be set from the method handling the rule.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertyName">Property to validate</param>
            <param name="maxLength">Max length of the property</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxLengthRuleArgs.ToString">
            <summary>
            Return a string representation of the object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxLengthRuleArgs.MaxLength">
            <summary>
            Maximum length of the string property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxWordsRuleArgs">
            <summary>
            Summary description for MaxWordsRuleArgs.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxWordsRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the MaxWordsRuleArgs class.
            </summary>
            <param name="propertyName"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxWordsRuleArgs.ToString">
            <summary>
            Return a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.MaxWordsRuleArgs.MaxLength">
            <summary>
            Gets the value of the MaxLength property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RegexRuleArgs">
            <summary>
            Class used with the <see cref="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RegexIsMatch(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RegexRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RegexRuleArgs class.
            </summary>
            <param name="propertyName">Property to validate</param>
            <param name="expression">The Regular expression that the property have to match</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RegexRuleArgs.ToString">
            <summary>
            Return a string representation of the object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RegexRuleArgs.Expression">
            <summary>
            The Regular expression that the string have to match.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareType">
            <summary>
            Enum indicating the type of comparison that will be made.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValueRuleArgs`1">
            <summary>
            Class used with the <see cref="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValues``1(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValueRuleArgs{``0},ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareType)"/> rules.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Constructor
            </summary>
            <param name="propertyName">Name of the property to be validated.</param>
            <param name="compareValue">The value to be compared against the property.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValueRuleArgs`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.CompareValueRuleArgs`1.CompareValue">
            <summary>
            Value to be compared against an object's property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1">
            <summary>
            Class used to do a range comparison on a property.
            </summary>
            <typeparam name="T">Datatype of the property being validated.</typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of the <see cref="T:Range"/> class.
            </summary>
            <param name="minValue">The minimum value of the property.</param>
            <param name="maxValue">The maximum value of the property.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.Contains(`0)">
            <summary>
            Compares the specified value with the <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.MinValue"/> and <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.MaxValue"/>
            to determine if the value is within the range.
            </summary>
            <param name="value">The value to find within the current range</param>
            <returns>True if the value is within the range (inclusive); False otherwise.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.MinValue">
            <summary>
            The minimum value in the range.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range`1.MaxValue">
            <summary>
            The maximum value in the range.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RangeRuleArgs`1">
            <summary>
            Validation Rule Argument class
            </summary>
            <typeparam name="T">Datatype of the property being validated.</typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RangeRuleArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Creates a new instance of the <see cref="T:RangeRuleArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property to be validated.</param>
            <param name="minValue">The minimum value of the property.</param>
            <param name="maxValue">The maximum value of the property.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RangeRuleArgs`1.#ctor(System.String,ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.Range{`0})">
            <summary>
            Creates a new instance of the <see cref="T:RangeRuleArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property to be validated.</param>
            <param name="range"><see cref="T:Range"/> object containing the range of valid values for the property.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RangeRuleArgs`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.CommonRules.RangeRuleArgs`1.Range">
            <summary>
            Returns the <see cref="T:Range{T}"/> object associated with this instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Gateway">
            <summary>
             An object representation of the 'ZNodeGateway' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayBase">
            <summary>
             An object representation of the 'ZNodeGateway' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.#ctor(System.Int32,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayBase"/> instance.
            </summary>
            <param name="gatewayGatewayTypeID"></param>
            <param name="gatewayGatewayName"></param>
            <param name="gatewayWebsiteURL"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.CreateGateway(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> instance.
            </summary>
            <param name="gatewayGatewayTypeID"></param>
            <param name="gatewayGatewayName"></param>
            <param name="gatewayWebsiteURL"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.GatewayColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.GatewayColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.GatewayColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.GatewayColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.Copy">
            <summary>
              Returns a Typed Gateway Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.DeepCopy">
            <summary>
              Returns a Typed Gateway Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.Equals(ZNode.Libraries.DataAccess.Entities.GatewayBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.Equals(ZNode.Libraries.DataAccess.Entities.GatewayBase,ZNode.Libraries.DataAccess.Entities.GatewayBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.GatewayBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayTypeID">
            <summary>
            	Gets or sets the GatewayTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.OriginalGatewayTypeID">
            <summary>
            	Get the original value of the GatewayTypeID property.
            	
            </summary>
            <remarks>This is the original value of the GatewayTypeID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayName">
            <summary>
            	Gets or sets the GatewayName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.WebsiteURL">
            <summary>
            	Gets or sets the WebsiteURL property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.PaymentSettingCollection">
            <summary>
            Holds a collection of PaymentSetting objects
            which are related to this object through the relation FK_SC_PaymentSetting_SC_Gateway
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.GatewayBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayEntityData">
            <summary>
            	The data structure representation of the 'ZNodeGateway' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayEntityData.GatewayTypeID">
            <summary>			
            GatewayTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeGateway"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayEntityData.OriginalGatewayTypeID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayEntityData.GatewayName">
            <summary>
            GatewayName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayEntityData.WebsiteURL">
            <summary>
            WebsiteURL : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayBase.GatewayEntityData.PaymentSettingCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation paymentSettingGatewayTypeID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Gateway.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn)">
            <summary>
             Initalizes a new Instance of the ManufacturerEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ManufacturerEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerEventArgs.Column">
            <summary>
             The ManufacturerColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerEventHandler">
            <summary>
             Define a delegate for all Manufacturer related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase">
            <summary>
             An object representation of the 'ZNodeManufacturer' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.#ctor(System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase"/> instance.
            </summary>
            <param name="manufacturerPortalID"></param>
            <param name="manufacturerName"></param>
            <param name="manufacturerDescription"></param>
            <param name="manufacturerActiveInd"></param>
            <param name="manufacturerCustom1"></param>
            <param name="manufacturerCustom2"></param>
            <param name="manufacturerCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.CreateManufacturer(System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> instance.
            </summary>
            <param name="manufacturerPortalID"></param>
            <param name="manufacturerName"></param>
            <param name="manufacturerDescription"></param>
            <param name="manufacturerActiveInd"></param>
            <param name="manufacturerCustom1"></param>
            <param name="manufacturerCustom2"></param>
            <param name="manufacturerCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Copy">
            <summary>
              Returns a Typed Manufacturer Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.DeepCopy">
            <summary>
              Returns a Typed Manufacturer Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Equals(ZNode.Libraries.DataAccess.Entities.ManufacturerBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Equals(ZNode.Libraries.DataAccess.Entities.ManufacturerBase,ZNode.Libraries.DataAccess.Entities.ManufacturerBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerID">
            <summary>
            	Gets or sets the ManufacturerID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsPortalIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ProductCollection">
            <summary>
            Holds a collection of Product objects
            which are related to this object through the relation FK_SC_Product_SC_Manufacturer
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData">
            <summary>
            	The data structure representation of the 'ZNodeManufacturer' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.ManufacturerID">
            <summary>			
            ManufacturerID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeManufacturer"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerBase.ManufacturerEntityData.ProductCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productManufacturerID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ManufacturerComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ManufacturerColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer.Equals(ZNode.Libraries.DataAccess.Entities.Manufacturer,ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> to compare.</param>
            <param name="b">The second <c>Manufacturer</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer.Compare(ZNode.Libraries.DataAccess.Entities.Manufacturer,ZNode.Libraries.DataAccess.Entities.Manufacturer)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.#ctor">
            <summary>
            Initializes a new instance of the ManufacturerKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.#ctor(ZNode.Libraries.DataAccess.Entities.ManufacturerBase)">
            <summary>
            Initializes a new instance of the ManufacturerKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ManufacturerKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ManufacturerKey.ManufacturerID">
            <summary>
            Gets or sets the ManufacturerID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn">
            <summary>
            Enumerate the Manufacturer columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.ManufacturerID">
            <summary>
            ManufacturerID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ManufacturerColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn)">
            <summary>
             Initalizes a new Instance of the DiscountTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the DiscountTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeEventArgs.Column">
            <summary>
             The DiscountTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeEventHandler">
            <summary>
             Define a delegate for all DiscountType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase">
            <summary>
             An object representation of the 'ZNodeDiscountType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.#ctor(System.Int32,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase"/> instance.
            </summary>
            <param name="discountTypeDiscountTypeID"></param>
            <param name="discountTypeDiscountTypeName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.CreateDiscountType(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> instance.
            </summary>
            <param name="discountTypeDiscountTypeID"></param>
            <param name="discountTypeDiscountTypeName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Copy">
            <summary>
              Returns a Typed DiscountType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DeepCopy">
            <summary>
              Returns a Typed DiscountType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.DiscountTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.DiscountTypeBase,ZNode.Libraries.DataAccess.Entities.DiscountTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeID">
            <summary>
            	Gets or sets the DiscountTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.OriginalDiscountTypeID">
            <summary>
            	Get the original value of the DiscountTypeID property.
            	
            </summary>
            <remarks>This is the original value of the DiscountTypeID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeName">
            <summary>
            	Gets or sets the DiscountTypeName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.CouponCollection">
            <summary>
            Holds a collection of Coupon objects
            which are related to this object through the relation FK_ZNodeCoupon_ZNodeDiscountType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeDiscountType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeEntityData.DiscountTypeID">
            <summary>			
            DiscountTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeDiscountType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeEntityData.OriginalDiscountTypeID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeEntityData.DiscountTypeName">
            <summary>
            DiscountTypeName : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeBase.DiscountTypeEntityData.CouponCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation couponDiscountTypeID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DiscountTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.DiscountType,ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> to compare.</param>
            <param name="b">The second <c>DiscountType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.DiscountType,ZNode.Libraries.DataAccess.Entities.DiscountType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.#ctor">
            <summary>
            Initializes a new instance of the DiscountTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTypeBase)">
            <summary>
            Initializes a new instance of the DiscountTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DiscountTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTypeKey.DiscountTypeID">
            <summary>
            Gets or sets the DiscountTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn">
            <summary>
            Enumerate the DiscountType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn.DiscountTypeID">
            <summary>
            DiscountTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTypeColumn.DiscountTypeName">
            <summary>
            DiscountTypeName : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.NoteColumn)">
            <summary>
             Initalizes a new Instance of the NoteEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.NoteColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the NoteEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteEventArgs.Column">
            <summary>
             The NoteColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.NoteColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteEventHandler">
            <summary>
             Define a delegate for all Note related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteBase">
            <summary>
             An object representation of the 'ZNodeNote' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.DateTime,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteBase"/> instance.
            </summary>
            <param name="noteCaseID"></param>
            <param name="noteAccountID"></param>
            <param name="noteNoteTitle"></param>
            <param name="noteNoteBody"></param>
            <param name="noteCreateDte"></param>
            <param name="noteCreateUser"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.CreateNote(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> instance.
            </summary>
            <param name="noteCaseID"></param>
            <param name="noteAccountID"></param>
            <param name="noteNoteTitle"></param>
            <param name="noteNoteBody"></param>
            <param name="noteCreateDte"></param>
            <param name="noteCreateUser"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.NoteColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.NoteBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.NoteColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.NoteBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.NoteColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.NoteBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.NoteColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.NoteBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.Copy">
            <summary>
              Returns a Typed Note Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.DeepCopy">
            <summary>
              Returns a Typed Note Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.Equals(ZNode.Libraries.DataAccess.Entities.NoteBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.Equals(ZNode.Libraries.DataAccess.Entities.NoteBase,ZNode.Libraries.DataAccess.Entities.NoteBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.NoteBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.NoteBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.NoteBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteID">
            <summary>
            	Gets or sets the NoteID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.CaseID">
            <summary>
            	Gets or sets the CaseID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsCaseIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.AccountID">
            <summary>
            	Gets or sets the AccountID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsAccountIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteTitle">
            <summary>
            	Gets or sets the NoteTitle property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteBody">
            <summary>
            	Gets or sets the NoteBody property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.CreateDte">
            <summary>
            	Gets or sets the CreateDte property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.CreateUser">
            <summary>
            	Gets or sets the CreateUser property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.AccountIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/>.
            </summary>
            <value>The source Account for AccountID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.CaseIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Case"/>.
            </summary>
            <value>The source Case for CaseID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.NoteBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.NoteBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData">
            <summary>
            	The data structure representation of the 'ZNodeNote' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.NoteID">
            <summary>			
            NoteID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeNote"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.CaseID">
            <summary>
            CaseID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.NoteTitle">
            <summary>
            NoteTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.NoteBody">
            <summary>
            NoteBody : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.CreateDte">
            <summary>
            CreateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteBase.NoteEntityData.CreateUser">
            <summary>
            CreateUser : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NoteComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteComparer.#ctor(ZNode.Libraries.DataAccess.Entities.NoteColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteComparer.Equals(ZNode.Libraries.DataAccess.Entities.Note,ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> to compare.</param>
            <param name="b">The second <c>Note</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteComparer.Compare(ZNode.Libraries.DataAccess.Entities.Note,ZNode.Libraries.DataAccess.Entities.Note)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteKey.#ctor">
            <summary>
            Initializes a new instance of the NoteKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteKey.#ctor(ZNode.Libraries.DataAccess.Entities.NoteBase)">
            <summary>
            Initializes a new instance of the NoteKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the NoteKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.NoteKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.NoteKey.NoteID">
            <summary>
            Gets or sets the NoteID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.NoteColumn">
            <summary>
            Enumerate the Note columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.NoteID">
            <summary>
            NoteID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.CaseID">
            <summary>
            CaseID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.NoteTitle">
            <summary>
            NoteTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.NoteBody">
            <summary>
            NoteBody : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.CreateDte">
            <summary>
            CreateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.NoteColumn.CreateUser">
            <summary>
            CreateUser : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision">
            <summary>
             An object representation of the 'ZNodeContentPageRevision' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase">
            <summary>
             An object representation of the 'ZNodeContentPageRevision' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.#ctor(System.Int32,System.DateTime,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase"/> instance.
            </summary>
            <param name="contentPageRevisionContentPageID"></param>
            <param name="contentPageRevisionUpdateDate"></param>
            <param name="contentPageRevisionUpdateUser"></param>
            <param name="contentPageRevisionDescription"></param>
            <param name="contentPageRevisionHtmlText"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.CreateContentPageRevision(System.Int32,System.DateTime,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> instance.
            </summary>
            <param name="contentPageRevisionContentPageID"></param>
            <param name="contentPageRevisionUpdateDate"></param>
            <param name="contentPageRevisionUpdateUser"></param>
            <param name="contentPageRevisionDescription"></param>
            <param name="contentPageRevisionHtmlText"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Copy">
            <summary>
              Returns a Typed ContentPageRevision Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.DeepCopy">
            <summary>
              Returns a Typed ContentPageRevision Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Equals(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Equals(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase,ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.RevisionID">
            <summary>
            	Gets or sets the RevisionID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageID">
            <summary>
            	Gets or sets the ContentPageID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.UpdateDate">
            <summary>
            	Gets or sets the UpdateDate property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.UpdateUser">
            <summary>
            	Gets or sets the UpdateUser property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.HtmlText">
            <summary>
            	Gets or sets the HtmlText property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/>.
            </summary>
            <value>The source ContentPage for ContentPageID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData">
            <summary>
            	The data structure representation of the 'ZNodeContentPageRevision' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData.RevisionID">
            <summary>			
            RevisionID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeContentPageRevision"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData.ContentPageID">
            <summary>
            ContentPageID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData.UpdateDate">
            <summary>
            UpdateDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData.UpdateUser">
            <summary>
            UpdateUser : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase.ContentPageRevisionEntityData.HtmlText">
            <summary>
            HtmlText : 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevision.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute">
            <summary>
             An object representation of the 'ZNodeProductTypeAttribute' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase">
            <summary>
             An object representation of the 'ZNodeProductTypeAttribute' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase"/> instance.
            </summary>
            <param name="productTypeAttributeProductTypeId"></param>
            <param name="productTypeAttributeAttributeTypeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.CreateProductTypeAttribute(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> instance.
            </summary>
            <param name="productTypeAttributeProductTypeId"></param>
            <param name="productTypeAttributeAttributeTypeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Copy">
            <summary>
              Returns a Typed ProductTypeAttribute Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.DeepCopy">
            <summary>
              Returns a Typed ProductTypeAttribute Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase,ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductAttributeTypeID">
            <summary>
            	Gets or sets the ProductAttributeTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductTypeId">
            <summary>
            	Gets or sets the ProductTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.AttributeTypeId">
            <summary>
            	Gets or sets the AttributeTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductTypeIdSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/>.
            </summary>
            <value>The source ProductType for ProductTypeId.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductTypeAttributeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductTypeAttribute' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductTypeAttributeEntityData.ProductAttributeTypeID">
            <summary>			
            ProductAttributeTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductTypeAttribute"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductTypeAttributeEntityData.ProductTypeId">
            <summary>
            ProductTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase.ProductTypeAttributeEntityData.AttributeTypeId">
            <summary>
            AttributeTypeId : 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule">
            <summary>
            Object representing a broken validation rule
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule.#ctor">
            <summary>
            Default parameterless constructor used by Reflection for Soap Serialization
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule.#ctor(ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo)">
            <summary>
            Creates a instance of the object.
            </summary>
            <param name="rule"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo"/> containing the details about the rule that was broken.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule.RuleName">
            <summary>
            Provides access to the name of the broken rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule.Description">
            <summary>
            The description of the broken rule.
            </summary>
            <value>The description of the rule.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule.Property">
            <summary>
            The name of the property affected by the broken rule.
            </summary>
            <value>The property affected by the rule.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderState">
            <summary>
             An object representation of the 'ZNodeOrderState' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase">
            <summary>
             An object representation of the 'ZNodeOrderState' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.#ctor(System.Int32,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase"/> instance.
            </summary>
            <param name="orderStateOrderStateID"></param>
            <param name="orderStateOrderStateName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.CreateOrderState(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> instance.
            </summary>
            <param name="orderStateOrderStateID"></param>
            <param name="orderStateOrderStateName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderStateColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderStateColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderStateColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderStateColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Copy">
            <summary>
              Returns a Typed OrderState Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.DeepCopy">
            <summary>
              Returns a Typed OrderState Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderStateBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderStateBase,ZNode.Libraries.DataAccess.Entities.OrderStateBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateID">
            <summary>
            	Gets or sets the OrderStateID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OriginalOrderStateID">
            <summary>
            	Get the original value of the OrderStateID property.
            	
            </summary>
            <remarks>This is the original value of the OrderStateID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateName">
            <summary>
            	Gets or sets the OrderStateName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderCollection">
            <summary>
            Holds a collection of Order objects
            which are related to this object through the relation SC_OrderState_SC_Order_FK1
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderStateBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateEntityData">
            <summary>
            	The data structure representation of the 'ZNodeOrderState' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateEntityData.OrderStateID">
            <summary>			
            OrderStateID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeOrderState"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateEntityData.OriginalOrderStateID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateEntityData.OrderStateName">
            <summary>
            OrderStateName : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateBase.OrderStateEntityData.OrderCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderOrderStateID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderState.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Case">
            <summary>
             An object representation of the 'ZNodeCase' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseBase">
            <summary>
             An object representation of the 'ZNodeCase' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.#ctor(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseBase"/> instance.
            </summary>
            <param name="casePortalID"></param>
            <param name="caseAccountID"></param>
            <param name="caseOwnerAccountID"></param>
            <param name="caseCaseStatusID"></param>
            <param name="caseCasePriorityID"></param>
            <param name="caseCaseTypeID"></param>
            <param name="caseCaseOrigin"></param>
            <param name="caseTitle"></param>
            <param name="caseDescription"></param>
            <param name="caseFirstName"></param>
            <param name="caseLastName"></param>
            <param name="caseCompanyName"></param>
            <param name="caseEmailID"></param>
            <param name="casePhoneNumber"></param>
            <param name="caseCreateDte"></param>
            <param name="caseCreateUser"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.CreateCase(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Case"/> instance.
            </summary>
            <param name="casePortalID"></param>
            <param name="caseAccountID"></param>
            <param name="caseOwnerAccountID"></param>
            <param name="caseCaseStatusID"></param>
            <param name="caseCasePriorityID"></param>
            <param name="caseCaseTypeID"></param>
            <param name="caseCaseOrigin"></param>
            <param name="caseTitle"></param>
            <param name="caseDescription"></param>
            <param name="caseFirstName"></param>
            <param name="caseLastName"></param>
            <param name="caseCompanyName"></param>
            <param name="caseEmailID"></param>
            <param name="casePhoneNumber"></param>
            <param name="caseCreateDte"></param>
            <param name="caseCreateUser"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CaseColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CaseColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CaseColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CaseColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.Copy">
            <summary>
              Returns a Typed Case Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.DeepCopy">
            <summary>
              Returns a Typed Case Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.Equals(ZNode.Libraries.DataAccess.Entities.CaseBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.Equals(ZNode.Libraries.DataAccess.Entities.CaseBase,ZNode.Libraries.DataAccess.Entities.CaseBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseID">
            <summary>
            	Gets or sets the CaseID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.AccountID">
            <summary>
            	Gets or sets the AccountID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsAccountIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.OwnerAccountID">
            <summary>
            	Gets or sets the OwnerAccountID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsOwnerAccountIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseStatusID">
            <summary>
            	Gets or sets the CaseStatusID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CasePriorityID">
            <summary>
            	Gets or sets the CasePriorityID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseTypeID">
            <summary>
            	Gets or sets the CaseTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseOrigin">
            <summary>
            	Gets or sets the CaseOrigin property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.Title">
            <summary>
            	Gets or sets the Title property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.FirstName">
            <summary>
            	Gets or sets the FirstName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.LastName">
            <summary>
            	Gets or sets the LastName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CompanyName">
            <summary>
            	Gets or sets the CompanyName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.EmailID">
            <summary>
            	Gets or sets the EmailID property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.PhoneNumber">
            <summary>
            	Gets or sets the PhoneNumber property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CreateDte">
            <summary>
            	Gets or sets the CreateDte property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CreateUser">
            <summary>
            	Gets or sets the CreateUser property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.AccountIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/>.
            </summary>
            <value>The source Account for AccountID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.OwnerAccountIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/>.
            </summary>
            <value>The source Account for OwnerAccountID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/>.
            </summary>
            <value>The source CaseType for CaseTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseStatusIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseStatus"/>.
            </summary>
            <value>The source CaseStatus for CaseStatusID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CasePriorityIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/>.
            </summary>
            <value>The source CasePriority for CasePriorityID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.NoteCollection">
            <summary>
            Holds a collection of Note objects
            which are related to this object through the relation FK_SC_Note_SC_Case
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCase' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CaseID">
            <summary>			
            CaseID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCase"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.OwnerAccountID">
            <summary>
            OwnerAccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CaseStatusID">
            <summary>
            CaseStatusID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CasePriorityID">
            <summary>
            CasePriorityID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CaseTypeID">
            <summary>
            CaseTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CaseOrigin">
            <summary>
            CaseOrigin : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.FirstName">
            <summary>
            FirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.LastName">
            <summary>
            LastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CompanyName">
            <summary>
            CompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.EmailID">
            <summary>
            EmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.PhoneNumber">
            <summary>
            PhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CreateDte">
            <summary>
            CreateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.CreateUser">
            <summary>
            CreateUser : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseBase.CaseEntityData.NoteCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation noteCaseID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Case.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Case"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Category">
            <summary>
             An object representation of the 'ZNodeCategory' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryBase">
            <summary>
             An object representation of the 'ZNodeCategory' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryBase"/> instance.
            </summary>
            <param name="categoryPortalID"></param>
            <param name="categoryName"></param>
            <param name="categoryTitle"></param>
            <param name="categoryShortDescription"></param>
            <param name="categoryDescription"></param>
            <param name="categoryParentCategoryID"></param>
            <param name="categoryDisplayOrder"></param>
            <param name="categoryImageFile"></param>
            <param name="categoryVisibleInd"></param>
            <param name="categorySubCategoryGridVisibleInd"></param>
            <param name="categorySEOTitle"></param>
            <param name="categorySEOKeywords"></param>
            <param name="categorySEODescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.CreateCategory(System.Int32,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> instance.
            </summary>
            <param name="categoryPortalID"></param>
            <param name="categoryName"></param>
            <param name="categoryTitle"></param>
            <param name="categoryShortDescription"></param>
            <param name="categoryDescription"></param>
            <param name="categoryParentCategoryID"></param>
            <param name="categoryDisplayOrder"></param>
            <param name="categoryImageFile"></param>
            <param name="categoryVisibleInd"></param>
            <param name="categorySubCategoryGridVisibleInd"></param>
            <param name="categorySEOTitle"></param>
            <param name="categorySEOKeywords"></param>
            <param name="categorySEODescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CategoryColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CategoryColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CategoryColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CategoryColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.Copy">
            <summary>
              Returns a Typed Category Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.DeepCopy">
            <summary>
              Returns a Typed Category Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.Equals(ZNode.Libraries.DataAccess.Entities.CategoryBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.Equals(ZNode.Libraries.DataAccess.Entities.CategoryBase,ZNode.Libraries.DataAccess.Entities.CategoryBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CategoryBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryID">
            <summary>
            	Gets or sets the CategoryID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.Title">
            <summary>
            	Gets or sets the Title property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.ShortDescription">
            <summary>
            	Gets or sets the ShortDescription property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.ParentCategoryID">
            <summary>
            	Gets or sets the ParentCategoryID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsParentCategoryIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.ImageFile">
            <summary>
            	Gets or sets the ImageFile property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.VisibleInd">
            <summary>
            	Gets or sets the VisibleInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.SubCategoryGridVisibleInd">
            <summary>
            	Gets or sets the SubCategoryGridVisibleInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.SEOTitle">
            <summary>
            	Gets or sets the SEOTitle property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.SEOKeywords">
            <summary>
            	Gets or sets the SEOKeywords property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.SEODescription">
            <summary>
            	Gets or sets the SEODescription property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.ParentCategoryIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/>.
            </summary>
            <value>The source Category for ParentCategoryID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.ProductCategoryCollection">
            <summary>
            Holds a collection of ProductCategory objects
            which are related to this object through the relation FK_SC_ProductCategory_SC_Category
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryCollection">
            <summary>
            Holds a collection of Category objects
            which are related to this object through the relation FK_SC_Category_SC_Category
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CategoryBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCategory' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.CategoryID">
            <summary>			
            CategoryID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCategory"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.ShortDescription">
            <summary>
            ShortDescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.ParentCategoryID">
            <summary>
            ParentCategoryID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.VisibleInd">
            <summary>
            VisibleInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.SubCategoryGridVisibleInd">
            <summary>
            SubCategoryGridVisibleInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.SEOTitle">
            <summary>
            SEOTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.SEOKeywords">
            <summary>
            SEOKeywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.SEODescription">
            <summary>
            SEODescription : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.ProductCategoryCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productCategoryCategoryID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryBase.CategoryEntityData.CategoryCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation categoryParentCategoryID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Category.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn)">
            <summary>
             Initalizes a new Instance of the ContentPageRevisionEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ContentPageRevisionEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionEventArgs.Column">
            <summary>
             The ContentPageRevisionColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionEventHandler">
            <summary>
             Define a delegate for all ContentPageRevision related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ContentPageRevisionComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer.Equals(ZNode.Libraries.DataAccess.Entities.ContentPageRevision,ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> to compare.</param>
            <param name="b">The second <c>ContentPageRevision</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer.Compare(ZNode.Libraries.DataAccess.Entities.ContentPageRevision,ZNode.Libraries.DataAccess.Entities.ContentPageRevision)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevision"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.#ctor">
            <summary>
            Initializes a new instance of the ContentPageRevisionKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageRevisionBase)">
            <summary>
            Initializes a new instance of the ContentPageRevisionKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ContentPageRevisionKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionKey.RevisionID">
            <summary>
            Gets or sets the RevisionID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn">
            <summary>
            Enumerate the ContentPageRevision columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn.RevisionID">
            <summary>
            RevisionID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn.ContentPageID">
            <summary>
            ContentPageID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn.UpdateDate">
            <summary>
            UpdateDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn.UpdateUser">
            <summary>
            UpdateUser : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageRevisionColumn.HtmlText">
            <summary>
            HtmlText : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn)">
            <summary>
             Initalizes a new Instance of the ShippingRuleTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ShippingRuleTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeEventArgs.Column">
            <summary>
             The ShippingRuleTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeEventHandler">
            <summary>
             Define a delegate for all ShippingRuleType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase">
            <summary>
             An object representation of the 'ZNodeShippingRuleType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.#ctor(System.Int32,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase"/> instance.
            </summary>
            <param name="shippingRuleTypeShippingRuleTypeID"></param>
            <param name="shippingRuleTypeName"></param>
            <param name="shippingRuleTypeDescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.CreateShippingRuleType(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> instance.
            </summary>
            <param name="shippingRuleTypeShippingRuleTypeID"></param>
            <param name="shippingRuleTypeName"></param>
            <param name="shippingRuleTypeDescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Copy">
            <summary>
              Returns a Typed ShippingRuleType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.DeepCopy">
            <summary>
              Returns a Typed ShippingRuleType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase,ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeID">
            <summary>
            	Gets or sets the ShippingRuleTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.OriginalShippingRuleTypeID">
            <summary>
            	Get the original value of the ShippingRuleTypeID property.
            	
            </summary>
            <remarks>This is the original value of the ShippingRuleTypeID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleCollection">
            <summary>
            Holds a collection of ShippingRule objects
            which are related to this object through the relation FK_SC_ShippingRule_SC_ShippingRuleType
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ProductCollection">
            <summary>
            Holds a collection of Product objects
            which are related to this object through the relation FK_SC_Product_SC_ShippingRuleType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeShippingRuleType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData.ShippingRuleTypeID">
            <summary>			
            ShippingRuleTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeShippingRuleType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData.OriginalShippingRuleTypeID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData.ShippingRuleCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation shippingRuleShippingRuleTypeID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase.ShippingRuleTypeEntityData.ProductCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productShippingRuleTypeID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ShippingRuleTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.ShippingRuleType,ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> to compare.</param>
            <param name="b">The second <c>ShippingRuleType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.ShippingRuleType,ZNode.Libraries.DataAccess.Entities.ShippingRuleType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeBase)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ShippingRuleTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeKey.ShippingRuleTypeID">
            <summary>
            Gets or sets the ShippingRuleTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn">
            <summary>
            Enumerate the ShippingRuleType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn.ShippingRuleTypeID">
            <summary>
            ShippingRuleTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleTypeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute">
            <summary>
             An object representation of the 'ZNodeSKUAttribute' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase">
            <summary>
             An object representation of the 'ZNodeSKUAttribute' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase"/> instance.
            </summary>
            <param name="sKUAttributeSKUID"></param>
            <param name="sKUAttributeAttributeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.CreateSKUAttribute(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> instance.
            </summary>
            <param name="sKUAttributeSKUID"></param>
            <param name="sKUAttributeAttributeId"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Copy">
            <summary>
              Returns a Typed SKUAttribute Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.DeepCopy">
            <summary>
              Returns a Typed SKUAttribute Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Equals(ZNode.Libraries.DataAccess.Entities.SKUAttributeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Equals(ZNode.Libraries.DataAccess.Entities.SKUAttributeBase,ZNode.Libraries.DataAccess.Entities.SKUAttributeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUAttributeID">
            <summary>
            	Gets or sets the SKUAttributeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUID">
            <summary>
            	Gets or sets the SKUID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.AttributeId">
            <summary>
            	Gets or sets the AttributeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.AttributeIdSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/>.
            </summary>
            <value>The source ProductAttribute for AttributeId.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/>.
            </summary>
            <value>The source SKU for SKUID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUAttributeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeSKUAttribute' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUAttributeEntityData.SKUAttributeID">
            <summary>			
            SKUAttributeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeSKUAttribute"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUAttributeEntityData.SKUID">
            <summary>
            SKUID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeBase.SKUAttributeEntityData.AttributeId">
            <summary>
            AttributeId : 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttribute.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn)">
            <summary>
             Initalizes a new Instance of the PaymentTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the PaymentTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeEventArgs.Column">
            <summary>
             The PaymentTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeEventHandler">
            <summary>
             Define a delegate for all PaymentType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase">
            <summary>
             An object representation of the 'ZNodePaymentType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.#ctor(System.String,System.String,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase"/> instance.
            </summary>
            <param name="paymentTypeName"></param>
            <param name="paymentTypeDescription"></param>
            <param name="paymentTypeActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.CreatePaymentType(System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> instance.
            </summary>
            <param name="paymentTypeName"></param>
            <param name="paymentTypeDescription"></param>
            <param name="paymentTypeActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Copy">
            <summary>
              Returns a Typed PaymentType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.DeepCopy">
            <summary>
              Returns a Typed PaymentType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.PaymentTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.PaymentTypeBase,ZNode.Libraries.DataAccess.Entities.PaymentTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeID">
            <summary>
            	Gets or sets the PaymentTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentSettingCollection">
            <summary>
            Holds a collection of PaymentSetting objects
            which are related to this object through the relation FK_SC_PaymentSetting_SC_PaymentType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodePaymentType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeEntityData.PaymentTypeID">
            <summary>			
            PaymentTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodePaymentType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeBase.PaymentTypeEntityData.PaymentSettingCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation paymentSettingPaymentTypeID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PaymentTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.PaymentType,ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> to compare.</param>
            <param name="b">The second <c>PaymentType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.PaymentType,ZNode.Libraries.DataAccess.Entities.PaymentType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.#ctor">
            <summary>
            Initializes a new instance of the PaymentTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentTypeBase)">
            <summary>
            Initializes a new instance of the PaymentTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PaymentTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentTypeKey.PaymentTypeID">
            <summary>
            Gets or sets the PaymentTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn">
            <summary>
            Enumerate the PaymentType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn.PaymentTypeID">
            <summary>
            PaymentTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules">
            <summary>
            Maintains the list of validation rules associated with an object
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules._brokenRules">
            <summary>
            List of rules that have not passed validation
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules._target">
            <summary>
            Object associated with this list of rules.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.#ctor(System.Object)">
            <summary>
            Creates an instance of the class and associates the target.
            </summary>
            <param name="businessEntity">Target</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.GetPropertyRules(System.String)">
            <summary>
            Returns a list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo"/> objects for a specified property.
            </summary>
            <param name="propertyName">The name of the property to get the rules for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing all of the rules for the specified property.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.AddRule(ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler,System.String)">
            <summary>
            Adds a rule to the list of validated rules.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler"/> delegate.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The name of the property on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.AddRule(ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Adds a rule to the list of validated rules.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler"/> delegate.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.ValidateRuleList(System.Collections.Generic.List{ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo})">
            <summary>
            Validates a list of rules.
            </summary>
            <remarks>
            This method calls the Invoke method on each rule in the list.  If the rule fails, it 
            is added to the <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.BrokenRulesList"/>
            </remarks>
            <param name="ruleList">List of rules to validate.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.ValidateRules(System.String)">
            <summary>
            Validates all rules for a property
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.ValidateRules">
            <summary>
            Validate all the rules for all properties.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.GetBrokenRules">
            <summary>
            Return a <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.BrokenRulesList"/> that contains all of the invalid rules.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.Clear">
            <summary>
            	Clear the rules list.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.Target">
            <summary>
            Object associated with this list of rules.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.BrokenRulesList">
            <summary>
            List of <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule"/> objects
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.RulesList">
            <summary>
            Read-only list of validation rules
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.IsValid">
            <summary>
            Returns a value indicateing whether the <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRules.Target"/> object is valid.
            </summary>
            <remarks>If one or more rules are broken, the object is assumed to be invalid and 
            false is return.  Otherwise, True is returned.
            </remarks>
            <returns>A value indicating whether any rules are broken.</returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Expressions">
            <summary>
            Hold a list of <see cref="T:ZNode.Libraries.DataAccess.Entities.Expression"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expressions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Expressions</c> class.
            </summary>
            <param name="holeFilterExpression">the filter expression that will be parsed to create the collection.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expressions.#ctor">
            <summary>
            Initializes a new instance of the <c>Expressions</c> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expressions.SplitFilter(System.String)">
            <summary>
            This method split a string filter expression anc create <c>Filter</c> instances.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expressions.Item(System.Int32)">
            <summary>
            Get the <see cref="T:ZNode.Libraries.DataAccess.Entities.Expression"/> at the specified index.
            </summary>
            <param name="Index">The index of the expression in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expressions.Add(ZNode.Libraries.DataAccess.Entities.Expression)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expressions.Remove(ZNode.Libraries.DataAccess.Entities.Expression)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Expression">
            <summary>
             Reprensents an expression to filter a collection.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Expression"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expression.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Expression"/> class.
            </summary>
            <param name="PropValue">The prop value.</param>
            <param name="Opr">The opr.</param>
            <param name="Usrvalue">The usrvalue.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Expression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.Expression"/> class.
            </summary>
            <param name="wholeExpression">The whole expression.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Expression.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Expression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Expression.UserValue">
            <summary>
            Gets or sets the user value.
            </summary>
            <value>The user value.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Filter`2">
            <summary>
            Represents a filter.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Filter&lt;T, Entity&gt;"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Filter&lt;T, Entity&gt;"/> class.
            </summary>
            <param name="objToFilter">The obj to filter.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.String,System.String,System.String)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Int32,System.String,System.Int32)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Decimal,System.String,System.Int32)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Guid,System.String,System.Guid)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Double,System.String,System.Double)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Int64,System.String,System.Int64)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Decimal,System.String,System.Decimal)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.DateTime,System.String,System.DateTime)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Boolean,System.String,System.Boolean)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">if set to <c>true</c> [object property value].</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">if set to <c>true</c> [user value].</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.String,System.Object)">
            <summary>
            Determines whether the specified operator is ok.
            </summary>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified operator is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.CorrectUserValue(System.String)">
            <summary>
            Corrects the user value.
            </summary>
            <param name="UserValue">The user value.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.IsOk(System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified object property value is ok.
            </summary>
            <param name="ObjectPropertyValue">The object property value.</param>
            <param name="Operator">The operator.</param>
            <param name="UserValue">The user value.</param>
            <returns>
            	<c>true</c> if the specified object property value is ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Filter`2.ApplyFilter(`0,System.String)">
            <summary>
            Applies the filter.
            </summary>
            <param name="ObjectToFilter">The object to filter.</param>
            <param name="StrFilter">The STR filter.</param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TList`1">
            <summary>
            Represents a strongly typed list of .netTiers table entity that can be accessed by index. 
            Provides methods to search, sort, and manipulate lists.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TList{T}"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:TList{T}"/> class based on another list.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.RemoveEntity(System.Int32)">
            <summary>
            Removes the entity item at the specified index and places it in the DeletedItems collection.
            If this list were to be persisted, it would delete the entity from the repository.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.RemoveEntity(`0)">
            <summary>
            Removes the entity item and places it in the DeletedItems collection.
            If this list were to be persisted, it would delete the entity from the repository.
            </summary>
            <param name="item">The entity to delete and place in DeletedItems collection.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the specified item in the list at the specified index.
            </summary>
            <param name="index">The zero-based index where the item is to be inserted.</param>
            <param name="item">The item to insert in the list.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.Clone">
            <summary>
             Creates an exact copy of this TList{T} instance.
            </summary>
            <returns>The TList{T} object this method creates, cast as an object.</returns>
            <implements><see cref="M:System.ICloneable.Clone"/></implements>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.Copy">
            <summary>
             Creates an exact copy of this TList{T} object.
            </summary>
            <returns>A new, identical copy of the TList{T}.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.AcceptChanges">
            <summary>
            Accepts the changes made to underlyting entities.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.CopyTo(ZNode.Libraries.DataAccess.Entities.TList{`0})">
            <summary>
            Adds the data in this collection to another collection
            </summary>
            <param name="copyTo"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.ForEach``1(ZNode.Libraries.DataAccess.Entities.TList{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the specified array.
            </summary>
            <param name="list">The list.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets the range
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAll(System.Enum,System.Object)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAll(System.Enum,System.Object,System.Boolean)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAll(System.String,System.Object)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAll(System.String,System.Object,System.Boolean)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the elements to search for.</param>
            <returns>
            A <see cref="T:TList{T}"></see> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:TList{T}"></see>.
            </returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>		
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the <see cref="T:TList{T}"></see> contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the elements to search for.</param>
            <returns>
            true if the <see cref="T:TList{T}"></see> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:TList{T}"></see>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, 1.
            </returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:TList{T}"></see> that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TList{T}"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:TList{T}"></see> that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TList{T}"></see>.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the <see cref="T:TList{T}"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.TList{`0}.FindAllByType,System.Enum,System.Object)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType"/> Type to easily search by</param>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.TList{`0}.FindAllByType,System.Enum,System.Object,System.Boolean)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType"/> Type to easily search by</param>
             <param name="column">Property of the object to search, given as a value of the 'Entity'Columns enum.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.TList{`0}.FindAllByType,System.String,System.Object)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType"/> Type to easily search by</param>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.TList{`0}.FindAllByType,System.String,System.Object,System.Boolean)">
            <summary>
             Finds a collection of <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> objects in the current list matching the search criteria.
            </summary>
             <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType"/> Type to easily search by</param>
             <param name="propertyName">Property of the object to search.</param>
             <param name="value">Value to find.</param>
             <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison (true indicates a case-insensitive comparison).  String properties only.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllBy(ZNode.Libraries.DataAccess.Entities.TList{`0}.FindAllByType,System.ComponentModel.PropertyDescriptor,System.Object,System.Int32,System.Boolean)">
            <summary>
            Searches for the index of the item that has the specified property descriptor with the specified value.
            </summary>
            <param name="findAllByType"><see cref="T:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType"/> Type to easily search by</param>
            <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"> to search for.</see></param>
            <param name="key">The value of <i>property</i> to match.</param>
            <param name="start">The index in the list at which to start the search.</param>
            <param name="ignoreCase">Indicator of whether to perform a case-sensitive or case insensitive search (string properties only).</param>
            <returns>The zero-based index of the item that matches the property descriptor and contains the specified value. </returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.IsDirty">
             <summary>
            		Indicates whether the collection was modified or not, and thus if it needs to be saved.
             </summary>
            <returns>true is the collection needs to be saved; otherwise false.</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.IsNewCount">
             <summary>
            		Returns the number of items that have been marked new in the collection.
             </summary>
            <returns>the number of items that have been marked new in the collection</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.IsDeletedCount">
             <summary>
            		Returns the number of items that have been marked to delete in the collection.
             </summary>
            <returns>the number of items that have been marked for deletation in the collection</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.IsDirtyCount">
             <summary>
            		Returns the number of items that have been marked as modified in the collection.
             </summary>
            <returns>the number of items that have been marked as modified in the collection</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.IsValid">
            <summary>
            Returns whether all items contained in the list.
            </summary>
            <value>True if all items are valid; otherwise False.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.InvalidItems">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> object of invalid items.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TList`1.DeletedItems">
            <summary>
            Hold a collection of item that we want to delete. they are removed from the main collection, so the databinding is working.
            </summary>
            <remark>The save method will loop on this collection to delete item from the datasource.</remark>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType">
            <summary>
             Used to by FindAllBy method to all for easy searching.
             </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType.StartsWith">
            <summary>
            Starts with Value in List
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType.EndsWith">
            <summary>
            Ends with Value in List
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TList`1.FindAllByType.Contains">
            <summary>
            Contains Value in List
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn)">
            <summary>
             Initalizes a new Instance of the AttributeTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the AttributeTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeEventArgs.Column">
            <summary>
             The AttributeTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeEventHandler">
            <summary>
             Define a delegate for all AttributeType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase">
            <summary>
             An object representation of the 'ZNodeAttributeType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.#ctor(System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase"/> instance.
            </summary>
            <param name="attributeTypePortalId"></param>
            <param name="attributeTypeName"></param>
            <param name="attributeTypeDescription"></param>
            <param name="attributeTypeDisplayOrder"></param>
            <param name="attributeTypeIsPrivate"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.CreateAttributeType(System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> instance.
            </summary>
            <param name="attributeTypePortalId"></param>
            <param name="attributeTypeName"></param>
            <param name="attributeTypeDescription"></param>
            <param name="attributeTypeDisplayOrder"></param>
            <param name="attributeTypeIsPrivate"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Copy">
            <summary>
              Returns a Typed AttributeType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.DeepCopy">
            <summary>
              Returns a Typed AttributeType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.AttributeTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.AttributeTypeBase,ZNode.Libraries.DataAccess.Entities.AttributeTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeId">
            <summary>
            	Gets or sets the AttributeTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.PortalId">
            <summary>
            	Gets or sets the PortalId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.IsPrivate">
            <summary>
            	Gets or sets the IsPrivate property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeAttributeType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData.AttributeTypeId">
            <summary>			
            AttributeTypeId : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeAttributeType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeBase.AttributeTypeEntityData.IsPrivate">
            <summary>
            IsPrivate : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AttributeTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.AttributeType,ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> to compare.</param>
            <param name="b">The second <c>AttributeType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.AttributeType,ZNode.Libraries.DataAccess.Entities.AttributeType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.#ctor">
            <summary>
            Initializes a new instance of the AttributeTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.AttributeTypeBase)">
            <summary>
            Initializes a new instance of the AttributeTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AttributeTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AttributeTypeKey.AttributeTypeId">
            <summary>
            Gets or sets the AttributeTypeId property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn">
            <summary>
            Enumerate the AttributeType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn.AttributeTypeId">
            <summary>
            AttributeTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AttributeTypeColumn.IsPrivate">
            <summary>
            IsPrivate : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriority">
            <summary>
             An object representation of the 'ZNodeCasePriority' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase">
            <summary>
             An object representation of the 'ZNodeCasePriority' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase"/> instance.
            </summary>
            <param name="casePriorityCasePriorityID"></param>
            <param name="casePriorityCasePriorityNme"></param>
            <param name="casePriorityViewOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CreateCasePriority(System.Int32,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> instance.
            </summary>
            <param name="casePriorityCasePriorityID"></param>
            <param name="casePriorityCasePriorityNme"></param>
            <param name="casePriorityViewOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Copy">
            <summary>
              Returns a Typed CasePriority Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.DeepCopy">
            <summary>
              Returns a Typed CasePriority Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Equals(ZNode.Libraries.DataAccess.Entities.CasePriorityBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Equals(ZNode.Libraries.DataAccess.Entities.CasePriorityBase,ZNode.Libraries.DataAccess.Entities.CasePriorityBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityID">
            <summary>
            	Gets or sets the CasePriorityID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.OriginalCasePriorityID">
            <summary>
            	Get the original value of the CasePriorityID property.
            	
            </summary>
            <remarks>This is the original value of the CasePriorityID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityNme">
            <summary>
            	Gets or sets the CasePriorityNme property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ViewOrder">
            <summary>
            	Gets or sets the ViewOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CaseCollection">
            <summary>
            Holds a collection of Case objects
            which are related to this object through the relation FK_SC_Case_SC_CasePriority
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCasePriority' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityEntityData.CasePriorityID">
            <summary>			
            CasePriorityID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCasePriority"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityEntityData.OriginalCasePriorityID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityEntityData.CasePriorityNme">
            <summary>
            CasePriorityNme : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityEntityData.ViewOrder">
            <summary>
            ViewOrder : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityBase.CasePriorityEntityData.CaseCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation @caseCasePriorityID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriority.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageColumn)">
            <summary>
             Initalizes a new Instance of the ContentPageEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ContentPageEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageEventArgs.Column">
            <summary>
             The ContentPageColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ContentPageColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageEventHandler">
            <summary>
             Define a delegate for all ContentPage related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ContentPageComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageComparer.Equals(ZNode.Libraries.DataAccess.Entities.ContentPage,ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> to compare.</param>
            <param name="b">The second <c>ContentPage</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageComparer.Compare(ZNode.Libraries.DataAccess.Entities.ContentPage,ZNode.Libraries.DataAccess.Entities.ContentPage)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContentPage"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageKey.#ctor">
            <summary>
            Initializes a new instance of the ContentPageKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageKey.#ctor(ZNode.Libraries.DataAccess.Entities.ContentPageBase)">
            <summary>
            Initializes a new instance of the ContentPageKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ContentPageKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContentPageKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContentPageKey.ContentPageID">
            <summary>
            Gets or sets the ContentPageID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContentPageColumn">
            <summary>
            Enumerate the ContentPage columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.ContentPageID">
            <summary>
            ContentPageID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.SEOTitle">
            <summary>
            SEOTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.SEOMetaKeywords">
            <summary>
            SEOMetaKeywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.SEOMetaDescription">
            <summary>
            SEOMetaDescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.AllowDelete">
            <summary>
            AllowDelete : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.TemplateName">
            <summary>
            TemplateName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.AnalyticsCode">
            <summary>
            AnalyticsCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContentPageColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.SKUColumn)">
            <summary>
             Initalizes a new Instance of the SKUEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.SKUColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the SKUEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUEventArgs.Column">
            <summary>
             The SKUColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.SKUColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUEventHandler">
            <summary>
             Define a delegate for all SKU related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUBase">
            <summary>
             An object representation of the 'ZNodeSKU' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.#ctor(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUBase"/> instance.
            </summary>
            <param name="sKUProductID"></param>
            <param name="skusku"></param>
            <param name="sKUWarehouseNo"></param>
            <param name="sKUNote"></param>
            <param name="sKUQuantityOnHand"></param>
            <param name="sKUReorderLevel"></param>
            <param name="sKUWeightAdditional"></param>
            <param name="sKUSKUPicturePath"></param>
            <param name="sKUDisplayOrder"></param>
            <param name="sKURetailPriceAdditional"></param>
            <param name="sKUWholesalePriceAdditional"></param>
            <param name="sKUActiveInd"></param>
            <param name="sKUCustom1"></param>
            <param name="sKUCustom2"></param>
            <param name="sKUCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.CreateSKU(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="P:ZNode.Libraries.DataAccess.Entities.SKUBase.SKU"/> instance.
            </summary>
            <param name="sKUProductID"></param>
            <param name="skusku"></param>
            <param name="sKUWarehouseNo"></param>
            <param name="sKUNote"></param>
            <param name="sKUQuantityOnHand"></param>
            <param name="sKUReorderLevel"></param>
            <param name="sKUWeightAdditional"></param>
            <param name="sKUSKUPicturePath"></param>
            <param name="sKUDisplayOrder"></param>
            <param name="sKURetailPriceAdditional"></param>
            <param name="sKUWholesalePriceAdditional"></param>
            <param name="sKUActiveInd"></param>
            <param name="sKUCustom1"></param>
            <param name="sKUCustom2"></param>
            <param name="sKUCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.SKUColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.SKUColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.SKUColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.SKUColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.SKUBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.Copy">
            <summary>
              Returns a Typed SKU Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.DeepCopy">
            <summary>
              Returns a Typed SKU Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.Equals(ZNode.Libraries.DataAccess.Entities.SKUBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.Equals(ZNode.Libraries.DataAccess.Entities.SKUBase,ZNode.Libraries.DataAccess.Entities.SKUBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUID">
            <summary>
            	Gets or sets the SKUID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.SKU">
            <summary>
            	Gets or sets the SKU property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.WarehouseNo">
            <summary>
            	Gets or sets the WarehouseNo property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsWarehouseNoNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.Note">
            <summary>
            	Gets or sets the Note property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.QuantityOnHand">
            <summary>
            	Gets or sets the QuantityOnHand property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.ReorderLevel">
            <summary>
            	Gets or sets the ReorderLevel property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsReorderLevelNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.WeightAdditional">
            <summary>
            	Gets or sets the WeightAdditional property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0.0m. It is up to the developer
            to check the value of IsWeightAdditionalNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUPicturePath">
            <summary>
            	Gets or sets the SKUPicturePath property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsDisplayOrderNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.RetailPriceAdditional">
            <summary>
            	Gets or sets the RetailPriceAdditional property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsRetailPriceAdditionalNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.WholesalePriceAdditional">
            <summary>
            	Gets or sets the WholesalePriceAdditional property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsWholesalePriceAdditionalNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.ProductIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/>.
            </summary>
            <value>The source Product for ProductID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUAttributeCollection">
            <summary>
            Holds a collection of SKUAttribute objects
            which are related to this object through the relation FK_SC_SKUAttribute_SC_SKU
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.SKUBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData">
            <summary>
            	The data structure representation of the 'ZNodeSKU' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.SKUID">
            <summary>			
            SKUID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeSKU"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.WarehouseNo">
            <summary>
            WarehouseNo : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.Note">
            <summary>
            Note : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.QuantityOnHand">
            <summary>
            QuantityOnHand : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.ReorderLevel">
            <summary>
            ReorderLevel : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.WeightAdditional">
            <summary>
            WeightAdditional : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.SKUPicturePath">
            <summary>
            SKUPicturePath : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.RetailPriceAdditional">
            <summary>
            RetailPriceAdditional : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.WholesalePriceAdditional">
            <summary>
            WholesalePriceAdditional : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUBase.SKUEntityData.SKUAttributeCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation sKUAttributeSKUID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SKUComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUComparer.#ctor(ZNode.Libraries.DataAccess.Entities.SKUColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUComparer.Equals(ZNode.Libraries.DataAccess.Entities.SKU,ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> to compare.</param>
            <param name="b">The second <c>SKU</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUComparer.Compare(ZNode.Libraries.DataAccess.Entities.SKU,ZNode.Libraries.DataAccess.Entities.SKU)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUKey.#ctor">
            <summary>
            Initializes a new instance of the SKUKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUKey.#ctor(ZNode.Libraries.DataAccess.Entities.SKUBase)">
            <summary>
            Initializes a new instance of the SKUKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SKUKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUKey.SKUID">
            <summary>
            Gets or sets the SKUID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUColumn">
            <summary>
            Enumerate the SKU columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.SKUID">
            <summary>
            SKUID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.WarehouseNo">
            <summary>
            WarehouseNo : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.Note">
            <summary>
            Note : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.QuantityOnHand">
            <summary>
            QuantityOnHand : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.ReorderLevel">
            <summary>
            ReorderLevel : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.WeightAdditional">
            <summary>
            WeightAdditional : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.SKUPicturePath">
            <summary>
            SKUPicturePath : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.RetailPriceAdditional">
            <summary>
            RetailPriceAdditional : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.WholesalePriceAdditional">
            <summary>
            WholesalePriceAdditional : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Profile">
            <summary>
             An object representation of the 'ZNodeProfile' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileBase">
            <summary>
             An object representation of the 'ZNodeProfile' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileBase"/> instance.
            </summary>
            <param name="profilePortalID"></param>
            <param name="profileName"></param>
            <param name="profileIsDefault"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.CreateProfile(System.Int32,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> instance.
            </summary>
            <param name="profilePortalID"></param>
            <param name="profileName"></param>
            <param name="profileIsDefault"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProfileColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProfileColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProfileColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProfileColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.Copy">
            <summary>
              Returns a Typed Profile Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.DeepCopy">
            <summary>
              Returns a Typed Profile Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.Equals(ZNode.Libraries.DataAccess.Entities.ProfileBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.Equals(ZNode.Libraries.DataAccess.Entities.ProfileBase,ZNode.Libraries.DataAccess.Entities.ProfileBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProfileBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileID">
            <summary>
            	Gets or sets the ProfileID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.IsDefault">
            <summary>
            	Gets or sets the IsDefault property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.PaymentSettingCollection">
            <summary>
            Holds a collection of PaymentSetting objects
            which are related to this object through the relation FK_SC_PaymentSetting_SC_Profile
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.ShippingCollection">
            <summary>
            Holds a collection of Shipping objects
            which are related to this object through the relation FK_SC_Shipping_SC_Profile
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.AccountCollection">
            <summary>
            Holds a collection of Account objects
            which are related to this object through the relation FK_Account_SC_Profile
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProfileBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProfile' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.ProfileID">
            <summary>			
            ProfileID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProfile"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.IsDefault">
            <summary>
            IsDefault : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.PaymentSettingCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation paymentSettingProfileID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.ShippingCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation shippingProfileID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileBase.ProfileEntityData.AccountCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation accountProfileID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Profile.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityUtil">
            <summary>
            Provides common utility methods for interacting with objects.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetNewEntity(System.Type)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="type">The runtime type to instantiate.</param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetNewEntity(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the specified type using the supplied
            constructor parameters values.
            </summary>
            <param name="type">The runtime type to instantiate.</param>
            <param name="args">The constructor parameter values.</param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetConstructor(System.Type)">
            <summary>
            Gets the default constructor for the specified type.
            </summary>
            <param name="type">The runtime type.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetConstructor(System.Type,System.Type[])">
            <summary>
            Gets the constructor for the specified type whose parameters
            match the supplied type array.
            </summary>
            <param name="type">The runtime type.</param>
            <param name="types">An array of constructor parameter types.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetProperty(System.Object,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object representing the property
            belonging to the object having the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object, or null if the object
            instance does not have a property with the specified name.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetProperty(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object representing the property
            belonging to the runtime type having the specified name.
            </summary>
            <param name="type">The runtime type.</param>
            <param name="propertyName">The property name.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object, or null if the runtime
            type does not have a property with the specified name.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetMethod(System.Object,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            belonging to the object having the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="methodName">The method name.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object, or null if the object
            instance does not have a method with the specified name.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetMethod(System.Object,System.String,System.Type[])">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            belonging to the object having the specified name and whose
            parameters match the specified types.
            </summary>
            <param name="item">An object instance.</param>
            <param name="methodName">The method name.</param>
            <param name="types">The parameter types.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object, or null if the object
            instance does not have a method with the specified name.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetMethod(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            belonging to the runtime type having the specified name.
            </summary>
            <param name="type">The runtime type.</param>
            <param name="methodName">The method name.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object, or null if the runtime
            type does not have a method with the specified name.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            belonging to the runtime type having the specified name and whose
            parameters match the specified types.
            </summary>
            <param name="type">The runtime type.</param>
            <param name="methodName">The method name.</param>
            <param name="types">The parameter types.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object, or null if the runtime
            type does not have a method with the specified name.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.InvokeMethod(System.Object,System.String)">
            <summary>
            Invokes the specified method on the object using reflection.
            </summary>
            <param name="entity">An object instance.</param>
            <param name="methodName">The method name.</param>
            <returns>The result of the method invocation.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the specified method on the object using reflection.
            Passes the supplied arguments as method parameters.
            </summary>
            <param name="entity">An object instance.</param>
            <param name="methodName">The method name.</param>
            <param name="args">The method parameters.</param>
            <returns>The result of the method invocation.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.InvokeMethod(System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes the specified method on the object using reflection.
            Passes the supplied arguments as method parameters.
            </summary>
            <param name="entity">An object instance.</param>
            <param name="methodName">The method name.</param>
            <param name="args">The method parameters.</param>
            <param name="types">The method parameter types.</param>
            <returns>The result of the method invocation.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetType(System.String)">
            <summary>
            Gets the System.Type with the specified name.
            </summary>
            <param name="typeName">The name of the type to get.</param>
            <returns>The System.Type with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetTypes(System.Object[])">
            <summary>
            Gets an array of System.Type objects which match the specified objects.
            NOTE: this method will throw an exception if any of the values held
            within the args array are null.
            </summary>
            <param name="args">An array of objects.</param>
            <returns>An array of System.Type objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of the property with the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetPropertyValue(System.Object,System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Gets the value of the property with the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <param name="property">A reference to the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetStaticPropertyValue(System.Type,System.String)">
            <summary>
            Gets the value of the static property with the specified name.
            </summary>
            <param name="type">The runtime type.</param>
            <param name="propertyName">The property name.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetStaticPropertyValue(System.Type,System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Gets the value of the static property with the specified name.
            </summary>
            <param name="type">The runtime type.</param>
            <param name="propertyName">The property name.</param>
            <param name="property">A reference to the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property with the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.SetPropertyValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of the property with the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
            <param name="convertBlankToNull">Boolean indicating whether empty strings should be converted to null values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.SetPropertyValue(System.Object,System.String,System.Object,System.Reflection.PropertyInfo@)">
            <summary>
            Sets the value of the property with the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
            <param name="property">A reference to the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.SetPropertyValue(System.Object,System.String,System.Object,System.Reflection.PropertyInfo@,System.Boolean)">
            <summary>
            Sets the value of the property with the specified name.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
            <param name="property">A reference to the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="convertBlankToNull">Boolean indicating whether empty strings should be converted to null values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.SetEntityKeyValue(System.Object,System.String)">
            <summary>
            Sets the value of the property with the specified name to the value
            returned by the Guid.NewGuid() method.
            </summary>
            <param name="entity">An object instance.</param>
            <param name="entityKeyName">The property name.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.SetEntityValues(System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the properties of the specified entity based on the
            name/value pairs found in the specified collection.
            </summary>
            <param name="entity">The instance of an object to set the properties on.</param>
            <param name="values">An instance of System.Collections.IDictionary containing the name/value pairs.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.InitEntityDateTimeValues(System.Object,System.String[])">
            <summary>
            Initializes the properties specified in propertyNames
            with the value of DateTime.Now for the specified entity.
            </summary>
            <param name="entity">The instance of an object to set the properties on.</param>
            <param name="propertyNames">The list of property names to initialize.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.IsPropertyValueEqual(System.Object,System.String,System.Object)">
            <summary>
            Determines if the property with the specified name equals the specified value.
            </summary>
            <param name="item">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
            <returns>True if the property value matches the specified value; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.ChangeType(System.Object,System.Type)">
            <summary>
            Converts the specified value to the specified type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="conversionType">A System.Type to convert to.</param>
            <returns>The results of the conversion.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.ChangeType(System.Object,System.Type,System.Boolean)">
            <summary>
            Converts the specified value to the specified type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="conversionType">A System.Type to convert to.</param>
            <param name="convertBlankToNull">A value indicating whether to treat
            empty string objects as null values.</param>
            <returns>The results of the conversion.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.ChangeGenericType(System.Object,System.Type)">
            <summary>
            Converts the specified value to the specified generic type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="conversionType">A System.Type to convert to.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.ChangeGenericType(System.Object,System.Type,System.Boolean)">
            <summary>
            Converts the specified value to the specified generic type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="conversionType">A System.Type to convert to.</param>
            <param name="convertBlankToNull">A value indicating whether to treat
            empty string objects as null values.</param>
            <returns>The results of the conversion.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.MakeGenericType(System.Type,System.Type[])">
            <summary>
            Creates a reference to a generic type using the specified type definition
            and the supplied type arguments.
            </summary>
            <param name="typeDefinition">A generic type definition.</param>
            <param name="typeArguments">An array of System.Type arguments.</param>
            <returns>A System.Type representing the generic type.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetNewGenericEntity(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates a new instance of the specified generic type.
            </summary>
            <param name="typeDefinition">A generic type definition.</param>
            <param name="typeArguments">An array of System.Type arguments.</param>
            <param name="args">An array of constructor parameters values.</param>
            <returns>An instance of the generic type.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetNewGenericEntity(System.Type)">
            <summary>
            Creates a new instance of the specified generic type.
            </summary>
            <param name="genericType">The runtime type.</param>
            <returns>An instance of the generic type.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetNewGenericEntity(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the specified generic type.
            </summary>
            <param name="genericType">The runtime type.</param>
            <param name="args">An array of constructor parameters values.</param>
            <returns>An instance of the generic type.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.HasEntities(System.Collections.IList)">
            <summary>
            Gets a value indicating whether the specified list contains any items.
            </summary>
            <param name="entities">A collection of objects.</param>
            <returns>True if the collection is not null and contains at least
            one item; otherwise false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetEntity(System.Collections.IList,System.String,System.Object)">
            <summary>
            Gets the item within entityList whose property value matches the specifed value.
            </summary>
            <param name="entities">A collection of objects.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
            <returns>The object whose property value matches the specified value.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetEntity(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Gets the item within entityList at the position specified by index.
            </summary>
            <param name="entityList">The collection of business objects.</param>
            <param name="index">The position within entityList that contains the current item.</param>
            <returns>The current business object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetEntityList(System.Object,System.String)">
            <summary>
            Gets the value of the property with the specified name and returns
            it as a collection of objects.
            </summary>
            <param name="entity">An object instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>A collection of objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetEntityList(System.Object)">
            <summary>
            Converts the specified object into a collection of objects.
            </summary>
            <param name="entityList">An object instance.</param>
            <returns>A collection of objects.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.Add(System.Collections.IList,System.Object)">
            <summary>
            Adds the specified object to the collection of objects.
            </summary>
            <param name="list">A collection of objects.</param>
            <param name="item">The obejct to add.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.Remove(System.Collections.IList,System.Object)">
            <summary>
            Removes the specified object from the collection of objects.
            </summary>
            <param name="list">A collection of objects.</param>
            <param name="item">The object to remove.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GuidTryParse(System.String,System.Guid@)">
            <summary>
            Converts the string representation of a Guid to its Guid 
            equivalent. A return value indicates whether the operation 
            succeeded. 
            </summary>
            <param name="s">A string containing a Guid to convert.</param>
            <param name="result">
            When this method returns, contains the Guid value equivalent to 
            the Guid contained in <paramref name="s"/>, if the conversion 
            succeeded, or <see cref="F:System.Guid.Empty"/> if the conversion failed. 
            The conversion fails if the <paramref name="s"/> parameter is a 
            <see langword="null"/> reference (<see langword="Nothing"/> in 
            Visual Basic), or is not of the correct format. 
            </param>
            <value>
            <see langword="true"/> if <paramref name="s"/> was converted 
            successfully; otherwise, <see langword="false"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
                   Thrown if <pararef name="s"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityUtil.GetTypeNames(System.Type[])">
            <summary>Outputs a string containing the type names, delimited by ", "</summary>
            <param name="types" type="System.Type[]">
                <para>The types to show.</para>
            </param>
            <returns>A string value...</returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Order">
            <summary>
             An object representation of the 'ZNodeOrder' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderBase">
            <summary>
             An object representation of the 'ZNodeOrder' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderBase"/> instance.
            </summary>
            <param name="orderPortalId"></param>
            <param name="orderAccountID"></param>
            <param name="orderOrderStateID"></param>
            <param name="orderShippingID"></param>
            <param name="orderPaymentTypeId"></param>
            <param name="orderShipFirstName"></param>
            <param name="orderShipLastName"></param>
            <param name="orderShipCompanyName"></param>
            <param name="orderShipStreet"></param>
            <param name="orderShipStreet1"></param>
            <param name="orderShipCity"></param>
            <param name="orderShipStateCode"></param>
            <param name="orderShipPostalCode"></param>
            <param name="orderShipCountry"></param>
            <param name="orderShipPhoneNumber"></param>
            <param name="orderShipEmailID"></param>
            <param name="orderBillingFirstName"></param>
            <param name="orderBillingLastName"></param>
            <param name="orderBillingCompanyName"></param>
            <param name="orderBillingStreet"></param>
            <param name="orderBillingStreet1"></param>
            <param name="orderBillingCity"></param>
            <param name="orderBillingStateCode"></param>
            <param name="orderBillingPostalCode"></param>
            <param name="orderBillingCountry"></param>
            <param name="orderBillingPhoneNumber"></param>
            <param name="orderBillingEmailId"></param>
            <param name="orderCardTransactionID"></param>
            <param name="orderCardTypeId"></param>
            <param name="orderCardEndsIn"></param>
            <param name="orderTaxCost"></param>
            <param name="orderShippingCost"></param>
            <param name="orderSubTotal"></param>
            <param name="orderDiscountAmount"></param>
            <param name="orderTotal"></param>
            <param name="orderCouponID"></param>
            <param name="orderOrderDate"></param>
            <param name="orderCreditCardNumber"></param>
            <param name="orderCreditCardExp"></param>
            <param name="orderCreditCardCVV"></param>
            <param name="orderCustom1"></param>
            <param name="orderCustom2"></param>
            <param name="orderAdditionalInstructions"></param>
            <param name="orderCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.CreateOrder(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> instance.
            </summary>
            <param name="orderPortalId"></param>
            <param name="orderAccountID"></param>
            <param name="orderOrderStateID"></param>
            <param name="orderShippingID"></param>
            <param name="orderPaymentTypeId"></param>
            <param name="orderShipFirstName"></param>
            <param name="orderShipLastName"></param>
            <param name="orderShipCompanyName"></param>
            <param name="orderShipStreet"></param>
            <param name="orderShipStreet1"></param>
            <param name="orderShipCity"></param>
            <param name="orderShipStateCode"></param>
            <param name="orderShipPostalCode"></param>
            <param name="orderShipCountry"></param>
            <param name="orderShipPhoneNumber"></param>
            <param name="orderShipEmailID"></param>
            <param name="orderBillingFirstName"></param>
            <param name="orderBillingLastName"></param>
            <param name="orderBillingCompanyName"></param>
            <param name="orderBillingStreet"></param>
            <param name="orderBillingStreet1"></param>
            <param name="orderBillingCity"></param>
            <param name="orderBillingStateCode"></param>
            <param name="orderBillingPostalCode"></param>
            <param name="orderBillingCountry"></param>
            <param name="orderBillingPhoneNumber"></param>
            <param name="orderBillingEmailId"></param>
            <param name="orderCardTransactionID"></param>
            <param name="orderCardTypeId"></param>
            <param name="orderCardEndsIn"></param>
            <param name="orderTaxCost"></param>
            <param name="orderShippingCost"></param>
            <param name="orderSubTotal"></param>
            <param name="orderDiscountAmount"></param>
            <param name="orderTotal"></param>
            <param name="orderCouponID"></param>
            <param name="orderOrderDate"></param>
            <param name="orderCreditCardNumber"></param>
            <param name="orderCreditCardExp"></param>
            <param name="orderCreditCardCVV"></param>
            <param name="orderCustom1"></param>
            <param name="orderCustom2"></param>
            <param name="orderAdditionalInstructions"></param>
            <param name="orderCustom3"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.Copy">
            <summary>
              Returns a Typed Order Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.DeepCopy">
            <summary>
              Returns a Typed Order Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderBase,ZNode.Libraries.DataAccess.Entities.OrderBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderID">
            <summary>
            	Gets or sets the OrderID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.PortalId">
            <summary>
            	Gets or sets the PortalId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsPortalIdNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.AccountID">
            <summary>
            	Gets or sets the AccountID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsAccountIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderStateID">
            <summary>
            	Gets or sets the OrderStateID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsOrderStateIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShippingID">
            <summary>
            	Gets or sets the ShippingID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsShippingIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.PaymentTypeId">
            <summary>
            	Gets or sets the PaymentTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsPaymentTypeIdNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipFirstName">
            <summary>
            	Gets or sets the ShipFirstName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipLastName">
            <summary>
            	Gets or sets the ShipLastName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipCompanyName">
            <summary>
            	Gets or sets the ShipCompanyName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipStreet">
            <summary>
            	Gets or sets the ShipStreet property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipStreet1">
            <summary>
            	Gets or sets the ShipStreet1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipCity">
            <summary>
            	Gets or sets the ShipCity property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipStateCode">
            <summary>
            	Gets or sets the ShipStateCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipPostalCode">
            <summary>
            	Gets or sets the ShipPostalCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipCountry">
            <summary>
            	Gets or sets the ShipCountry property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipPhoneNumber">
            <summary>
            	Gets or sets the ShipPhoneNumber property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShipEmailID">
            <summary>
            	Gets or sets the ShipEmailID property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingFirstName">
            <summary>
            	Gets or sets the BillingFirstName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingLastName">
            <summary>
            	Gets or sets the BillingLastName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingCompanyName">
            <summary>
            	Gets or sets the BillingCompanyName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingStreet">
            <summary>
            	Gets or sets the BillingStreet property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingStreet1">
            <summary>
            	Gets or sets the BillingStreet1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingCity">
            <summary>
            	Gets or sets the BillingCity property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingStateCode">
            <summary>
            	Gets or sets the BillingStateCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingPostalCode">
            <summary>
            	Gets or sets the BillingPostalCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingCountry">
            <summary>
            	Gets or sets the BillingCountry property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingPhoneNumber">
            <summary>
            	Gets or sets the BillingPhoneNumber property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.BillingEmailId">
            <summary>
            	Gets or sets the BillingEmailId property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CardTransactionID">
            <summary>
            	Gets or sets the CardTransactionID property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CardTypeId">
            <summary>
            	Gets or sets the CardTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsCardTypeIdNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CardEndsIn">
            <summary>
            	Gets or sets the CardEndsIn property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.TaxCost">
            <summary>
            	Gets or sets the TaxCost property. 
            	
            </summary>
            <value>This type is smallmoney.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsTaxCostNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShippingCost">
            <summary>
            	Gets or sets the ShippingCost property. 
            	
            </summary>
            <value>This type is smallmoney.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsShippingCostNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.SubTotal">
            <summary>
            	Gets or sets the SubTotal property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsSubTotalNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.DiscountAmount">
            <summary>
            	Gets or sets the DiscountAmount property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsDiscountAmountNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.Total">
            <summary>
            	Gets or sets the Total property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsTotalNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CouponID">
            <summary>
            	Gets or sets the CouponID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsCouponIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderDate">
            <summary>
            	Gets or sets the OrderDate property. 
            	
            </summary>
            <value>This type is datetime.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return DateTime.MinValue. It is up to the developer
            to check the value of IsOrderDateNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CreditCardNumber">
            <summary>
            	Gets or sets the CreditCardNumber property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CreditCardExp">
            <summary>
            	Gets or sets the CreditCardExp property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CreditCardCVV">
            <summary>
            	Gets or sets the CreditCardCVV property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.AdditionalInstructions">
            <summary>
            	Gets or sets the AdditionalInstructions property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.PortalIdSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalId.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ShippingIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/>.
            </summary>
            <value>The source Shipping for ShippingID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.AccountIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/>.
            </summary>
            <value>The source Account for AccountID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.CouponIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/>.
            </summary>
            <value>The source Coupon for CouponID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderStateIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/>.
            </summary>
            <value>The source OrderState for OrderStateID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderLineItemCollection">
            <summary>
            Holds a collection of OrderLineItem objects
            which are related to this object through the relation FK_SC_OrderLineItem_SC_Order
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData">
            <summary>
            	The data structure representation of the 'ZNodeOrder' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.OrderID">
            <summary>			
            OrderID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeOrder"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.OrderStateID">
            <summary>
            OrderStateID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShippingID">
            <summary>
            ShippingID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.PaymentTypeId">
            <summary>
            PaymentTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipFirstName">
            <summary>
            ShipFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipLastName">
            <summary>
            ShipLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipCompanyName">
            <summary>
            ShipCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipStreet">
            <summary>
            ShipStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipStreet1">
            <summary>
            ShipStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipCity">
            <summary>
            ShipCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipStateCode">
            <summary>
            ShipStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipPostalCode">
            <summary>
            ShipPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipCountry">
            <summary>
            ShipCountry : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipPhoneNumber">
            <summary>
            ShipPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShipEmailID">
            <summary>
            ShipEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingFirstName">
            <summary>
            BillingFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingLastName">
            <summary>
            BillingLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingCompanyName">
            <summary>
            BillingCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingStreet">
            <summary>
            BillingStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingStreet1">
            <summary>
            BillingStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingCity">
            <summary>
            BillingCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingStateCode">
            <summary>
            BillingStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingPostalCode">
            <summary>
            BillingPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingCountry">
            <summary>
            BillingCountry : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingPhoneNumber">
            <summary>
            BillingPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.BillingEmailId">
            <summary>
            BillingEmailId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CardTransactionID">
            <summary>
            CardTransactionID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CardTypeId">
            <summary>
            CardTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CardEndsIn">
            <summary>
            CardEndsIn : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.TaxCost">
            <summary>
            TaxCost : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.ShippingCost">
            <summary>
            ShippingCost : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.SubTotal">
            <summary>
            SubTotal : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.DiscountAmount">
            <summary>
            DiscountAmount : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.Total">
            <summary>
            Total : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CouponID">
            <summary>
            CouponID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.OrderDate">
            <summary>
            OrderDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CreditCardNumber">
            <summary>
            CreditCardNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CreditCardExp">
            <summary>
            CreditCardExp : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.CreditCardCVV">
            <summary>
            CreditCardCVV : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.AdditionalInstructions">
            <summary>
            AdditionalInstructions : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderBase.OrderEntityData.OrderLineItemCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderLineItemOrderID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Order.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn)">
            <summary>
             Initalizes a new Instance of the OrderLineItemEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the OrderLineItemEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemEventArgs.Column">
            <summary>
             The OrderLineItemColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemEventHandler">
            <summary>
             Define a delegate for all OrderLineItem related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase">
            <summary>
             An object representation of the 'ZNodeOrderLineItem' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.#ctor(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase"/> instance.
            </summary>
            <param name="orderLineItemOrderID"></param>
            <param name="orderLineItemShipmentID"></param>
            <param name="orderLineItemProductNum"></param>
            <param name="orderLineItemName"></param>
            <param name="orderLineItemDescription"></param>
            <param name="orderLineItemQuantity"></param>
            <param name="orderLineItemPrice"></param>
            <param name="orderLineItemWeight"></param>
            <param name="orderLineItemPrePromoPrice"></param>
            <param name="orderLineItemCustom1"></param>
            <param name="orderLineItemCustom2"></param>
            <param name="orderLineItemCustom3"></param>
            <param name="orderLineItemSKU"></param>
            <param name="orderLineItemParentOrderLineItemID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.CreateOrderLineItem(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> instance.
            </summary>
            <param name="orderLineItemOrderID"></param>
            <param name="orderLineItemShipmentID"></param>
            <param name="orderLineItemProductNum"></param>
            <param name="orderLineItemName"></param>
            <param name="orderLineItemDescription"></param>
            <param name="orderLineItemQuantity"></param>
            <param name="orderLineItemPrice"></param>
            <param name="orderLineItemWeight"></param>
            <param name="orderLineItemPrePromoPrice"></param>
            <param name="orderLineItemCustom1"></param>
            <param name="orderLineItemCustom2"></param>
            <param name="orderLineItemCustom3"></param>
            <param name="orderLineItemSKU"></param>
            <param name="orderLineItemParentOrderLineItemID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Copy">
            <summary>
              Returns a Typed OrderLineItem Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.DeepCopy">
            <summary>
              Returns a Typed OrderLineItem Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderLineItemBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderLineItemBase,ZNode.Libraries.DataAccess.Entities.OrderLineItemBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemID">
            <summary>
            	Gets or sets the OrderLineItemID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderID">
            <summary>
            	Gets or sets the OrderID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ShipmentID">
            <summary>
            	Gets or sets the ShipmentID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsShipmentIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ProductNum">
            <summary>
            	Gets or sets the ProductNum property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Quantity">
            <summary>
            	Gets or sets the Quantity property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsQuantityNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Price">
            <summary>
            	Gets or sets the Price property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsPriceNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Weight">
            <summary>
            	Gets or sets the Weight property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0.0m. It is up to the developer
            to check the value of IsWeightNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.PrePromoPrice">
            <summary>
            	Gets or sets the PrePromoPrice property. 
            	
            </summary>
            <value>This type is money.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0. It is up to the developer
            to check the value of IsPrePromoPriceNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.SKU">
            <summary>
            	Gets or sets the SKU property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ParentOrderLineItemID">
            <summary>
            	Gets or sets the ParentOrderLineItemID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsParentOrderLineItemIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ParentOrderLineItemIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/>.
            </summary>
            <value>The source OrderLineItem for ParentOrderLineItemID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/>.
            </summary>
            <value>The source Order for OrderID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemCollection">
            <summary>
            Holds a collection of OrderLineItem objects
            which are related to this object through the relation FK_ZNodeOrderLineItem_ZNodeOrderLineItem
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData">
            <summary>
            	The data structure representation of the 'ZNodeOrderLineItem' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.OrderLineItemID">
            <summary>			
            OrderLineItemID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeOrderLineItem"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.OrderID">
            <summary>
            OrderID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.ShipmentID">
            <summary>
            ShipmentID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.ProductNum">
            <summary>
            ProductNum : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Quantity">
            <summary>
            Quantity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Price">
            <summary>
            Price : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Weight">
            <summary>
            Weight : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.PrePromoPrice">
            <summary>
            PrePromoPrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.ParentOrderLineItemID">
            <summary>
            ParentOrderLineItemID : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemBase.OrderLineItemEntityData.OrderLineItemCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderLineItemParentOrderLineItemID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OrderLineItemComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer.#ctor(ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer.Equals(ZNode.Libraries.DataAccess.Entities.OrderLineItem,ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> to compare.</param>
            <param name="b">The second <c>OrderLineItem</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer.Compare(ZNode.Libraries.DataAccess.Entities.OrderLineItem,ZNode.Libraries.DataAccess.Entities.OrderLineItem)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.#ctor">
            <summary>
            Initializes a new instance of the OrderLineItemKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.#ctor(ZNode.Libraries.DataAccess.Entities.OrderLineItemBase)">
            <summary>
            Initializes a new instance of the OrderLineItemKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the OrderLineItemKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderLineItemKey.OrderLineItemID">
            <summary>
            Gets or sets the OrderLineItemID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn">
            <summary>
            Enumerate the OrderLineItem columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.OrderLineItemID">
            <summary>
            OrderLineItemID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.OrderID">
            <summary>
            OrderID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.ShipmentID">
            <summary>
            ShipmentID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.ProductNum">
            <summary>
            ProductNum : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Quantity">
            <summary>
            Quantity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Price">
            <summary>
            Price : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Weight">
            <summary>
            Weight : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.PrePromoPrice">
            <summary>
            PrePromoPrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderLineItemColumn.ParentOrderLineItemID">
            <summary>
            ParentOrderLineItemID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.GatewayColumn)">
            <summary>
             Initalizes a new Instance of the GatewayEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.GatewayColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the GatewayEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayEventArgs.Column">
            <summary>
             The GatewayColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.GatewayColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayEventHandler">
            <summary>
             Define a delegate for all Gateway related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GatewayComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayComparer.#ctor(ZNode.Libraries.DataAccess.Entities.GatewayColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayComparer.Equals(ZNode.Libraries.DataAccess.Entities.Gateway,ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> to compare.</param>
            <param name="b">The second <c>Gateway</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayComparer.Compare(ZNode.Libraries.DataAccess.Entities.Gateway,ZNode.Libraries.DataAccess.Entities.Gateway)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayKey.#ctor">
            <summary>
            Initializes a new instance of the GatewayKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayKey.#ctor(ZNode.Libraries.DataAccess.Entities.GatewayBase)">
            <summary>
            Initializes a new instance of the GatewayKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the GatewayKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GatewayKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GatewayKey.GatewayTypeID">
            <summary>
            Gets or sets the GatewayTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GatewayColumn">
            <summary>
            Enumerate the Gateway columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayColumn.GatewayTypeID">
            <summary>
            GatewayTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayColumn.GatewayName">
            <summary>
            GatewayName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.GatewayColumn.WebsiteURL">
            <summary>
            WebsiteURL : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderStateColumn)">
            <summary>
             Initalizes a new Instance of the OrderStateEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderStateColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the OrderStateEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateEventArgs.Column">
            <summary>
             The OrderStateColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.OrderStateColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateEventHandler">
            <summary>
             Define a delegate for all OrderState related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OrderStateComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateComparer.#ctor(ZNode.Libraries.DataAccess.Entities.OrderStateColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateComparer.Equals(ZNode.Libraries.DataAccess.Entities.OrderState,ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> to compare.</param>
            <param name="b">The second <c>OrderState</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateComparer.Compare(ZNode.Libraries.DataAccess.Entities.OrderState,ZNode.Libraries.DataAccess.Entities.OrderState)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderState"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateKey.#ctor">
            <summary>
            Initializes a new instance of the OrderStateKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateKey.#ctor(ZNode.Libraries.DataAccess.Entities.OrderStateBase)">
            <summary>
            Initializes a new instance of the OrderStateKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the OrderStateKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderStateKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderStateKey.OrderStateID">
            <summary>
            Gets or sets the OrderStateID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderStateColumn">
            <summary>
            Enumerate the OrderState columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateColumn.OrderStateID">
            <summary>
            OrderStateID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderStateColumn.OrderStateName">
            <summary>
            OrderStateName : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.StoreColumn)">
            <summary>
             Initalizes a new Instance of the StoreEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.StoreColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the StoreEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreEventArgs.Column">
            <summary>
             The StoreColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.StoreColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreEventHandler">
            <summary>
             Define a delegate for all Store related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreBase">
            <summary>
             An object representation of the 'ZNodeStore' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreBase"/> instance.
            </summary>
            <param name="storeStoreID"></param>
            <param name="storeName"></param>
            <param name="storeAddress1"></param>
            <param name="storeAddress2"></param>
            <param name="storeAddress3"></param>
            <param name="storeCity"></param>
            <param name="storeState"></param>
            <param name="storeZip"></param>
            <param name="storePhone"></param>
            <param name="storeFax"></param>
            <param name="storeContactName"></param>
            <param name="storeContactAddress1"></param>
            <param name="storeContactAddress2"></param>
            <param name="storeContactCity"></param>
            <param name="storeContactState"></param>
            <param name="storeContactZip"></param>
            <param name="storeContactPhone"></param>
            <param name="storeIsDealer"></param>
            <param name="storeP1"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.CreateStore(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> instance.
            </summary>
            <param name="storeStoreID"></param>
            <param name="storeName"></param>
            <param name="storeAddress1"></param>
            <param name="storeAddress2"></param>
            <param name="storeAddress3"></param>
            <param name="storeCity"></param>
            <param name="storeState"></param>
            <param name="storeZip"></param>
            <param name="storePhone"></param>
            <param name="storeFax"></param>
            <param name="storeContactName"></param>
            <param name="storeContactAddress1"></param>
            <param name="storeContactAddress2"></param>
            <param name="storeContactCity"></param>
            <param name="storeContactState"></param>
            <param name="storeContactZip"></param>
            <param name="storeContactPhone"></param>
            <param name="storeIsDealer"></param>
            <param name="storeP1"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.StoreColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StoreBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.StoreColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StoreBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.StoreColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StoreBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.StoreColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.StoreBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.Copy">
            <summary>
              Returns a Typed Store Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.DeepCopy">
            <summary>
              Returns a Typed Store Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.Equals(ZNode.Libraries.DataAccess.Entities.StoreBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.Equals(ZNode.Libraries.DataAccess.Entities.StoreBase,ZNode.Libraries.DataAccess.Entities.StoreBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.StoreBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StoreBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StoreBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreID">
            <summary>
            	Gets or sets the StoreID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.OriginalStoreID">
            <summary>
            	Get the original value of the StoreID property.
            	
            </summary>
            <remarks>This is the original value of the StoreID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Address1">
            <summary>
            	Gets or sets the Address1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Address2">
            <summary>
            	Gets or sets the Address2 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Address3">
            <summary>
            	Gets or sets the Address3 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.City">
            <summary>
            	Gets or sets the City property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.State">
            <summary>
            	Gets or sets the State property. 
            	
            </summary>
            <value>This type is char.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Zip">
            <summary>
            	Gets or sets the Zip property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Phone">
            <summary>
            	Gets or sets the Phone property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Fax">
            <summary>
            	Gets or sets the Fax property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactName">
            <summary>
            	Gets or sets the ContactName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactAddress1">
            <summary>
            	Gets or sets the ContactAddress1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactAddress2">
            <summary>
            	Gets or sets the ContactAddress2 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactCity">
            <summary>
            	Gets or sets the ContactCity property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactState">
            <summary>
            	Gets or sets the ContactState property. 
            	
            </summary>
            <value>This type is char.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactZip">
            <summary>
            	Gets or sets the ContactZip property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ContactPhone">
            <summary>
            	Gets or sets the ContactPhone property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.IsDealer">
            <summary>
            	Gets or sets the IsDealer property. 
            	
            </summary>
            <value>This type is char.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.P1">
            <summary>
            	Gets or sets the P1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StoreBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.StoreBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData">
            <summary>
            	The data structure representation of the 'ZNodeStore' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.StoreID">
            <summary>			
            StoreID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeStore"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.OriginalStoreID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Address1">
            <summary>
            Address1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Address2">
            <summary>
            Address2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Address3">
            <summary>
            Address3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.City">
            <summary>
            City : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.State">
            <summary>
            State : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Zip">
            <summary>
            Zip : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Phone">
            <summary>
            Phone : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.Fax">
            <summary>
            Fax : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactName">
            <summary>
            ContactName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactAddress1">
            <summary>
            ContactAddress1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactAddress2">
            <summary>
            ContactAddress2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactCity">
            <summary>
            ContactCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactState">
            <summary>
            ContactState : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactZip">
            <summary>
            ContactZip : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.ContactPhone">
            <summary>
            ContactPhone : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.IsDealer">
            <summary>
            IsDealer : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreBase.StoreEntityData.P1">
            <summary>
            p1 : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StoreComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreComparer.#ctor(ZNode.Libraries.DataAccess.Entities.StoreColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreComparer.Equals(ZNode.Libraries.DataAccess.Entities.Store,ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> to compare.</param>
            <param name="b">The second <c>Store</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreComparer.Compare(ZNode.Libraries.DataAccess.Entities.Store,ZNode.Libraries.DataAccess.Entities.Store)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreKey.#ctor">
            <summary>
            Initializes a new instance of the StoreKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreKey.#ctor(ZNode.Libraries.DataAccess.Entities.StoreBase)">
            <summary>
            Initializes a new instance of the StoreKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the StoreKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.StoreKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.StoreKey.StoreID">
            <summary>
            Gets or sets the StoreID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.StoreColumn">
            <summary>
            Enumerate the Store columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.StoreID">
            <summary>
            StoreID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Address1">
            <summary>
            Address1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Address2">
            <summary>
            Address2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Address3">
            <summary>
            Address3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.City">
            <summary>
            City : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.State">
            <summary>
            State : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Zip">
            <summary>
            Zip : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Phone">
            <summary>
            Phone : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.Fax">
            <summary>
            Fax : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactName">
            <summary>
            ContactName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactAddress1">
            <summary>
            ContactAddress1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactAddress2">
            <summary>
            ContactAddress2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactCity">
            <summary>
            ContactCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactState">
            <summary>
            ContactState : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactZip">
            <summary>
            ContactZip : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.ContactPhone">
            <summary>
            ContactPhone : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.IsDealer">
            <summary>
            IsDealer : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.StoreColumn.P1">
            <summary>
            P1 : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentTypeList">
            <summary>
            
            </summary>
            <remark>this enumeration contains the items contained in the table ZNodePaymentType</remark>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeList.Credit_Card">
            <summary> 
            Credit Card Payments
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeList.Purchase_Order">
            <summary> 
            Purchase Order Payments
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeList.PayPal">
            <summary> 
            PayPal Payments
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeList.Google_Checkout">
            <summary> 
            Google Checkout
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentTypeList.Verisign_Payflow_Pro_Express">
            <summary> 
            Verisign Payflow Pro Express
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo">
            <summary>
            Object representing a validation rule for an object
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.ToString">
            <summary>
            Returns a text representation of the rule which is the <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.RuleName"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.#ctor(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler,System.String)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="target">Object reference containing the data to validate.</param>
            <param name="handler">The address of the method implementing <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler"/>.</param>
            <param name="propertyName">The name of the property to which the rule applies.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.#ctor(System.Object,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler,ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="target">Object reference containing the data to validate.</param>
            <param name="handler">The address of the method implementing <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler"/>.</param>
            <param name="args">A <see cref="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.ValidationRuleArgs"/> object.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.Invoke">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>True if the data is valid, False if the data is invalid.</returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList"/>.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo.ValidationRuleArgs">
            <summary>
            Returns information about the property that is associated with the rule.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityState">
            <summary>
            List of possible state for an entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityState.Unchanged">
            <summary>
            Entity is unchanged
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityState.Added">
            <summary>
            Entity is new
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityState.Changed">
            <summary>
            Entity has been modified
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.EntityState.Deleted">
            <summary>
            Entity has been deleted
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Highlight">
            <summary>
             An object representation of the 'ZNodeHighlight' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightBase">
            <summary>
             An object representation of the 'ZNodeHighlight' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightBase"/> instance.
            </summary>
            <param name="highlightPortalID"></param>
            <param name="highlightImageFile"></param>
            <param name="highlightName"></param>
            <param name="highlightDescription"></param>
            <param name="highlightDisplayPopup"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.CreateHighlight(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> instance.
            </summary>
            <param name="highlightPortalID"></param>
            <param name="highlightImageFile"></param>
            <param name="highlightName"></param>
            <param name="highlightDescription"></param>
            <param name="highlightDisplayPopup"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.HighlightColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.HighlightColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.HighlightColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.HighlightColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.Copy">
            <summary>
              Returns a Typed Highlight Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.DeepCopy">
            <summary>
              Returns a Typed Highlight Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.Equals(ZNode.Libraries.DataAccess.Entities.HighlightBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.Equals(ZNode.Libraries.DataAccess.Entities.HighlightBase,ZNode.Libraries.DataAccess.Entities.HighlightBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.HighlightBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightID">
            <summary>
            	Gets or sets the HighlightID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.ImageFile">
            <summary>
            	Gets or sets the ImageFile property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.DisplayPopup">
            <summary>
            	Gets or sets the DisplayPopup property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.ProductHighlightCollection">
            <summary>
            Holds a collection of ProductHighlight objects
            which are related to this object through the relation FK_SC_ProductHighlight_SC_Highlight
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.HighlightBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData">
            <summary>
            	The data structure representation of the 'ZNodeHighlight' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.HighlightID">
            <summary>			
            HighlightID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeHighlight"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.DisplayPopup">
            <summary>
            DisplayPopup : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightBase.HighlightEntityData.ProductHighlightCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productHighlightHighlightID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Highlight.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType">
            <summary>
             An object representation of the 'ZNodeOrderProcessingType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase">
            <summary>
             An object representation of the 'ZNodeOrderProcessingType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.#ctor(System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase"/> instance.
            </summary>
            <param name="orderProcessingTypeDescription"></param>
            <param name="orderProcessingTypeClassID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.CreateOrderProcessingType(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> instance.
            </summary>
            <param name="orderProcessingTypeDescription"></param>
            <param name="orderProcessingTypeClassID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Copy">
            <summary>
              Returns a Typed OrderProcessingType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.DeepCopy">
            <summary>
              Returns a Typed OrderProcessingType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase,ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OrderProcessingTypeID">
            <summary>
            	Gets or sets the OrderProcessingTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ClassID">
            <summary>
            	Gets or sets the ClassID property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OrderProcessingTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeOrderProcessingType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OrderProcessingTypeEntityData.OrderProcessingTypeID">
            <summary>			
            OrderProcessingTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeOrderProcessingType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OrderProcessingTypeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase.OrderProcessingTypeEntityData.ClassID">
            <summary>
            ClassID : 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseType">
            <summary>
             An object representation of the 'ZNodeCaseType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase">
            <summary>
             An object representation of the 'ZNodeCaseType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.#ctor(System.Int32,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase"/> instance.
            </summary>
            <param name="caseTypeCaseTypeID"></param>
            <param name="caseTypeCaseTypeNme"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CreateCaseType(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> instance.
            </summary>
            <param name="caseTypeCaseTypeID"></param>
            <param name="caseTypeCaseTypeNme"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Copy">
            <summary>
              Returns a Typed CaseType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.DeepCopy">
            <summary>
              Returns a Typed CaseType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.CaseTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.CaseTypeBase,ZNode.Libraries.DataAccess.Entities.CaseTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeID">
            <summary>
            	Gets or sets the CaseTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.OriginalCaseTypeID">
            <summary>
            	Get the original value of the CaseTypeID property.
            	
            </summary>
            <remarks>This is the original value of the CaseTypeID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeNme">
            <summary>
            	Gets or sets the CaseTypeNme property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseCollection">
            <summary>
            Holds a collection of Case objects
            which are related to this object through the relation FK_Case_CaseType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeCaseType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeEntityData.CaseTypeID">
            <summary>			
            CaseTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeCaseType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeEntityData.OriginalCaseTypeID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeEntityData.CaseTypeNme">
            <summary>
            CaseTypeNme : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeBase.CaseTypeEntityData.CaseCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation @caseCaseTypeID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType">
            <summary>
             An object representation of the 'ZNodeShippingRuleType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductType">
            <summary>
             An object representation of the 'ZNodeProductType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase">
            <summary>
             An object representation of the 'ZNodeProductType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase"/> instance.
            </summary>
            <param name="productTypePortalId"></param>
            <param name="productTypeName"></param>
            <param name="productTypeDescription"></param>
            <param name="productTypeDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.CreateProductType(System.Int32,System.String,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> instance.
            </summary>
            <param name="productTypePortalId"></param>
            <param name="productTypeName"></param>
            <param name="productTypeDescription"></param>
            <param name="productTypeDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Copy">
            <summary>
              Returns a Typed ProductType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.DeepCopy">
            <summary>
              Returns a Typed ProductType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductTypeBase,ZNode.Libraries.DataAccess.Entities.ProductTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeId">
            <summary>
            	Gets or sets the ProductTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.PortalId">
            <summary>
            	Gets or sets the PortalId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.PortalIdSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalId.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductCollection">
            <summary>
            Holds a collection of Product objects
            which are related to this object through the relation FK_SC_Product_SC_ProductType
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeAttributeCollection">
            <summary>
            Holds a collection of ProductTypeAttribute objects
            which are related to this object through the relation FK_SC_ProductTypeAttribute_SC_ProductType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.ProductTypeId">
            <summary>			
            ProductTypeId : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.ProductCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productProductTypeID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeBase.ProductTypeEntityData.ProductTypeAttributeCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productTypeAttributeProductTypeId
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Coupon">
            <summary>
             An object representation of the 'ZNodeCoupon' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Coupon.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Coupon"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Manufacturer">
            <summary>
             An object representation of the 'ZNodeManufacturer' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Manufacturer.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Manufacturer"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn)">
            <summary>
             Initalizes a new Instance of the ShippingServiceCodeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ShippingServiceCodeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeEventArgs.Column">
            <summary>
             The ShippingServiceCodeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeEventHandler">
            <summary>
             Define a delegate for all ShippingServiceCode related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase">
            <summary>
             An object representation of the 'ZNodeShippingServiceCode' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase"/> instance.
            </summary>
            <param name="shippingServiceCodeShippingTypeID"></param>
            <param name="shippingServiceCodeCode"></param>
            <param name="shippingServiceCodeDescription"></param>
            <param name="shippingServiceCodeDisplayOrder"></param>
            <param name="shippingServiceCodeActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.CreateShippingServiceCode(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> instance.
            </summary>
            <param name="shippingServiceCodeShippingTypeID"></param>
            <param name="shippingServiceCodeCode"></param>
            <param name="shippingServiceCodeDescription"></param>
            <param name="shippingServiceCodeDisplayOrder"></param>
            <param name="shippingServiceCodeActiveInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Copy">
            <summary>
              Returns a Typed ShippingServiceCode Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.DeepCopy">
            <summary>
              Returns a Typed ShippingServiceCode Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase,ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeID">
            <summary>
            	Gets or sets the ShippingServiceCodeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingTypeID">
            <summary>
            	Gets or sets the ShippingTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Code">
            <summary>
            	Gets or sets the Code property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsDisplayOrderNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/>.
            </summary>
            <value>The source ShippingType for ShippingTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeShippingServiceCode' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData.ShippingServiceCodeID">
            <summary>			
            ShippingServiceCodeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeShippingServiceCode"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData.ShippingTypeID">
            <summary>
            ShippingTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData.Code">
            <summary>
            Code : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase.ShippingServiceCodeEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ShippingServiceCodeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer.Equals(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> to compare.</param>
            <param name="b">The second <c>ShippingServiceCode</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer.Compare(ZNode.Libraries.DataAccess.Entities.ShippingServiceCode,ZNode.Libraries.DataAccess.Entities.ShippingServiceCode)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.#ctor">
            <summary>
            Initializes a new instance of the ShippingServiceCodeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeBase)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ShippingServiceCodeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeKey.ShippingServiceCodeID">
            <summary>
            Gets or sets the ShippingServiceCodeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn">
            <summary>
            Enumerate the ShippingServiceCode columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn.ShippingServiceCodeID">
            <summary>
            ShippingServiceCodeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn.ShippingTypeID">
            <summary>
            ShippingTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn.Code">
            <summary>
            Code : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingServiceCodeColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingColumn)">
            <summary>
             Initalizes a new Instance of the ShippingEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ShippingEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingEventArgs.Column">
            <summary>
             The ShippingColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ShippingColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingEventHandler">
            <summary>
             Define a delegate for all Shipping related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingBase">
            <summary>
             An object representation of the 'ZNodeShipping' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.#ctor(System.Int32,System.Nullable{System.Int32},System.String,System.Decimal,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingBase"/> instance.
            </summary>
            <param name="shippingShippingTypeID"></param>
            <param name="shippingProfileID"></param>
            <param name="shippingShippingCode"></param>
            <param name="shippingHandlingCharge">This charge is added on top of the calculated shipping charge for the carrier.</param>
            <param name="shippingDestinationCountryCode"></param>
            <param name="shippingDescription"></param>
            <param name="shippingActiveInd"></param>
            <param name="shippingDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.CreateShipping(System.Int32,System.Nullable{System.Int32},System.String,System.Decimal,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> instance.
            </summary>
            <param name="shippingShippingTypeID"></param>
            <param name="shippingProfileID"></param>
            <param name="shippingShippingCode"></param>
            <param name="shippingHandlingCharge">This charge is added on top of the calculated shipping charge for the carrier.</param>
            <param name="shippingDestinationCountryCode"></param>
            <param name="shippingDescription"></param>
            <param name="shippingActiveInd"></param>
            <param name="shippingDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.Copy">
            <summary>
              Returns a Typed Shipping Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.DeepCopy">
            <summary>
              Returns a Typed Shipping Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingBase,ZNode.Libraries.DataAccess.Entities.ShippingBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingID">
            <summary>
            	Gets or sets the ShippingID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingTypeID">
            <summary>
            	Gets or sets the ShippingTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ProfileID">
            <summary>
            	Gets or sets the ProfileID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsProfileIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingCode">
            <summary>
            	Gets or sets the ShippingCode property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.HandlingCharge">
            <summary>
            	Gets or sets the HandlingCharge property. 
            	This charge is added on top of the calculated shipping charge for the carrier.
            </summary>
            <value>This type is smallmoney.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.DestinationCountryCode">
            <summary>
            	Gets or sets the DestinationCountryCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ProfileIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/>.
            </summary>
            <value>The source Profile for ProfileID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/>.
            </summary>
            <value>The source ShippingType for ShippingTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.DestinationCountryCodeSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/>.
            </summary>
            <value>The source Country for DestinationCountryCode.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.OrderCollection">
            <summary>
            Holds a collection of Order objects
            which are related to this object through the relation FK_SC_Order_SC_Shipping
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingRuleCollection">
            <summary>
            Holds a collection of ShippingRule objects
            which are related to this object through the relation FK_SC_ShippingRule_SC_Shipping
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData">
            <summary>
            	The data structure representation of the 'ZNodeShipping' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.ShippingID">
            <summary>			
            ShippingID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeShipping"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.ShippingTypeID">
            <summary>
            ShippingTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.ShippingCode">
            <summary>
            ShippingCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.HandlingCharge">
            <summary>
            HandlingCharge : This charge is added on top of the calculated shipping charge for the carrier.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.DestinationCountryCode">
            <summary>
            DestinationCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.OrderCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderShippingID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingBase.ShippingEntityData.ShippingRuleCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation shippingRuleShippingID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ShippingComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingComparer.Equals(ZNode.Libraries.DataAccess.Entities.Shipping,ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> to compare.</param>
            <param name="b">The second <c>Shipping</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingComparer.Compare(ZNode.Libraries.DataAccess.Entities.Shipping,ZNode.Libraries.DataAccess.Entities.Shipping)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingKey.#ctor">
            <summary>
            Initializes a new instance of the ShippingKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingKey.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingBase)">
            <summary>
            Initializes a new instance of the ShippingKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ShippingKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingKey.ShippingID">
            <summary>
            Gets or sets the ShippingID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingColumn">
            <summary>
            Enumerate the Shipping columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.ShippingID">
            <summary>
            ShippingID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.ShippingTypeID">
            <summary>
            ShippingTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.ShippingCode">
            <summary>
            ShippingCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.HandlingCharge">
            <summary>
            HandlingCharge : This charge is added on top of the calculated shipping charge for the carrier.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.DestinationCountryCode">
            <summary>
            DestinationCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature">
            <summary>
             An object representation of the 'ZNodeContactTemperature' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase">
            <summary>
             An object representation of the 'ZNodeContactTemperature' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.#ctor(System.Int32,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase"/> instance.
            </summary>
            <param name="contactTemperatureContactTemperatureID"></param>
            <param name="contactTemperatureName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.CreateContactTemperature(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/> instance.
            </summary>
            <param name="contactTemperatureContactTemperatureID"></param>
            <param name="contactTemperatureName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Copy">
            <summary>
              Returns a Typed ContactTemperature Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.DeepCopy">
            <summary>
              Returns a Typed ContactTemperature Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Equals(ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Equals(ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase,ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ContactTemperatureID">
            <summary>
            	Gets or sets the ContactTemperatureID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.OriginalContactTemperatureID">
            <summary>
            	Get the original value of the ContactTemperatureID property.
            	
            </summary>
            <remarks>This is the original value of the ContactTemperatureID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.AccountCollection">
            <summary>
            Holds a collection of Account objects
            which are related to this object through the relation FK_ZNodeAccount_ZNodeContactTemperature
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ContactTemperatureEntityData">
            <summary>
            	The data structure representation of the 'ZNodeContactTemperature' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ContactTemperatureEntityData.ContactTemperatureID">
            <summary>			
            ContactTemperatureID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeContactTemperature"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ContactTemperatureEntityData.OriginalContactTemperatureID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ContactTemperatureEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase.ContactTemperatureEntityData.AccountCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation accountContactTemperatureID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperature.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountType">
            <summary>
             An object representation of the 'ZNodeAccountType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase">
            <summary>
             An object representation of the 'ZNodeAccountType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.#ctor(System.Int32,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase"/> instance.
            </summary>
            <param name="accountTypeAccountTypeID"></param>
            <param name="accountTypeAccountTypeNme"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.CreateAccountType(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> instance.
            </summary>
            <param name="accountTypeAccountTypeID"></param>
            <param name="accountTypeAccountTypeNme"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Copy">
            <summary>
              Returns a Typed AccountType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.DeepCopy">
            <summary>
              Returns a Typed AccountType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.AccountTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.AccountTypeBase,ZNode.Libraries.DataAccess.Entities.AccountTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeID">
            <summary>
            	Gets or sets the AccountTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.OriginalAccountTypeID">
            <summary>
            	Get the original value of the AccountTypeID property.
            	
            </summary>
            <remarks>This is the original value of the AccountTypeID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeNme">
            <summary>
            	Gets or sets the AccountTypeNme property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountCollection">
            <summary>
            Holds a collection of Account objects
            which are related to this object through the relation FK_Account_AccountType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeAccountType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeEntityData.AccountTypeID">
            <summary>			
            AccountTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeAccountType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeEntityData.OriginalAccountTypeID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeEntityData.AccountTypeNme">
            <summary>
            AccountTypeNme : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeBase.AccountTypeEntityData.AccountCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation accountAccountTypeID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProfileColumn)">
            <summary>
             Initalizes a new Instance of the ProfileEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProfileColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProfileEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileEventArgs.Column">
            <summary>
             The ProfileColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProfileColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileEventHandler">
            <summary>
             Define a delegate for all Profile related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProfileComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProfileColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileComparer.Equals(ZNode.Libraries.DataAccess.Entities.Profile,ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> to compare.</param>
            <param name="b">The second <c>Profile</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileComparer.Compare(ZNode.Libraries.DataAccess.Entities.Profile,ZNode.Libraries.DataAccess.Entities.Profile)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileKey.#ctor">
            <summary>
            Initializes a new instance of the ProfileKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProfileBase)">
            <summary>
            Initializes a new instance of the ProfileKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProfileKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProfileKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProfileKey.ProfileID">
            <summary>
            Gets or sets the ProfileID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProfileColumn">
            <summary>
            Enumerate the Profile columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileColumn.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProfileColumn.IsDefault">
            <summary>
            IsDefault : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn)">
            <summary>
             Initalizes a new Instance of the ProductAttributeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductAttributeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeEventArgs.Column">
            <summary>
             The ProductAttributeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeEventHandler">
            <summary>
             Define a delegate for all ProductAttribute related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductAttributeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductAttribute,ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> to compare.</param>
            <param name="b">The second <c>ProductAttribute</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductAttribute,ZNode.Libraries.DataAccess.Entities.ProductAttribute)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAttributeBase)">
            <summary>
            Initializes a new instance of the ProductAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAttributeKey.AttributeId">
            <summary>
            Gets or sets the AttributeId property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn">
            <summary>
            Enumerate the ProductAttribute columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.AttributeId">
            <summary>
            AttributeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.AttributeTypeId">
            <summary>
            AttributeTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.ExternalId">
            <summary>
            ExternalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.IsActive">
            <summary>
            IsActive : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAttributeColumn.OldAttributeId">
            <summary>
            OldAttributeId : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight">
            <summary>
             An object representation of the 'ZNodeProductHighlight' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductHighlight.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductHighlight"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Account">
            <summary>
             An object representation of the 'ZNodeAccount' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountBase">
            <summary>
             An object representation of the 'ZNodeAccount' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountBase"/> instance.
            </summary>
            <param name="accountParentAccountID"></param>
            <param name="accountPortalID"></param>
            <param name="accountUserID"></param>
            <param name="accountExternalAccountNo"></param>
            <param name="accountCompanyName"></param>
            <param name="accountAccountTypeID"></param>
            <param name="accountProfileID"></param>
            <param name="accountAccountProfileCode"></param>
            <param name="accountSubAccountLimit"></param>
            <param name="accountBillingFirstName"></param>
            <param name="accountBillingLastName"></param>
            <param name="accountBillingCompanyName"></param>
            <param name="accountBillingStreet"></param>
            <param name="accountBillingStreet1"></param>
            <param name="accountBillingCity"></param>
            <param name="accountBillingStateCode"></param>
            <param name="accountBillingPostalCode"></param>
            <param name="accountBillingCountryCode"></param>
            <param name="accountBillingPhoneNumber"></param>
            <param name="accountBillingEmailID"></param>
            <param name="accountShipFirstName"></param>
            <param name="accountShipLastName"></param>
            <param name="accountShipCompanyName"></param>
            <param name="accountShipStreet"></param>
            <param name="accountShipStreet1"></param>
            <param name="accountShipCity"></param>
            <param name="accountShipStateCode"></param>
            <param name="accountShipPostalCode"></param>
            <param name="accountShipCountryCode"></param>
            <param name="accountShipEmailID"></param>
            <param name="accountShipPhoneNumber"></param>
            <param name="accountDescription"></param>
            <param name="accountCreateUser"></param>
            <param name="accountCreateDte"></param>
            <param name="accountUpdateUser"></param>
            <param name="accountUpdateDte"></param>
            <param name="accountActiveInd"></param>
            <param name="accountWebsite"></param>
            <param name="accountSource"></param>
            <param name="accountReferredBy"></param>
            <param name="accountCustom1"></param>
            <param name="accountCustom2"></param>
            <param name="accountCustom3"></param>
            <param name="accountContactTemperatureID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.CreateAccount(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.String,System.Byte[],System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> instance.
            </summary>
            <param name="accountParentAccountID"></param>
            <param name="accountPortalID"></param>
            <param name="accountUserID"></param>
            <param name="accountExternalAccountNo"></param>
            <param name="accountCompanyName"></param>
            <param name="accountAccountTypeID"></param>
            <param name="accountProfileID"></param>
            <param name="accountAccountProfileCode"></param>
            <param name="accountSubAccountLimit"></param>
            <param name="accountBillingFirstName"></param>
            <param name="accountBillingLastName"></param>
            <param name="accountBillingCompanyName"></param>
            <param name="accountBillingStreet"></param>
            <param name="accountBillingStreet1"></param>
            <param name="accountBillingCity"></param>
            <param name="accountBillingStateCode"></param>
            <param name="accountBillingPostalCode"></param>
            <param name="accountBillingCountryCode"></param>
            <param name="accountBillingPhoneNumber"></param>
            <param name="accountBillingEmailID"></param>
            <param name="accountShipFirstName"></param>
            <param name="accountShipLastName"></param>
            <param name="accountShipCompanyName"></param>
            <param name="accountShipStreet"></param>
            <param name="accountShipStreet1"></param>
            <param name="accountShipCity"></param>
            <param name="accountShipStateCode"></param>
            <param name="accountShipPostalCode"></param>
            <param name="accountShipCountryCode"></param>
            <param name="accountShipEmailID"></param>
            <param name="accountShipPhoneNumber"></param>
            <param name="accountDescription"></param>
            <param name="accountCreateUser"></param>
            <param name="accountCreateDte"></param>
            <param name="accountUpdateUser"></param>
            <param name="accountUpdateDte"></param>
            <param name="accountActiveInd"></param>
            <param name="accountWebsite"></param>
            <param name="accountSource"></param>
            <param name="accountReferredBy"></param>
            <param name="accountCustom1"></param>
            <param name="accountCustom2"></param>
            <param name="accountCustom3"></param>
            <param name="accountContactTemperatureID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AccountColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AccountColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AccountColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AccountColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AccountBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.Copy">
            <summary>
              Returns a Typed Account Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.DeepCopy">
            <summary>
              Returns a Typed Account Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.Equals(ZNode.Libraries.DataAccess.Entities.AccountBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.Equals(ZNode.Libraries.DataAccess.Entities.AccountBase,ZNode.Libraries.DataAccess.Entities.AccountBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountID">
            <summary>
            	Gets or sets the AccountID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ParentAccountID">
            <summary>
            	Gets or sets the ParentAccountID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsParentAccountIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsPortalIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.UserID">
            <summary>
            	Gets or sets the UserID property. 
            	
            </summary>
            <value>This type is uniqueidentifier.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return Guid.Empty. It is up to the developer
            to check the value of IsUserIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ExternalAccountNo">
            <summary>
            	Gets or sets the ExternalAccountNo property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.CompanyName">
            <summary>
            	Gets or sets the CompanyName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountTypeID">
            <summary>
            	Gets or sets the AccountTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsAccountTypeIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ProfileID">
            <summary>
            	Gets or sets the ProfileID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsProfileIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountProfileCode">
            <summary>
            	Gets or sets the AccountProfileCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.SubAccountLimit">
            <summary>
            	Gets or sets the SubAccountLimit property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsSubAccountLimitNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingFirstName">
            <summary>
            	Gets or sets the BillingFirstName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingLastName">
            <summary>
            	Gets or sets the BillingLastName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingCompanyName">
            <summary>
            	Gets or sets the BillingCompanyName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingStreet">
            <summary>
            	Gets or sets the BillingStreet property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingStreet1">
            <summary>
            	Gets or sets the BillingStreet1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingCity">
            <summary>
            	Gets or sets the BillingCity property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingStateCode">
            <summary>
            	Gets or sets the BillingStateCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingPostalCode">
            <summary>
            	Gets or sets the BillingPostalCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingCountryCode">
            <summary>
            	Gets or sets the BillingCountryCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingPhoneNumber">
            <summary>
            	Gets or sets the BillingPhoneNumber property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.BillingEmailID">
            <summary>
            	Gets or sets the BillingEmailID property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipFirstName">
            <summary>
            	Gets or sets the ShipFirstName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipLastName">
            <summary>
            	Gets or sets the ShipLastName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipCompanyName">
            <summary>
            	Gets or sets the ShipCompanyName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipStreet">
            <summary>
            	Gets or sets the ShipStreet property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipStreet1">
            <summary>
            	Gets or sets the ShipStreet1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipCity">
            <summary>
            	Gets or sets the ShipCity property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipStateCode">
            <summary>
            	Gets or sets the ShipStateCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipPostalCode">
            <summary>
            	Gets or sets the ShipPostalCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipCountryCode">
            <summary>
            	Gets or sets the ShipCountryCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipEmailID">
            <summary>
            	Gets or sets the ShipEmailID property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ShipPhoneNumber">
            <summary>
            	Gets or sets the ShipPhoneNumber property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.CreateUser">
            <summary>
            	Gets or sets the CreateUser property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.CreateDte">
            <summary>
            	Gets or sets the CreateDte property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.UpdateUser">
            <summary>
            	Gets or sets the UpdateUser property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.UpdateDte">
            <summary>
            	Gets or sets the UpdateDte property. 
            	
            </summary>
            <value>This type is smalldatetime.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return DateTime.MinValue. It is up to the developer
            to check the value of IsUpdateDteNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsActiveIndNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Website">
            <summary>
            	Gets or sets the Website property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Source">
            <summary>
            	Gets or sets the Source property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ReferredBy">
            <summary>
            	Gets or sets the ReferredBy property. 
            	
            </summary>
            <value>This type is varbinary.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Custom1">
            <summary>
            	Gets or sets the Custom1 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Custom2">
            <summary>
            	Gets or sets the Custom2 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Custom3">
            <summary>
            	Gets or sets the Custom3 property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ContactTemperatureID">
            <summary>
            	Gets or sets the ContactTemperatureID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsContactTemperatureIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ParentAccountIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/>.
            </summary>
            <value>The source Account for ParentAccountID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/>.
            </summary>
            <value>The source AccountType for AccountTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ProfileIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/>.
            </summary>
            <value>The source Profile for ProfileID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ContactTemperatureIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/>.
            </summary>
            <value>The source ContactTemperature for ContactTemperatureID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.OrderCollection">
            <summary>
            Holds a collection of Order objects
            which are related to this object through the relation FK_SC_Order_Account
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.CaseCollectionByAccountID">
            <summary>
            Holds a collection of Case objects
            which are related to this object through the relation FK_SC_Case_SC_Account
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.NoteCollection">
            <summary>
            Holds a collection of Note objects
            which are related to this object through the relation FK_SC_Note_SC_Account
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.CaseCollectionByOwnerAccountID">
            <summary>
            Holds a collection of Case objects
            which are related to this object through the relation FK_SC_Case_SC_Account1
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountCollection">
            <summary>
            Holds a collection of Account objects
            which are related to this object through the relation FK_Account_Account
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AccountBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData">
            <summary>
            	The data structure representation of the 'ZNodeAccount' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.AccountID">
            <summary>			
            AccountID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeAccount"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ParentAccountID">
            <summary>
            ParentAccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.UserID">
            <summary>
            UserID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ExternalAccountNo">
            <summary>
            ExternalAccountNo : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.CompanyName">
            <summary>
            CompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.AccountTypeID">
            <summary>
            AccountTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.AccountProfileCode">
            <summary>
            AccountProfileCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.SubAccountLimit">
            <summary>
            SubAccountLimit : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingFirstName">
            <summary>
            BillingFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingLastName">
            <summary>
            BillingLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingCompanyName">
            <summary>
            BillingCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingStreet">
            <summary>
            BillingStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingStreet1">
            <summary>
            BillingStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingCity">
            <summary>
            BillingCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingStateCode">
            <summary>
            BillingStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingPostalCode">
            <summary>
            BillingPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingCountryCode">
            <summary>
            BillingCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingPhoneNumber">
            <summary>
            BillingPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.BillingEmailID">
            <summary>
            BillingEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipFirstName">
            <summary>
            ShipFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipLastName">
            <summary>
            ShipLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipCompanyName">
            <summary>
            ShipCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipStreet">
            <summary>
            ShipStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipStreet1">
            <summary>
            ShipStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipCity">
            <summary>
            ShipCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipStateCode">
            <summary>
            ShipStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipPostalCode">
            <summary>
            ShipPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipCountryCode">
            <summary>
            ShipCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipEmailID">
            <summary>
            ShipEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ShipPhoneNumber">
            <summary>
            ShipPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.CreateUser">
            <summary>
            CreateUser : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.CreateDte">
            <summary>
            CreateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.UpdateUser">
            <summary>
            UpdateUser : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.UpdateDte">
            <summary>
            UpdateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.Website">
            <summary>
            Website : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.Source">
            <summary>
            Source : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ReferredBy">
            <summary>
            ReferredBy : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.ContactTemperatureID">
            <summary>
            ContactTemperatureID : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.OrderCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderAccountID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.CaseCollectionByAccountID">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation @caseAccountID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.NoteCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation noteAccountID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.CaseCollectionByOwnerAccountID">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation @caseOwnerAccountID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountBase.AccountEntityData.AccountCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation accountParentAccountID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Account.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode">
            <summary>
             An object representation of the 'ZNodeShippingServiceCode' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingServiceCode"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn)">
            <summary>
             Initalizes a new Instance of the TaxRuleEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the TaxRuleEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleEventArgs.Column">
            <summary>
             The TaxRuleColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleEventHandler">
            <summary>
             Define a delegate for all TaxRule related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase">
            <summary>
             An object representation of the 'ZNodeTaxRule' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.#ctor(System.Int32,System.Decimal,System.String,System.String,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase"/> instance.
            </summary>
            <param name="taxRulePortalID"></param>
            <param name="taxRuleTaxRate"></param>
            <param name="taxRuleDestinationCountryCode"></param>
            <param name="taxRuleDestinationStateCode"></param>
            <param name="taxRulePrecedence"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.CreateTaxRule(System.Int32,System.Decimal,System.String,System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> instance.
            </summary>
            <param name="taxRulePortalID"></param>
            <param name="taxRuleTaxRate"></param>
            <param name="taxRuleDestinationCountryCode"></param>
            <param name="taxRuleDestinationStateCode"></param>
            <param name="taxRulePrecedence"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Copy">
            <summary>
              Returns a Typed TaxRule Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.DeepCopy">
            <summary>
              Returns a Typed TaxRule Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Equals(ZNode.Libraries.DataAccess.Entities.TaxRuleBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Equals(ZNode.Libraries.DataAccess.Entities.TaxRuleBase,ZNode.Libraries.DataAccess.Entities.TaxRuleBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleID">
            <summary>
            	Gets or sets the TaxRuleID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRate">
            <summary>
            	Gets or sets the TaxRate property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.DestinationCountryCode">
            <summary>
            	Gets or sets the DestinationCountryCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.DestinationStateCode">
            <summary>
            	Gets or sets the DestinationStateCode property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Precedence">
            <summary>
            	Gets or sets the Precedence property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.PortalIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/>.
            </summary>
            <value>The source Portal for PortalID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.DestinationCountryCodeSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/>.
            </summary>
            <value>The source Country for DestinationCountryCode.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData">
            <summary>
            	The data structure representation of the 'ZNodeTaxRule' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData.TaxRuleID">
            <summary>			
            TaxRuleID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeTaxRule"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData.TaxRate">
            <summary>
            TaxRate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData.DestinationCountryCode">
            <summary>
            DestinationCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData.DestinationStateCode">
            <summary>
            DestinationStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleBase.TaxRuleEntityData.Precedence">
            <summary>
            Precedence : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxRuleComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer.#ctor(ZNode.Libraries.DataAccess.Entities.TaxRuleColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer.Equals(ZNode.Libraries.DataAccess.Entities.TaxRule,ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> to compare.</param>
            <param name="b">The second <c>TaxRule</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer.Compare(ZNode.Libraries.DataAccess.Entities.TaxRule,ZNode.Libraries.DataAccess.Entities.TaxRule)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.#ctor">
            <summary>
            Initializes a new instance of the TaxRuleKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.#ctor(ZNode.Libraries.DataAccess.Entities.TaxRuleBase)">
            <summary>
            Initializes a new instance of the TaxRuleKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TaxRuleKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.TaxRuleKey.TaxRuleID">
            <summary>
            Gets or sets the TaxRuleID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn">
            <summary>
            Enumerate the TaxRule columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn.TaxRuleID">
            <summary>
            TaxRuleID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn.TaxRate">
            <summary>
            TaxRate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn.DestinationCountryCode">
            <summary>
            DestinationCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn.DestinationStateCode">
            <summary>
            DestinationStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.TaxRuleColumn.Precedence">
            <summary>
            Precedence : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList">
            <summary>
            A List of broken rules.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList.GetFirstBrokenRule(System.String)">
            <summary>
            Returns the firstRule <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The firstRule BrokenRule object corresponding to the specified property, or null if 
            there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList.#ctor">
            <summary>
            Internal contructor
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList.Add(ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo)">
            <summary>
            Add a broken rule to the list
            </summary>
            <param name="rule"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo"/> object containing the details about the rule.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList.Remove(ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo)">
            <summary>
            Removes a broken rule from the list
            </summary>
            <param name="rule"><see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleInfo"/> object containing the details about the rule.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList.GetPropertyErrorDescriptions(System.String)">
            <summary>
            Returns a string containing all of the broken rule descriptions for the specified property.
            </summary>
            <param name="propertyName">The name of the property to get the errors for.</param>
            <returns>String of the error descriptions</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Validation.BrokenRulesList.ToString">
            <summary>
            Returns the description of each broken rule separated by a new line.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityCache">
            <summary>
            Entity Cache provides a caching mechanism for entities on a by entity level.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.GenerateConfiguration">
            <summary>
            Generates the configuration.
            </summary>
            <returns>DictionaryConfigurationSource to Configure the cache</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.GenerateDefaultCacheManagerSettings">
            <summary>
            Generates the default cache manager settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.RemoveItem(System.String)">
            <summary>
            Removes the item.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.FlushCacheManager">
            <summary>
            Flushes the cache manager.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.FlushCache">
            <summary>
            Flushes the cache.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.AddCache(System.String,System.Object)">
            <summary>
            Adds the cache.
            </summary>
            <param name="id">The id.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityCache.GetItem``1(System.String)">
            <summary>
            Gets the item.
            </summary>
            <param name="id">The id.</param>
            <returns></returns> 
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityCache.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
            <value>The cache manager.</value>		
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityCache.ConfigurationFile">
            <summary>
            Gets or sets the configuration file.
            </summary>
            <value>The configuration file.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityCache.CacheManagerFactory">
            <summary>
            Gets or sets the cache manager factory.
            </summary>
            <value>The cache manager factory.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EntityCache.CacheManagerKey">
            <summary>
            Assigns the Default CacheManagerKey To Be Used.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityHelper">
            <summary>
            This classes contains utilities functions for the <see cref="T:ZNode.Libraries.DataAccess.Entities.IEntity"/> instances and collections.
            </summary>
            <remarks>All methods static</remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeBinary(ZNode.Libraries.DataAccess.Entities.IEntity)">
            <summary>
            Serializes the entity to binary.
            </summary>
            <param name="entity">The Entity to serialize.</param>
            <value>A byte array that contains the serialized entity.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeBinary(System.Collections.IList)">
            <summary>
            Serializes the entity collection to binary.
            </summary>
            <param name="entityCollection">The Entity collection to serialize.</param>
            <value>A byte array that contains the serialized entity.</value>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeBinary(ZNode.Libraries.DataAccess.Entities.IEntity,System.String)">
            <summary>
            Serializes the entity to binary and puts the data into a file.
            </summary>
            <param name="entity">The Entity to serialize.</param>
            <param name="path">The Path to the destination file.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeBinary(System.Collections.IList,System.String)">
            <summary>
            Serializes the entity collection to binary and puts the data into a file.
            </summary>
            <param name="entityCollection">The Entity collection to serialize.</param>
            <param name="path">The Path to the destination file.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.XmlSerialize``1(``0)">
            <summary>
            serialize an object to xml.
            </summary>
            <param name="item">The item to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeXml(ZNode.Libraries.DataAccess.Entities.IEntity)">
            <summary>
            Serializes the entity to Xml.
            </summary>
            <param name="entity">The Entity to serialize.</param>
            <returns>A string that contains the serialized entity.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeXml``1(ZNode.Libraries.DataAccess.Entities.TList{``0})">
            <summary>
            Serializes the <see cref="T:TList{T}"/> of IEntity to XML
            </summary>
            <typeparam name="T">type to return, type must implement IEntity</typeparam>
            <param name="entityCollection">TList of T type to return</param>
            <returns>string of serialized XML</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeXml(ZNode.Libraries.DataAccess.Entities.IEntity,System.String)">
            <summary>
            Serializes the entity to xml and puts the data into a file.
            </summary>
            <param name="entity">The Entity to serialize.</param>
            <param name="path">The Path to the destination file.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeXml``1(ZNode.Libraries.DataAccess.Entities.TList{``0},System.String)">
            <summary>
            Serializes the entity collection to xml and puts the data into a file.
            </summary>
            <param name="entityCollection">The Entity collection to serialize.</param>
            <param name="path">The Path to the destination file.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeXml``1(ZNode.Libraries.DataAccess.Entities.VList{``0})">
            <summary>
            Serializes the <see cref="T:VList{T}"/> of view entities to XML
            </summary>
            <typeparam name="T">type to return</typeparam>
            <param name="entityCollection">VList of T type to return</param>
            <returns>string of serialized XML</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.SerializeXml``1(ZNode.Libraries.DataAccess.Entities.VList{``0},System.String)">
            <summary>
            Serializes the view collection to xml and puts the data into a file.
            </summary>
            <param name="entityCollection">The Entity View collection to serialize.</param>
            <param name="path">The Path to the destination file.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.DeserializeBinary(System.Byte[])">
            <summary>
            Deserializes the binary data to an object instance.
            </summary>
            <param name="bytes">The byte array that contains binary serialized datas.</param>
            <returns>The deserialized instance</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.XmlDeserialize``1(System.String)">
            <summary>
            deserialize an xml string into an object.
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.DeserializeEntityXml``1(System.String)">
            <summary>
            Deserialize an Entity from an xml string to T
            </summary>
            <typeparam name="T">T where T : IEntity</typeparam>
            <param name="data">string of serialized xml</param>
            <returns>T where T : IEntity</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.DeserializeListXml``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"><see cref="T:TList{T}"/> where T : IEntity, new()</typeparam>
            <param name="data">string of serialized TList of T xml</param>
            <returns><see cref="T:TList{T}"/> where T : IEntity, new()</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.DeserializeXml(System.String,System.Type,System.Xml.XmlReader)">
            <summary>
            Deserializes the XML string to an instance of the specified type.
            </summary>
            <param name="root">The name of the root node.</param>
            <param name="type">The targeted Type.</param>
            <param name="reader">The xmlReader instance that point to the xml data.</param>
            <returns>An instance of the Type class.</returns>		
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.DeserializeVListXml``1(System.String)">
            <summary>
            Deserialize a list of view entity objects from an Xml string
            </summary>
            <typeparam name="T"><see cref="T:VList{T}"/> where T is a view entity class</typeparam>
            <param name="data">string of serialized VList of T xml</param>
            <returns><see cref="T:VList{T}"/></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.GetByteLength(System.Object)">
            <summary>
            Gets the byte length of the specified object.
            </summary>
            <param name="obj">The object we want the length.</param>
            <returns>The byte length of the object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.ToString(System.Object)">
            <summary>
            Give a string representation of a object, with use of reflection.
            </summary>
            <param name="o">O.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.Clone``1(``0)">
            <summary>
            Generic method to perform a deep copy of an object
            </summary>
            <typeparam name="T">Type of object being cloned and returned</typeparam>
            <param name="sourceEntity">Source object to be cloned.</param>
            <returns>An object that is a deep copy of the sourceEntity object.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.GetBindableProperties(System.Type)">
            <summary>
            Get the collection of properties that have been marked as Bindable
            </summary>
            <param name="type">The type of the object to get the properties for.</param>
            <returns><see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> of bindable properties.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.GetEnumTextValue(System.Enum)">
            <summary>
             Allows the discovery of an enumeration text value based on the <c>EnumTextValueAttribute</c>
            </summary>
             <param name="e">The enum to get the reader friendly text value for.</param>
             <returns><see cref="T:System.String"/> </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.GetEnumValue(System.String,System.Type)">
            <summary>
             Allows the discovery of an enumeration value based on the <c>EnumTextValueAttribute</c>
            </summary>
             <param name="text">The text of the <c>EnumTextValueAttribute</c>.</param>
             <param name="enumType">The type of the enum to get the value for.</param>
             <returns><see cref="T:System.Object"/> boxed representation of the enum value </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityHelper.GetAttribute``1(System.Enum)">
            <summary>
            Gets the first occurrence of the specified type of <see cref="T:System.Attribute"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.BindableAttribute">
            <summary>
            Attach this to every property that should be 
            displayed in the designer.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.BindableAttribute.#ctor">
            <summary>
            Intitialize a new instance of the BindableAttribute class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EnumTextValueAttribute">
            <summary>
             Attribute used to decorate enumerations with reader friendly names
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EnumTextValueAttribute.#ctor(System.String)">
            <summary>
             Allows the creation of a friendly text representation of the enumeration.
            </summary>
             <param name="text">The reader friendly text to decorate the enum.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.EnumTextValueAttribute.Text">
            <summary>
             Returns the text representation of the value
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute">
            <summary>
            Provides column metadata information for an entity column enumeration.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.#ctor(System.String,System.Type,System.Data.DbType,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the ColumnEnumAttribute class.
            </summary>
            <param name="name"></param>
            <param name="systemType"></param>
            <param name="dbType"></param>
            <param name="isPrimaryKey"></param>
            <param name="isIdentity"></param>
            <param name="allowDbNull"></param>
            <param name="length"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.#ctor(System.String,System.Type,System.Data.DbType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ColumnEnumAttribute class.
            </summary>
            <param name="name"></param>
            <param name="systemType"></param>
            <param name="dbType"></param>
            <param name="isPrimaryKey"></param>
            <param name="isIdentity"></param>
            <param name="allowDbNull"></param>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.systemType">
            <summary>
            The SystemType member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.dbType">
            <summary>
            The DbType member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.isPrimaryKey">
            <summary>
            The IsPrimaryKey member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.isIdentity">
            <summary>
            The IsIdentity member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.allowDbNull">
            <summary>
            The AllowDbNull member variable.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.length">
            <summary>
            The Length member variable.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.SystemType">
            <summary>
            Gets or sets the SystemType property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.DbType">
            <summary>
            Gets or sets the DbType property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.IsPrimaryKey">
            <summary>
            Gets or sets the IsPrimaryKey property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.IsIdentity">
            <summary>
            Gets or sets the IsIdentity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.AllowDbNull">
            <summary>
            Gets or sets the AllowDbNull property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ColumnEnumAttribute.Length">
            <summary>
            Gets or sets the Length property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GenericStateChangedEventArgs`1">
            <summary>
            Provides a generic way to inform interested objects about state change
            Supplies the old value and the new value of the changed state.
            </summary>
            <typeparam name="T">State Object</typeparam>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GenericStateChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.GenericStateChangedEventArgs`1"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GenericStateChangedEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.GenericStateChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.HighlightColumn)">
            <summary>
             Initalizes a new Instance of the HighlightEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.HighlightColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the HighlightEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightEventArgs.Column">
            <summary>
             The HighlightColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.HighlightColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightEventHandler">
            <summary>
             Define a delegate for all Highlight related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HighlightComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightComparer.#ctor(ZNode.Libraries.DataAccess.Entities.HighlightColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightComparer.Equals(ZNode.Libraries.DataAccess.Entities.Highlight,ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> to compare.</param>
            <param name="b">The second <c>Highlight</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightComparer.Compare(ZNode.Libraries.DataAccess.Entities.Highlight,ZNode.Libraries.DataAccess.Entities.Highlight)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Highlight"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightKey.#ctor">
            <summary>
            Initializes a new instance of the HighlightKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightKey.#ctor(ZNode.Libraries.DataAccess.Entities.HighlightBase)">
            <summary>
            Initializes a new instance of the HighlightKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the HighlightKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.HighlightKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.HighlightKey.HighlightID">
            <summary>
            Gets or sets the HighlightID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.HighlightColumn">
            <summary>
            Enumerate the Highlight columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightColumn.HighlightID">
            <summary>
            HighlightID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightColumn.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.HighlightColumn.DisplayPopup">
            <summary>
            DisplayPopup : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOn">
            <summary>
             An object representation of the 'ZNodeAddOn' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnBase">
            <summary>
             An object representation of the 'ZNodeAddOn' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnBase"/> instance.
            </summary>
            <param name="addOnProductID"></param>
            <param name="addOnTitle"></param>
            <param name="addOnName"></param>
            <param name="addOnDescription"></param>
            <param name="addOnDisplayOrder"></param>
            <param name="addOnDisplayType"></param>
            <param name="addOnOptionalInd"></param>
            <param name="addOnAllowBackOrder"></param>
            <param name="addOnInStockMsg"></param>
            <param name="addOnOutOfStockMsg"></param>
            <param name="addOnBackOrderMsg"></param>
            <param name="addOnPromptMsg"></param>
            <param name="addOnTrackInventoryInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.CreateAddOn(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> instance.
            </summary>
            <param name="addOnProductID"></param>
            <param name="addOnTitle"></param>
            <param name="addOnName"></param>
            <param name="addOnDescription"></param>
            <param name="addOnDisplayOrder"></param>
            <param name="addOnDisplayType"></param>
            <param name="addOnOptionalInd"></param>
            <param name="addOnAllowBackOrder"></param>
            <param name="addOnInStockMsg"></param>
            <param name="addOnOutOfStockMsg"></param>
            <param name="addOnBackOrderMsg"></param>
            <param name="addOnPromptMsg"></param>
            <param name="addOnTrackInventoryInd"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AddOnColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AddOnColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.AddOnColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.AddOnColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.Copy">
            <summary>
              Returns a Typed AddOn Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.DeepCopy">
            <summary>
              Returns a Typed AddOn Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.Equals(ZNode.Libraries.DataAccess.Entities.AddOnBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.Equals(ZNode.Libraries.DataAccess.Entities.AddOnBase,ZNode.Libraries.DataAccess.Entities.AddOnBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnID">
            <summary>
            	Gets or sets the AddOnID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.Title">
            <summary>
            	Gets or sets the Title property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.DisplayType">
            <summary>
            	Gets or sets the DisplayType property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.OptionalInd">
            <summary>
            	Gets or sets the OptionalInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.AllowBackOrder">
            <summary>
            	Gets or sets the AllowBackOrder property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.InStockMsg">
            <summary>
            	Gets or sets the InStockMsg property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.OutOfStockMsg">
            <summary>
            	Gets or sets the OutOfStockMsg property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.BackOrderMsg">
            <summary>
            	Gets or sets the BackOrderMsg property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.PromptMsg">
            <summary>
            	Gets or sets the PromptMsg property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.TrackInventoryInd">
            <summary>
            	Gets or sets the TrackInventoryInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnValueCollection">
            <summary>
            Holds a collection of AddOnValue objects
            which are related to this object through the relation FK_ZNodeProductAddOnValue_ZNodeProductAddOn
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.ProductAddOnCollection">
            <summary>
            Holds a collection of ProductAddOn objects
            which are related to this object through the relation FK_ZNodeProductAddOn_ZNodeAddOn
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.AddOnBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData">
            <summary>
            	The data structure representation of the 'ZNodeAddOn' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.AddOnID">
            <summary>			
            AddOnID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeAddOn"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.DisplayType">
            <summary>
            DisplayType : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.OptionalInd">
            <summary>
            OptionalInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.AllowBackOrder">
            <summary>
            AllowBackOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.InStockMsg">
            <summary>
            InStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.OutOfStockMsg">
            <summary>
            OutOfStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.BackOrderMsg">
            <summary>
            BackOrderMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.PromptMsg">
            <summary>
            PromptMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.TrackInventoryInd">
            <summary>
            TrackInventoryInd : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.AddOnValueCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation addOnValueAddOnID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnBase.AddOnEntityData.ProductAddOnCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productAddOnAddOnID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOn.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn)">
            <summary>
             Initalizes a new Instance of the AccountTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the AccountTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeEventArgs.Column">
            <summary>
             The AccountTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeEventHandler">
            <summary>
             Define a delegate for all AccountType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AccountTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.AccountTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.AccountType,ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> to compare.</param>
            <param name="b">The second <c>AccountType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.AccountType,ZNode.Libraries.DataAccess.Entities.AccountType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AccountType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.#ctor">
            <summary>
            Initializes a new instance of the AccountTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.AccountTypeBase)">
            <summary>
            Initializes a new instance of the AccountTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AccountTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountTypeKey.AccountTypeID">
            <summary>
            Gets or sets the AccountTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn">
            <summary>
            Enumerate the AccountType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn.AccountTypeID">
            <summary>
            AccountTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountTypeColumn.AccountTypeNme">
            <summary>
            AccountTypeNme : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn)">
            <summary>
             Initalizes a new Instance of the ShippingTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ShippingTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeEventArgs.Column">
            <summary>
             The ShippingTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeEventHandler">
            <summary>
             Define a delegate for all ShippingType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase">
            <summary>
             An object representation of the 'ZNodeShippingType' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.#ctor(System.Int32,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase"/> instance.
            </summary>
            <param name="shippingTypeShippingTypeID"></param>
            <param name="shippingTypeName"></param>
            <param name="shippingTypeDescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.CreateShippingType(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> instance.
            </summary>
            <param name="shippingTypeShippingTypeID"></param>
            <param name="shippingTypeName"></param>
            <param name="shippingTypeDescription"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Copy">
            <summary>
              Returns a Typed ShippingType Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.DeepCopy">
            <summary>
              Returns a Typed ShippingType Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingTypeBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingTypeBase,ZNode.Libraries.DataAccess.Entities.ShippingTypeBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeID">
            <summary>
            	Gets or sets the ShippingTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.OriginalShippingTypeID">
            <summary>
            	Get the original value of the ShippingTypeID property.
            	
            </summary>
            <remarks>This is the original value of the ShippingTypeID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Name">
            <summary>
            	Gets or sets the Name property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Description">
            <summary>
            	Gets or sets the Description property. 
            	
            </summary>
            <value>This type is text.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingServiceCodeCollection">
            <summary>
            Holds a collection of ShippingServiceCode objects
            which are related to this object through the relation FK_ZNodeShippingServiceCode_ZNodeShippingType
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingCollection">
            <summary>
            Holds a collection of Shipping objects
            which are related to this object through the relation FK_SC_Shipping_SC_ShippingType
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData">
            <summary>
            	The data structure representation of the 'ZNodeShippingType' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData.ShippingTypeID">
            <summary>			
            ShippingTypeID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeShippingType"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData.OriginalShippingTypeID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData.ShippingServiceCodeCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation shippingServiceCodeShippingTypeID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeBase.ShippingTypeEntityData.ShippingCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation shippingShippingTypeID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ShippingTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.ShippingType,ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> to compare.</param>
            <param name="b">The second <c>ShippingType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.ShippingType,ZNode.Libraries.DataAccess.Entities.ShippingType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.#ctor">
            <summary>
            Initializes a new instance of the ShippingTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingTypeBase)">
            <summary>
            Initializes a new instance of the ShippingTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ShippingTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingTypeKey.ShippingTypeID">
            <summary>
            Gets or sets the ShippingTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn">
            <summary>
            Enumerate the ShippingType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn.ShippingTypeID">
            <summary>
            ShippingTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingTypeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn)">
            <summary>
             Initalizes a new Instance of the SKUAttributeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the SKUAttributeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeEventArgs.Column">
            <summary>
             The SKUAttributeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeEventHandler">
            <summary>
             Define a delegate for all SKUAttribute related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SKUAttributeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer.Equals(ZNode.Libraries.DataAccess.Entities.SKUAttribute,ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> to compare.</param>
            <param name="b">The second <c>SKUAttribute</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer.Compare(ZNode.Libraries.DataAccess.Entities.SKUAttribute,ZNode.Libraries.DataAccess.Entities.SKUAttribute)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.SKUAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.#ctor">
            <summary>
            Initializes a new instance of the SKUAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.#ctor(ZNode.Libraries.DataAccess.Entities.SKUAttributeBase)">
            <summary>
            Initializes a new instance of the SKUAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SKUAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.SKUAttributeKey.SKUAttributeID">
            <summary>
            Gets or sets the SKUAttributeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn">
            <summary>
            Enumerate the SKUAttribute columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn.SKUAttributeID">
            <summary>
            SKUAttributeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn.SKUID">
            <summary>
            SKUID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.SKUAttributeColumn.AttributeId">
            <summary>
            AttributeId : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountType">
            <summary>
             An object representation of the 'ZNodeDiscountType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn)">
            <summary>
             Initalizes a new Instance of the ShippingRuleEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ShippingRuleEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleEventArgs.Column">
            <summary>
             The ShippingRuleColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleEventHandler">
            <summary>
             Define a delegate for all ShippingRule related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase">
            <summary>
             An object representation of the 'ZNodeShippingRule' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.#ctor(System.Int32,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase"/> instance.
            </summary>
            <param name="shippingRuleShippingID"></param>
            <param name="shippingRuleShippingRuleTypeID"></param>
            <param name="shippingRuleLowerLimit"></param>
            <param name="shippingRuleUpperLimit"></param>
            <param name="shippingRuleBaseCost"></param>
            <param name="shippingRulePerItemCost"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.CreateShippingRule(System.Int32,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> instance.
            </summary>
            <param name="shippingRuleShippingID"></param>
            <param name="shippingRuleShippingRuleTypeID"></param>
            <param name="shippingRuleLowerLimit"></param>
            <param name="shippingRuleUpperLimit"></param>
            <param name="shippingRuleBaseCost"></param>
            <param name="shippingRulePerItemCost"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Copy">
            <summary>
              Returns a Typed ShippingRule Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.DeepCopy">
            <summary>
              Returns a Typed ShippingRule Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingRuleBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Equals(ZNode.Libraries.DataAccess.Entities.ShippingRuleBase,ZNode.Libraries.DataAccess.Entities.ShippingRuleBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleID">
            <summary>
            	Gets or sets the ShippingRuleID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingID">
            <summary>
            	Gets or sets the ShippingID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleTypeID">
            <summary>
            	Gets or sets the ShippingRuleTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.LowerLimit">
            <summary>
            	Gets or sets the LowerLimit property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0.0m. It is up to the developer
            to check the value of IsLowerLimitNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.UpperLimit">
            <summary>
            	Gets or sets the UpperLimit property. 
            	
            </summary>
            <value>This type is decimal.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return 0.0m. It is up to the developer
            to check the value of IsUpperLimitNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.BaseCost">
            <summary>
            	Gets or sets the BaseCost property. 
            	
            </summary>
            <value>This type is smallmoney.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.PerItemCost">
            <summary>
            	Gets or sets the PerItemCost property. 
            	
            </summary>
            <value>This type is smallmoney.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/>.
            </summary>
            <value>The source Shipping for ShippingID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleType"/>.
            </summary>
            <value>The source ShippingRuleType for ShippingRuleTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData">
            <summary>
            	The data structure representation of the 'ZNodeShippingRule' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.ShippingRuleID">
            <summary>			
            ShippingRuleID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeShippingRule"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.ShippingID">
            <summary>
            ShippingID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.ShippingRuleTypeID">
            <summary>
            ShippingRuleTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.LowerLimit">
            <summary>
            LowerLimit : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.UpperLimit">
            <summary>
            UpperLimit : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.BaseCost">
            <summary>
            BaseCost : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleBase.ShippingRuleEntityData.PerItemCost">
            <summary>
            PerItemCost : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ShippingRuleComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer.Equals(ZNode.Libraries.DataAccess.Entities.ShippingRule,ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> to compare.</param>
            <param name="b">The second <c>ShippingRule</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer.Compare(ZNode.Libraries.DataAccess.Entities.ShippingRule,ZNode.Libraries.DataAccess.Entities.ShippingRule)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.#ctor">
            <summary>
            Initializes a new instance of the ShippingRuleKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.#ctor(ZNode.Libraries.DataAccess.Entities.ShippingRuleBase)">
            <summary>
            Initializes a new instance of the ShippingRuleKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ShippingRuleKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ShippingRuleKey.ShippingRuleID">
            <summary>
            Gets or sets the ShippingRuleID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn">
            <summary>
            Enumerate the ShippingRule columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.ShippingRuleID">
            <summary>
            ShippingRuleID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.ShippingID">
            <summary>
            ShippingID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.ShippingRuleTypeID">
            <summary>
            ShippingRuleTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.LowerLimit">
            <summary>
            LowerLimit : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.UpperLimit">
            <summary>
            UpperLimit : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.BaseCost">
            <summary>
            BaseCost : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ShippingRuleColumn.PerItemCost">
            <summary>
            PerItemCost : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn)">
            <summary>
             Initalizes a new Instance of the ProductAddOnEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductAddOnEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnEventArgs.Column">
            <summary>
             The ProductAddOnColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnEventHandler">
            <summary>
             Define a delegate for all ProductAddOn related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase">
            <summary>
             An object representation of the 'ZNodeProductAddOn' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase"/> instance.
            </summary>
            <param name="productAddOnProductID"></param>
            <param name="productAddOnAddOnID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.CreateProductAddOn(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> instance.
            </summary>
            <param name="productAddOnProductID"></param>
            <param name="productAddOnAddOnID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Copy">
            <summary>
              Returns a Typed ProductAddOn Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.DeepCopy">
            <summary>
              Returns a Typed ProductAddOn Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductAddOnBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductAddOnBase,ZNode.Libraries.DataAccess.Entities.ProductAddOnBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductAddOnID">
            <summary>
            	Gets or sets the ProductAddOnID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.AddOnID">
            <summary>
            	Gets or sets the AddOnID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/>.
            </summary>
            <value>The source Product for ProductID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.AddOnIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/>.
            </summary>
            <value>The source AddOn for AddOnID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductAddOnEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductAddOn' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductAddOnEntityData.ProductAddOnID">
            <summary>			
            ProductAddOnID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductAddOn"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductAddOnEntityData.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnBase.ProductAddOnEntityData.AddOnID">
            <summary>
            AddOnID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductAddOnComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductAddOn,ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> to compare.</param>
            <param name="b">The second <c>ProductAddOn</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductAddOn,ZNode.Libraries.DataAccess.Entities.ProductAddOn)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.#ctor">
            <summary>
            Initializes a new instance of the ProductAddOnKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductAddOnBase)">
            <summary>
            Initializes a new instance of the ProductAddOnKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductAddOnKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductAddOnKey.ProductAddOnID">
            <summary>
            Gets or sets the ProductAddOnID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn">
            <summary>
            Enumerate the ProductAddOn columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn.ProductAddOnID">
            <summary>
            ProductAddOnID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductAddOnColumn.AddOnID">
            <summary>
            AddOnID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn">
            <summary>
             An object representation of the 'ZNodeProductAddOn' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductAddOn.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductAddOn"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn)">
            <summary>
             Initalizes a new Instance of the ProductTypeAttributeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductTypeAttributeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeEventArgs.Column">
            <summary>
             The ProductTypeAttributeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeEventHandler">
            <summary>
             Define a delegate for all ProductTypeAttribute related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductTypeAttributeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> to compare.</param>
            <param name="b">The second <c>ProductTypeAttribute</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute,ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttribute"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeBase)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductTypeAttributeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeKey.ProductAttributeTypeID">
            <summary>
            Gets or sets the ProductAttributeTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn">
            <summary>
            Enumerate the ProductTypeAttribute columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn.ProductAttributeTypeID">
            <summary>
            ProductAttributeTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn.ProductTypeId">
            <summary>
            ProductTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeAttributeColumn.AttributeTypeId">
            <summary>
            AttributeTypeId : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleHandler">
            <summary>
            Delegate providing the signature of all methods that will process validation rules.
            </summary>
            <remarks>
            <para>
            The method handler should set the Description attribute of the 
            <see cref="T:ZNode.Libraries.DataAccess.Entities.Validation.ValidationRuleArgs"/> parameter so that a meaningful
            error is returned.
            </para><para>
            If the data is valid, the method must return true.  If the data is invalid,
            the Description should be set the false should be returned.
            </para>
            </remarks>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.GenericTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            Used by the nettiers strongly typed collection, so they can be saved in ViewState.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GenericTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.GenericTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GenericTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.GenericTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn)">
            <summary>
             Initalizes a new Instance of the DiscountTargetEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the DiscountTargetEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetEventArgs.Column">
            <summary>
             The DiscountTargetColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetEventHandler">
            <summary>
             Define a delegate for all DiscountTarget related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase">
            <summary>
             An object representation of the 'ZNodeDiscountTarget' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.#ctor(System.Int32,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase"/> instance.
            </summary>
            <param name="discountTargetDiscountTargetID"></param>
            <param name="discountTargetDiscountTargetName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.CreateDiscountTarget(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/> instance.
            </summary>
            <param name="discountTargetDiscountTargetID"></param>
            <param name="discountTargetDiscountTargetName"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Copy">
            <summary>
              Returns a Typed DiscountTarget Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DeepCopy">
            <summary>
              Returns a Typed DiscountTarget Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Equals(ZNode.Libraries.DataAccess.Entities.DiscountTargetBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Equals(ZNode.Libraries.DataAccess.Entities.DiscountTargetBase,ZNode.Libraries.DataAccess.Entities.DiscountTargetBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetID">
            <summary>
            	Gets or sets the DiscountTargetID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.OriginalDiscountTargetID">
            <summary>
            	Get the original value of the DiscountTargetID property.
            	
            </summary>
            <remarks>This is the original value of the DiscountTargetID property.</remarks>
            <value>This type is int</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetName">
            <summary>
            	Gets or sets the DiscountTargetName property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.CouponCollection">
            <summary>
            Holds a collection of Coupon objects
            which are related to this object through the relation FK_ZNodeCoupon_ZNodeDiscountTarget
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetEntityData">
            <summary>
            	The data structure representation of the 'ZNodeDiscountTarget' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetEntityData.DiscountTargetID">
            <summary>			
            DiscountTargetID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeDiscountTarget"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetEntityData.OriginalDiscountTargetID">
            <summary>
            keep a copy of the original so it can be used for editable primary keys.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetEntityData.DiscountTargetName">
            <summary>
            DiscountTargetName : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetBase.DiscountTargetEntityData.CouponCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation couponDiscountTargetID
            </summary>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DiscountTargetComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer.Equals(ZNode.Libraries.DataAccess.Entities.DiscountTarget,ZNode.Libraries.DataAccess.Entities.DiscountTarget)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/> to compare.</param>
            <param name="b">The second <c>DiscountTarget</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.DiscountTarget)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer.Compare(ZNode.Libraries.DataAccess.Entities.DiscountTarget,ZNode.Libraries.DataAccess.Entities.DiscountTarget)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.#ctor">
            <summary>
            Initializes a new instance of the DiscountTargetKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.#ctor(ZNode.Libraries.DataAccess.Entities.DiscountTargetBase)">
            <summary>
            Initializes a new instance of the DiscountTargetKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DiscountTargetKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.DiscountTargetKey.DiscountTargetID">
            <summary>
            Gets or sets the DiscountTargetID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn">
            <summary>
            Enumerate the DiscountTarget columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn.DiscountTargetID">
            <summary>
            DiscountTargetID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.DiscountTargetColumn.DiscountTargetName">
            <summary>
            DiscountTargetName : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CategoryColumn)">
            <summary>
             Initalizes a new Instance of the CategoryEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CategoryColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CategoryEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryEventArgs.Column">
            <summary>
             The CategoryColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CategoryColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryEventHandler">
            <summary>
             Define a delegate for all Category related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CategoryComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CategoryColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryComparer.Equals(ZNode.Libraries.DataAccess.Entities.Category,ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> to compare.</param>
            <param name="b">The second <c>Category</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryComparer.Compare(ZNode.Libraries.DataAccess.Entities.Category,ZNode.Libraries.DataAccess.Entities.Category)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryKey.#ctor">
            <summary>
            Initializes a new instance of the CategoryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryKey.#ctor(ZNode.Libraries.DataAccess.Entities.CategoryBase)">
            <summary>
            Initializes a new instance of the CategoryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CategoryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CategoryKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CategoryKey.CategoryID">
            <summary>
            Gets or sets the CategoryID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CategoryColumn">
            <summary>
            Enumerate the Category columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.CategoryID">
            <summary>
            CategoryID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.ShortDescription">
            <summary>
            ShortDescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.ParentCategoryID">
            <summary>
            ParentCategoryID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.VisibleInd">
            <summary>
            VisibleInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.SubCategoryGridVisibleInd">
            <summary>
            SubCategoryGridVisibleInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.SEOTitle">
            <summary>
            SEOTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.SEOKeywords">
            <summary>
            SEOKeywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CategoryColumn.SEODescription">
            <summary>
            SEODescription : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingRule">
            <summary>
             An object representation of the 'ZNodeShippingRule' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingRule.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingRule"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.State">
            <summary>
             An object representation of the 'ZNodeState' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.State.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.State"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentType">
            <summary>
             An object representation of the 'ZNodePaymentType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn)">
            <summary>
             Initalizes a new Instance of the ProductCrossSellEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductCrossSellEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellEventArgs.Column">
            <summary>
             The ProductCrossSellColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellEventHandler">
            <summary>
             Define a delegate for all ProductCrossSell related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase">
            <summary>
             An object representation of the 'ZNodeProductCrossSell' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.#ctor(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase"/> instance.
            </summary>
            <param name="productCrossSellPortalId"></param>
            <param name="productCrossSellProductId"></param>
            <param name="productCrossSellRelatedProductId"></param>
            <param name="productCrossSellDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.CreateProductCrossSell(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> instance.
            </summary>
            <param name="productCrossSellPortalId"></param>
            <param name="productCrossSellProductId"></param>
            <param name="productCrossSellRelatedProductId"></param>
            <param name="productCrossSellDisplayOrder"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Copy">
            <summary>
              Returns a Typed ProductCrossSell Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.DeepCopy">
            <summary>
              Returns a Typed ProductCrossSell Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase,ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellTypeId">
            <summary>
            	Gets or sets the ProductCrossSellTypeId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.PortalId">
            <summary>
            	Gets or sets the PortalId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductId">
            <summary>
            	Gets or sets the ProductId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.RelatedProductId">
            <summary>
            	Gets or sets the RelatedProductId property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsDisplayOrderNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductIdSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/>.
            </summary>
            <value>The source Product for ProductId.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductCrossSell' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellEntityData.ProductCrossSellTypeId">
            <summary>			
            ProductCrossSellTypeId : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductCrossSell"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellEntityData.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellEntityData.ProductId">
            <summary>
            ProductId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellEntityData.RelatedProductId">
            <summary>
            RelatedProductId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase.ProductCrossSellEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductCrossSellComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductCrossSell,ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> to compare.</param>
            <param name="b">The second <c>ProductCrossSell</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductCrossSell,ZNode.Libraries.DataAccess.Entities.ProductCrossSell)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.#ctor">
            <summary>
            Initializes a new instance of the ProductCrossSellKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCrossSellBase)">
            <summary>
            Initializes a new instance of the ProductCrossSellKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductCrossSellKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCrossSellKey.ProductCrossSellTypeId">
            <summary>
            Gets or sets the ProductCrossSellTypeId property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn">
            <summary>
            Enumerate the ProductCrossSell columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn.ProductCrossSellTypeId">
            <summary>
            ProductCrossSellTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn.ProductId">
            <summary>
            ProductId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn.RelatedProductId">
            <summary>
            RelatedProductId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCrossSellColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Case"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CaseColumn)">
            <summary>
             Initalizes a new Instance of the CaseEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CaseColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CaseEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseEventArgs.Column">
            <summary>
             The CaseColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CaseColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseEventHandler">
            <summary>
             Define a delegate for all Case related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CaseComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CaseColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseComparer.Equals(ZNode.Libraries.DataAccess.Entities.Case,ZNode.Libraries.DataAccess.Entities.Case)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Case"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Case"/> to compare.</param>
            <param name="b">The second <c>Case</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Case)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseComparer.Compare(ZNode.Libraries.DataAccess.Entities.Case,ZNode.Libraries.DataAccess.Entities.Case)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Case"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseKey.#ctor">
            <summary>
            Initializes a new instance of the CaseKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseKey.#ctor(ZNode.Libraries.DataAccess.Entities.CaseBase)">
            <summary>
            Initializes a new instance of the CaseKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CaseKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseKey.CaseID">
            <summary>
            Gets or sets the CaseID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseColumn">
            <summary>
            Enumerate the Case columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CaseID">
            <summary>
            CaseID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.OwnerAccountID">
            <summary>
            OwnerAccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CaseStatusID">
            <summary>
            CaseStatusID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CasePriorityID">
            <summary>
            CasePriorityID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CaseTypeID">
            <summary>
            CaseTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CaseOrigin">
            <summary>
            CaseOrigin : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.FirstName">
            <summary>
            FirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.LastName">
            <summary>
            LastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CompanyName">
            <summary>
            CompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.EmailID">
            <summary>
            EmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.PhoneNumber">
            <summary>
            PhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CreateDte">
            <summary>
            CreateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseColumn.CreateUser">
            <summary>
            CreateUser : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AccountColumn)">
            <summary>
             Initalizes a new Instance of the AccountEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AccountColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the AccountEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountEventArgs.Column">
            <summary>
             The AccountColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.AccountColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountEventHandler">
            <summary>
             Define a delegate for all Account related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AccountComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountComparer.#ctor(ZNode.Libraries.DataAccess.Entities.AccountColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountComparer.Equals(ZNode.Libraries.DataAccess.Entities.Account,ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> to compare.</param>
            <param name="b">The second <c>Account</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountComparer.Compare(ZNode.Libraries.DataAccess.Entities.Account,ZNode.Libraries.DataAccess.Entities.Account)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Account"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountKey.#ctor">
            <summary>
            Initializes a new instance of the AccountKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountKey.#ctor(ZNode.Libraries.DataAccess.Entities.AccountBase)">
            <summary>
            Initializes a new instance of the AccountKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AccountKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AccountKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AccountKey.AccountID">
            <summary>
            Gets or sets the AccountID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AccountColumn">
            <summary>
            Enumerate the Account columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ParentAccountID">
            <summary>
            ParentAccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.UserID">
            <summary>
            UserID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ExternalAccountNo">
            <summary>
            ExternalAccountNo : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.CompanyName">
            <summary>
            CompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.AccountTypeID">
            <summary>
            AccountTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.AccountProfileCode">
            <summary>
            AccountProfileCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.SubAccountLimit">
            <summary>
            SubAccountLimit : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingFirstName">
            <summary>
            BillingFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingLastName">
            <summary>
            BillingLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingCompanyName">
            <summary>
            BillingCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingStreet">
            <summary>
            BillingStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingStreet1">
            <summary>
            BillingStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingCity">
            <summary>
            BillingCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingStateCode">
            <summary>
            BillingStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingPostalCode">
            <summary>
            BillingPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingCountryCode">
            <summary>
            BillingCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingPhoneNumber">
            <summary>
            BillingPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.BillingEmailID">
            <summary>
            BillingEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipFirstName">
            <summary>
            ShipFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipLastName">
            <summary>
            ShipLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipCompanyName">
            <summary>
            ShipCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipStreet">
            <summary>
            ShipStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipStreet1">
            <summary>
            ShipStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipCity">
            <summary>
            ShipCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipStateCode">
            <summary>
            ShipStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipPostalCode">
            <summary>
            ShipPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipCountryCode">
            <summary>
            ShipCountryCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipEmailID">
            <summary>
            ShipEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ShipPhoneNumber">
            <summary>
            ShipPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.CreateUser">
            <summary>
            CreateUser : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.CreateDte">
            <summary>
            CreateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.UpdateUser">
            <summary>
            UpdateUser : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.UpdateDte">
            <summary>
            UpdateDte : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.Website">
            <summary>
            Website : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.Source">
            <summary>
            Source : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ReferredBy">
            <summary>
            ReferredBy : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AccountColumn.ContactTemperatureID">
            <summary>
            ContactTemperatureID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnColumn)">
            <summary>
             Initalizes a new Instance of the AddOnEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the AddOnEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnEventArgs.Column">
            <summary>
             The AddOnColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.AddOnColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnEventHandler">
            <summary>
             Define a delegate for all AddOn related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AddOnComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnComparer.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnComparer.Equals(ZNode.Libraries.DataAccess.Entities.AddOn,ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> to compare.</param>
            <param name="b">The second <c>AddOn</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnComparer.Compare(ZNode.Libraries.DataAccess.Entities.AddOn,ZNode.Libraries.DataAccess.Entities.AddOn)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOn"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnKey.#ctor">
            <summary>
            Initializes a new instance of the AddOnKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnKey.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnBase)">
            <summary>
            Initializes a new instance of the AddOnKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AddOnKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnKey.AddOnID">
            <summary>
            Gets or sets the AddOnID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnColumn">
            <summary>
            Enumerate the AddOn columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.AddOnID">
            <summary>
            AddOnID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.Title">
            <summary>
            Title : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.DisplayType">
            <summary>
            DisplayType : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.OptionalInd">
            <summary>
            OptionalInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.AllowBackOrder">
            <summary>
            AllowBackOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.InStockMsg">
            <summary>
            InStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.OutOfStockMsg">
            <summary>
            OutOfStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.BackOrderMsg">
            <summary>
            BackOrderMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.PromptMsg">
            <summary>
            PromptMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnColumn.TrackInventoryInd">
            <summary>
            TrackInventoryInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Shipping">
            <summary>
             An object representation of the 'ZNodeShipping' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Shipping.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Shipping"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn)">
            <summary>
             Initalizes a new Instance of the ContactTemperatureEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ContactTemperatureEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureEventArgs.Column">
            <summary>
             The ContactTemperatureColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureEventHandler">
            <summary>
             Define a delegate for all ContactTemperature related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ContactTemperatureComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer.Equals(ZNode.Libraries.DataAccess.Entities.ContactTemperature,ZNode.Libraries.DataAccess.Entities.ContactTemperature)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/> to compare.</param>
            <param name="b">The second <c>ContactTemperature</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ContactTemperature)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer.Compare(ZNode.Libraries.DataAccess.Entities.ContactTemperature,ZNode.Libraries.DataAccess.Entities.ContactTemperature)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ContactTemperature"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.#ctor">
            <summary>
            Initializes a new instance of the ContactTemperatureKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.#ctor(ZNode.Libraries.DataAccess.Entities.ContactTemperatureBase)">
            <summary>
            Initializes a new instance of the ContactTemperatureKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ContactTemperatureKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ContactTemperatureKey.ContactTemperatureID">
            <summary>
            Gets or sets the ContactTemperatureID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn">
            <summary>
            Enumerate the ContactTemperature columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn.ContactTemperatureID">
            <summary>
            ContactTemperatureID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ContactTemperatureColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Store">
            <summary>
             An object representation of the 'ZNodeStore' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Store.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Store"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Portal">
            <summary>
             An object representation of the 'ZNodePortal' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalBase">
            <summary>
             An object representation of the 'ZNodePortal' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalBase"/> instance.
            </summary>
            <param name="portalDomainName"></param>
            <param name="portalCompanyName"></param>
            <param name="portalStoreName"></param>
            <param name="portalLogoPath"></param>
            <param name="portalUseSSL"></param>
            <param name="portalAdminEmail"></param>
            <param name="portalSalesEmail"></param>
            <param name="portalCustomerServiceEmail"></param>
            <param name="portalSalesPhoneNumber"></param>
            <param name="portalCustomerServicePhoneNumber"></param>
            <param name="portalImageNotAvailablePath"></param>
            <param name="portalMaxCatalogDisplayColumns"></param>
            <param name="portalMaxCatalogDisplayItems"></param>
            <param name="portalMaxCatalogItemSmallWidth"></param>
            <param name="portalMaxCatalogItemMediumWidth"></param>
            <param name="portalMaxCatalogItemThumbnailWidth"></param>
            <param name="portalMaxCatalogItemLargeWidth"></param>
            <param name="portalActiveInd"></param>
            <param name="portalSMTPServer"></param>
            <param name="portalSMTPUserName"></param>
            <param name="portalSMTPPassword"></param>
            <param name="portalBottomScriptBlock"></param>
            <param name="portalUPSUserName"></param>
            <param name="portalUPSPassword"></param>
            <param name="portalUPSKey"></param>
            <param name="portalShippingOriginZipCode"></param>
            <param name="portalTheme"></param>
            <param name="portalShopByPriceMin"></param>
            <param name="portalShopByPriceMax"></param>
            <param name="portalShopByPriceIncrement"></param>
            <param name="portalFedExAccountNumber"></param>
            <param name="portalFedExMeterNumber"></param>
            <param name="portalFedExProductionKey"></param>
            <param name="portalFedExSecurityCode"></param>
            <param name="portalShippingOriginStateCode"></param>
            <param name="portalShippingOriginCountryCode"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.CreatePortal(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> instance.
            </summary>
            <param name="portalDomainName"></param>
            <param name="portalCompanyName"></param>
            <param name="portalStoreName"></param>
            <param name="portalLogoPath"></param>
            <param name="portalUseSSL"></param>
            <param name="portalAdminEmail"></param>
            <param name="portalSalesEmail"></param>
            <param name="portalCustomerServiceEmail"></param>
            <param name="portalSalesPhoneNumber"></param>
            <param name="portalCustomerServicePhoneNumber"></param>
            <param name="portalImageNotAvailablePath"></param>
            <param name="portalMaxCatalogDisplayColumns"></param>
            <param name="portalMaxCatalogDisplayItems"></param>
            <param name="portalMaxCatalogItemSmallWidth"></param>
            <param name="portalMaxCatalogItemMediumWidth"></param>
            <param name="portalMaxCatalogItemThumbnailWidth"></param>
            <param name="portalMaxCatalogItemLargeWidth"></param>
            <param name="portalActiveInd"></param>
            <param name="portalSMTPServer"></param>
            <param name="portalSMTPUserName"></param>
            <param name="portalSMTPPassword"></param>
            <param name="portalBottomScriptBlock"></param>
            <param name="portalUPSUserName"></param>
            <param name="portalUPSPassword"></param>
            <param name="portalUPSKey"></param>
            <param name="portalShippingOriginZipCode"></param>
            <param name="portalTheme"></param>
            <param name="portalShopByPriceMin"></param>
            <param name="portalShopByPriceMax"></param>
            <param name="portalShopByPriceIncrement"></param>
            <param name="portalFedExAccountNumber"></param>
            <param name="portalFedExMeterNumber"></param>
            <param name="portalFedExProductionKey"></param>
            <param name="portalFedExSecurityCode"></param>
            <param name="portalShippingOriginStateCode"></param>
            <param name="portalShippingOriginCountryCode"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.PortalColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PortalBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.PortalColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PortalBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.PortalColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PortalBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.PortalColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PortalBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.Copy">
            <summary>
              Returns a Typed Portal Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.DeepCopy">
            <summary>
              Returns a Typed Portal Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.Equals(ZNode.Libraries.DataAccess.Entities.PortalBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.Equals(ZNode.Libraries.DataAccess.Entities.PortalBase,ZNode.Libraries.DataAccess.Entities.PortalBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.PortalBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PortalBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PortalBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalID">
            <summary>
            	Gets or sets the PortalID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.DomainName">
            <summary>
            	Gets or sets the DomainName property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.CompanyName">
            <summary>
            	Gets or sets the CompanyName property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.StoreName">
            <summary>
            	Gets or sets the StoreName property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.LogoPath">
            <summary>
            	Gets or sets the LogoPath property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.UseSSL">
            <summary>
            	Gets or sets the UseSSL property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.AdminEmail">
            <summary>
            	Gets or sets the AdminEmail property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.SalesEmail">
            <summary>
            	Gets or sets the SalesEmail property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.CustomerServiceEmail">
            <summary>
            	Gets or sets the CustomerServiceEmail property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.SalesPhoneNumber">
            <summary>
            	Gets or sets the SalesPhoneNumber property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.CustomerServicePhoneNumber">
            <summary>
            	Gets or sets the CustomerServicePhoneNumber property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ImageNotAvailablePath">
            <summary>
            	Gets or sets the ImageNotAvailablePath property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.MaxCatalogDisplayColumns">
            <summary>
            	Gets or sets the MaxCatalogDisplayColumns property. 
            	
            </summary>
            <value>This type is tinyint.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.MaxCatalogDisplayItems">
            <summary>
            	Gets or sets the MaxCatalogDisplayItems property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.MaxCatalogItemSmallWidth">
            <summary>
            	Gets or sets the MaxCatalogItemSmallWidth property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.MaxCatalogItemMediumWidth">
            <summary>
            	Gets or sets the MaxCatalogItemMediumWidth property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.MaxCatalogItemThumbnailWidth">
            <summary>
            	Gets or sets the MaxCatalogItemThumbnailWidth property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.MaxCatalogItemLargeWidth">
            <summary>
            	Gets or sets the MaxCatalogItemLargeWidth property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.SMTPServer">
            <summary>
            	Gets or sets the SMTPServer property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.SMTPUserName">
            <summary>
            	Gets or sets the SMTPUserName property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.SMTPPassword">
            <summary>
            	Gets or sets the SMTPPassword property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.BottomScriptBlock">
            <summary>
            	Gets or sets the BottomScriptBlock property. 
            	
            </summary>
            <value>This type is ntext.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.UPSUserName">
            <summary>
            	Gets or sets the UPSUserName property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.UPSPassword">
            <summary>
            	Gets or sets the UPSPassword property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.UPSKey">
            <summary>
            	Gets or sets the UPSKey property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ShippingOriginZipCode">
            <summary>
            	Gets or sets the ShippingOriginZipCode property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.Theme">
            <summary>
            	Gets or sets the Theme property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">If you attempt to set to null.</exception>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ShopByPriceMin">
            <summary>
            	Gets or sets the ShopByPriceMin property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ShopByPriceMax">
            <summary>
            	Gets or sets the ShopByPriceMax property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ShopByPriceIncrement">
            <summary>
            	Gets or sets the ShopByPriceIncrement property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.FedExAccountNumber">
            <summary>
            	Gets or sets the FedExAccountNumber property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.FedExMeterNumber">
            <summary>
            	Gets or sets the FedExMeterNumber property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.FedExProductionKey">
            <summary>
            	Gets or sets the FedExProductionKey property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.FedExSecurityCode">
            <summary>
            	Gets or sets the FedExSecurityCode property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ShippingOriginStateCode">
            <summary>
            	Gets or sets the ShippingOriginStateCode property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ShippingOriginCountryCode">
            <summary>
            	Gets or sets the ShippingOriginCountryCode property. 
            	
            </summary>
            <value>This type is nvarchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.TaxRuleCollection">
            <summary>
            Holds a collection of TaxRule objects
            which are related to this object through the relation FK_ZNodeTaxRule_ZNodePortal
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.AccountCollection">
            <summary>
            Holds a collection of Account objects
            which are related to this object through the relation FK_Account_Portals
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.CaseCollection">
            <summary>
            Holds a collection of Case objects
            which are related to this object through the relation FK_Case_Portals
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.CategoryCollection">
            <summary>
            Holds a collection of Category objects
            which are related to this object through the relation FK_SC_Category_Portals
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.OrderCollection">
            <summary>
            Holds a collection of Order objects
            which are related to this object through the relation FK_SC_Order_Portals
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ProfileCollection">
            <summary>
            Holds a collection of Profile objects
            which are related to this object through the relation FK_SC_Profile_SC_Portal
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ContentPageCollection">
            <summary>
            Holds a collection of ContentPage objects
            which are related to this object through the relation FK_ZNodePage_ZNodePortal
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ProductTypeCollection">
            <summary>
            Holds a collection of ProductType objects
            which are related to this object through the relation FK_SC_ProductType_Portals
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ManufacturerCollection">
            <summary>
            Holds a collection of Manufacturer objects
            which are related to this object through the relation FK_SC_Manufacturer_Portals
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ProductCollection">
            <summary>
            Holds a collection of Product objects
            which are related to this object through the relation FK_SC_Product_Portals
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PortalBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PortalBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData">
            <summary>
            	The data structure representation of the 'ZNodePortal' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.PortalID">
            <summary>			
            PortalID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodePortal"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.DomainName">
            <summary>
            DomainName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.CompanyName">
            <summary>
            CompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.StoreName">
            <summary>
            StoreName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.LogoPath">
            <summary>
            LogoPath : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.UseSSL">
            <summary>
            UseSSL : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.AdminEmail">
            <summary>
            AdminEmail : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.SalesEmail">
            <summary>
            SalesEmail : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.CustomerServiceEmail">
            <summary>
            CustomerServiceEmail : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.SalesPhoneNumber">
            <summary>
            SalesPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.CustomerServicePhoneNumber">
            <summary>
            CustomerServicePhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ImageNotAvailablePath">
            <summary>
            ImageNotAvailablePath : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.MaxCatalogDisplayColumns">
            <summary>
            MaxCatalogDisplayColumns : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.MaxCatalogDisplayItems">
            <summary>
            MaxCatalogDisplayItems : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.MaxCatalogItemSmallWidth">
            <summary>
            MaxCatalogItemSmallWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.MaxCatalogItemMediumWidth">
            <summary>
            MaxCatalogItemMediumWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.MaxCatalogItemThumbnailWidth">
            <summary>
            MaxCatalogItemThumbnailWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.MaxCatalogItemLargeWidth">
            <summary>
            MaxCatalogItemLargeWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.SMTPServer">
            <summary>
            SMTPServer : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.SMTPUserName">
            <summary>
            SMTPUserName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.SMTPPassword">
            <summary>
            SMTPPassword : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.BottomScriptBlock">
            <summary>
            BottomScriptBlock : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.UPSUserName">
            <summary>
            UPSUserName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.UPSPassword">
            <summary>
            UPSPassword : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.UPSKey">
            <summary>
            UPSKey : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ShippingOriginZipCode">
            <summary>
            ShippingOriginZipCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.Theme">
            <summary>
            Theme : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ShopByPriceMin">
            <summary>
            ShopByPriceMin : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ShopByPriceMax">
            <summary>
            ShopByPriceMax : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ShopByPriceIncrement">
            <summary>
            ShopByPriceIncrement : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.FedExAccountNumber">
            <summary>
            FedExAccountNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.FedExMeterNumber">
            <summary>
            FedExMeterNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.FedExProductionKey">
            <summary>
            FedExProductionKey : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.FedExSecurityCode">
            <summary>
            FedExSecurityCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ShippingOriginStateCode">
            <summary>
            ShippingOriginStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ShippingOriginCountryCode">
            <summary>
            ShippingOriginCountryCode : 
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.TaxRuleCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation taxRulePortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.AccountCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation accountPortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.CaseCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation @casePortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.CategoryCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation categoryPortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.OrderCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation orderPortalId
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ProfileCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation profilePortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ContentPageCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation contentPagePortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ProductTypeCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productTypePortalId
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ManufacturerCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation manufacturerPortalID
            </summary>	
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalBase.PortalEntityData.ProductCollection">
            <summary>
            Holds a collection of entity objects
            which are related to this object through the relation productPortalID
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Portal.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityFactory">
            <summary>
            Entity Factory provides methods to create entity types from type names as strings.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityFactory"/> class.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem">
            <summary>
             An object representation of the 'ZNodeOrderLineItem' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderLineItem.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderLineItem"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget">
            <summary>
             An object representation of the 'ZNodeDiscountTarget' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.DiscountTarget.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.DiscountTarget"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.SKU">
            <summary>
             An object representation of the 'ZNodeSKU' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.SKU.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.SKU"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ShippingType">
            <summary>
             An object representation of the 'ZNodeShippingType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ShippingType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ShippingType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn)">
            <summary>
             Initalizes a new Instance of the PaymentSettingEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the PaymentSettingEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingEventArgs.Column">
            <summary>
             The PaymentSettingColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingEventHandler">
            <summary>
             Define a delegate for all PaymentSetting related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase">
            <summary>
             An object representation of the 'ZNodePaymentSetting' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Boolean,System.Byte,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase"/> instance.
            </summary>
            <param name="paymentSettingPaymentTypeID"></param>
            <param name="paymentSettingProfileID"></param>
            <param name="paymentSettingGatewayTypeID"></param>
            <param name="paymentSettingGatewayUsername"></param>
            <param name="paymentSettingGatewayPassword"></param>
            <param name="paymentSettingEnableVisa"></param>
            <param name="paymentSettingEnableMasterCard"></param>
            <param name="paymentSettingEnableAmex"></param>
            <param name="paymentSettingEnableDiscover"></param>
            <param name="paymentSettingTransactionKey"></param>
            <param name="paymentSettingActiveInd"></param>
            <param name="paymentSettingDisplayOrder"></param>
            <param name="paymentSettingTestMode"></param>
            <param name="paymentSettingOfflineMode"></param>
            <param name="paymentSettingSaveCreditCartInfo"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.CreatePaymentSetting(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Boolean,System.Byte,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> instance.
            </summary>
            <param name="paymentSettingPaymentTypeID"></param>
            <param name="paymentSettingProfileID"></param>
            <param name="paymentSettingGatewayTypeID"></param>
            <param name="paymentSettingGatewayUsername"></param>
            <param name="paymentSettingGatewayPassword"></param>
            <param name="paymentSettingEnableVisa"></param>
            <param name="paymentSettingEnableMasterCard"></param>
            <param name="paymentSettingEnableAmex"></param>
            <param name="paymentSettingEnableDiscover"></param>
            <param name="paymentSettingTransactionKey"></param>
            <param name="paymentSettingActiveInd"></param>
            <param name="paymentSettingDisplayOrder"></param>
            <param name="paymentSettingTestMode"></param>
            <param name="paymentSettingOfflineMode"></param>
            <param name="paymentSettingSaveCreditCartInfo"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Copy">
            <summary>
              Returns a Typed PaymentSetting Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.DeepCopy">
            <summary>
              Returns a Typed PaymentSetting Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Equals(ZNode.Libraries.DataAccess.Entities.PaymentSettingBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Equals(ZNode.Libraries.DataAccess.Entities.PaymentSettingBase,ZNode.Libraries.DataAccess.Entities.PaymentSettingBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingID">
            <summary>
            	Gets or sets the PaymentSettingID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentTypeID">
            <summary>
            	Gets or sets the PaymentTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ProfileID">
            <summary>
            	Gets or sets the ProfileID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.GatewayTypeID">
            <summary>
            	Gets or sets the GatewayTypeID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return (int)0. It is up to the developer
            to check the value of IsGatewayTypeIDNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.GatewayUsername">
            <summary>
            	Gets or sets the GatewayUsername property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.GatewayPassword">
            <summary>
            	Gets or sets the GatewayPassword property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.EnableVisa">
            <summary>
            	Gets or sets the EnableVisa property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsEnableVisaNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.EnableMasterCard">
            <summary>
            	Gets or sets the EnableMasterCard property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsEnableMasterCardNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.EnableAmex">
            <summary>
            	Gets or sets the EnableAmex property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsEnableAmexNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.EnableDiscover">
            <summary>
            	Gets or sets the EnableDiscover property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsEnableDiscoverNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.TransactionKey">
            <summary>
            	Gets or sets the TransactionKey property. 
            	
            </summary>
            <value>This type is varchar.</value>
            <remarks>
            This property can be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ActiveInd">
            <summary>
            	Gets or sets the ActiveInd property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.DisplayOrder">
            <summary>
            	Gets or sets the DisplayOrder property. 
            	
            </summary>
            <value>This type is tinyint.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.TestMode">
            <summary>
            	Gets or sets the TestMode property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.OfflineMode">
            <summary>
            	Gets or sets the OfflineMode property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsOfflineModeNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.SaveCreditCartInfo">
            <summary>
            	Gets or sets the SaveCreditCartInfo property. 
            	
            </summary>
            <value>This type is bit.</value>
            <remarks>
            This property can be set to null. 
            If this column is null, this property will return false. It is up to the developer
            to check the value of IsSaveCreditCartInfoNull() and perform business logic appropriately.
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.GatewayTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Gateway"/>.
            </summary>
            <value>The source Gateway for GatewayTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentTypeIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentType"/>.
            </summary>
            <value>The source PaymentType for PaymentTypeID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ProfileIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Profile"/>.
            </summary>
            <value>The source Profile for ProfileID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData">
            <summary>
            	The data structure representation of the 'ZNodePaymentSetting' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.PaymentSettingID">
            <summary>			
            PaymentSettingID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodePaymentSetting"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.PaymentTypeID">
            <summary>
            PaymentTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.GatewayTypeID">
            <summary>
            GatewayTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.GatewayUsername">
            <summary>
            GatewayUsername : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.GatewayPassword">
            <summary>
            GatewayPassword : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.EnableVisa">
            <summary>
            EnableVisa : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.EnableMasterCard">
            <summary>
            EnableMasterCard : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.EnableAmex">
            <summary>
            EnableAmex : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.EnableDiscover">
            <summary>
            EnableDiscover : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.TransactionKey">
            <summary>
            TransactionKey : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.TestMode">
            <summary>
            TestMode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.OfflineMode">
            <summary>
            OfflineMode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingBase.PaymentSettingEntityData.SaveCreditCartInfo">
            <summary>
            SaveCreditCartInfo : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PaymentSettingComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer.Equals(ZNode.Libraries.DataAccess.Entities.PaymentSetting,ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> to compare.</param>
            <param name="b">The second <c>PaymentSetting</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer.Compare(ZNode.Libraries.DataAccess.Entities.PaymentSetting,ZNode.Libraries.DataAccess.Entities.PaymentSetting)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.#ctor">
            <summary>
            Initializes a new instance of the PaymentSettingKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.#ctor(ZNode.Libraries.DataAccess.Entities.PaymentSettingBase)">
            <summary>
            Initializes a new instance of the PaymentSettingKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PaymentSettingKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PaymentSettingKey.PaymentSettingID">
            <summary>
            Gets or sets the PaymentSettingID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn">
            <summary>
            Enumerate the PaymentSetting columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.PaymentSettingID">
            <summary>
            PaymentSettingID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.PaymentTypeID">
            <summary>
            PaymentTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.ProfileID">
            <summary>
            ProfileID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.GatewayTypeID">
            <summary>
            GatewayTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.GatewayUsername">
            <summary>
            GatewayUsername : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.GatewayPassword">
            <summary>
            GatewayPassword : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.EnableVisa">
            <summary>
            EnableVisa : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.EnableMasterCard">
            <summary>
            EnableMasterCard : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.EnableAmex">
            <summary>
            EnableAmex : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.EnableDiscover">
            <summary>
            EnableDiscover : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.TransactionKey">
            <summary>
            TransactionKey : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.TestMode">
            <summary>
            TestMode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.OfflineMode">
            <summary>
            OfflineMode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PaymentSettingColumn.SaveCreditCartInfo">
            <summary>
            SaveCreditCartInfo : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityLocator">
            <summary>
            Provides a means to weak reference and already created and untouched locate entities.
            </summary>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.Contains(System.String,Microsoft.Practices.ObjectBuilder.SearchMode)">
            <summary>
            Determines whether [contains] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>
            	<c>true</c> if [contains] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.Get(System.Object,Microsoft.Practices.ObjectBuilder.SearchMode)">
            <summary>
            Gets the specified key of any object.
            </summary>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>object if available, else null </returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.GetEntity``1(System.String)">
            <summary>
            Get's an Entity from the Tracking Locator
            </summary>
            <typeparam name="Entity">A type that implements IEntity</typeparam>
            <param name="key">locator list key to fetch, best used 
            if it's the (TypeName or TableName) + EntityKey of the this entity</param>
            <returns>Entity from Locator if available.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.GetList``1(System.String)">
            <summary>
            Get's a List of Entities from the Tracking Locator
            </summary>
            <typeparam name="EntityList"> a type that implements ListBase&lt;IEntity&gt;</typeparam>
            <param name="key">locator list key to fetch, best used 
            if it's like the criteria of the method used to populate this list
            </param>
            <returns>ListBase&lt;IEntity&gt; if available</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityLocator.ConstructKeyFromPkItems(System.Type,System.Object[])">
            <summary>
            Re-Creates the key based on primary key values.
            </summary>
            <param name="type">The type.</param>
            <param name="pkItems">The pk items.</param>
            <returns></returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.EntityPropertyComparer">
            <summary>
            Provide a generic comparer for our entity objects.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityPropertyComparer.#ctor(System.String)">
            <summary>
            Provides Comparison opreations.
            </summary>
            <param name="propertyName">The property to compare</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.EntityPropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares 2 objects by their properties, given on the constructor
            </summary>
            <param name="x">First value to compare</param>
            <param name="y">Second value to compare</param>
            <returns></returns>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AttributeType">
            <summary>
             An object representation of the 'ZNodeAttributeType' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AttributeType.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.AttributeType"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn)">
            <summary>
             Initalizes a new Instance of the ProductCategoryEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductCategoryEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryEventArgs.Column">
            <summary>
             The ProductCategoryColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryEventHandler">
            <summary>
             Define a delegate for all ProductCategory related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase">
            <summary>
             An object representation of the 'ZNodeProductCategory' table. [No description found the database]	
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.entityData">
            <summary>
            	Old the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.backupData">
            <summary>
            	Old a backup of the inner data of the entity.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.entityTrackingKey">
            <summary>
            	Key used if Tracking is Enabled for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase"/> instance.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase"/> instance.
            </summary>
            <param name="productCategoryProductID"></param>
            <param name="productCategoryCategoryID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CreateProductCategory(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> instance.
            </summary>
            <param name="productCategoryProductID"></param>
            <param name="productCategoryCategoryID"></param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn"/> which has raised the event.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.OnColumnChanging(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ColumnChanging"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.OnColumnChanged(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn,System.Object)">
            <summary>
            Raises the <see cref="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ColumnChanged"/> event.
            </summary>
            <param name="column">The <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn"/> which has raised the event.</param>
            <param name="value">The changed value.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.OnCancelAddNew">
            <summary>
            Called when [cancel add new].
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <c>BeginEdit</c> call.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.OnEntityChanged">
            <summary>
            Called when the entity is changed.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CancelChanges">
            <summary>
              Revert all changes and restore original values.
              Currently not supported.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Copy">
            <summary>
              Returns a Typed ProductCategory Entity 
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Clone">
            <summary>
             ICloneable.Clone() Member, returns the Shallow Copy of this entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.MakeCopyOf(System.Object)">
            <summary>
             Returns a deep copy of the child collection object passed in.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.DeepCopy">
            <summary>
              Returns a Typed ProductCategory Entity which is a deep copy of the current entity.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductCategoryBase)">
            <summary>
             Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="toObject">An object to compare to this instance.</param>
            <returns>true if toObject is a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Equals(ZNode.Libraries.DataAccess.Entities.ProductCategoryBase,ZNode.Libraries.DataAccess.Entities.ProductCategoryBase)">
            <summary>
             Determines whether the specified <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase"/> instances are considered equal.
            </summary>
            <param name="Object1">The first <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase"/> to compare.</param>
            <param name="Object2">The second <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase"/> to compare. </param>
            <returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
            <param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
            </summary>
            <returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Dispose">
            <summary>
            Clean up. Nothing here though.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Dispose(System.Boolean)">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.AddValidationRules">
            <summary>
            Assigns validation rules to this object based on model definition.
            </summary>
            <remarks>This method overrides the base class to add schema related validation.</remarks>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ColumnChanging">
            <summary>
            Occurs when a value is being changed for the specified column.
            </summary>	
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ColumnChanged">
            <summary>
            Occurs after a value has been changed for the specified column.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductCategoryID">
            <summary>
            	Gets or sets the ProductCategoryID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductID">
            <summary>
            	Gets or sets the ProductID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CategoryID">
            <summary>
            	Gets or sets the CategoryID property. 
            	
            </summary>
            <value>This type is int.</value>
            <remarks>
            This property can not be set to null. 
            </remarks>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CategoryIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Category"/>.
            </summary>
            <value>The source Category for CategoryID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductIDSource">
            <summary>
            Gets or sets the source <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/>.
            </summary>
            <value>The source Product for ProductID.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.TableName">
            <summary>
            	The name of the underlying database table.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.TableColumns">
            <summary>
            	The name of the underlying database table's columns.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CancelAddNew">
            <summary>
            The CancelAddNew event.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ParentCollection">
            <summary>
            Gets or sets the parent collection.
            </summary>
            <value>The parent collection.</value>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Site">
            <summary>
            Gets or Sets the site where this data is located.
            </summary>
        </member>
        <member name="E:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.Disposed">
            <summary>
            Notify those that care when we dispose.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.EntityId">
            <summary>
            Gets or sets the EntityId property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.EntityTrackingKey">
            <summary>
             Provides the tracking key for the <see cref="T:ZNode.Libraries.DataAccess.Entities.EntityLocator"/>
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.CancelAddNewEventHandler">
            <summary>
            The delegate for the CancelAddNew event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductCategoryEntityData">
            <summary>
            	The data structure representation of the 'ZNodeProductCategory' table.
            </summary>
            <remarks>
            	This struct is generated by a tool and should never be modified.
            </remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductCategoryEntityData.ProductCategoryID">
            <summary>			
            ProductCategoryID : 
            </summary>
            <remarks>Member of the primary key of the underlying table "ZNodeProductCategory"</remarks>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductCategoryEntityData.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryBase.ProductCategoryEntityData.CategoryID">
            <summary>
            CategoryID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductCategoryComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductCategory,ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> to compare.</param>
            <param name="b">The second <c>ProductCategory</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductCategory,ZNode.Libraries.DataAccess.Entities.ProductCategory)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductCategoryBase)">
            <summary>
            Initializes a new instance of the ProductCategoryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductCategoryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductCategoryKey.ProductCategoryID">
            <summary>
            Gets or sets the ProductCategoryID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn">
            <summary>
            Enumerate the ProductCategory columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn.ProductCategoryID">
            <summary>
            ProductCategoryID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductCategoryColumn.CategoryID">
            <summary>
            CategoryID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCategory">
            <summary>
             An object representation of the 'ZNodeProductCategory' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCategory.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCategory"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.Note">
            <summary>
             An object representation of the 'ZNodeNote' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.Note.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.Note"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn)">
            <summary>
             Initalizes a new Instance of the OrderProcessingTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the OrderProcessingTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeEventArgs.Column">
            <summary>
             The OrderProcessingTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeEventHandler">
            <summary>
             Define a delegate for all OrderProcessingType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OrderProcessingTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.OrderProcessingType,ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> to compare.</param>
            <param name="b">The second <c>OrderProcessingType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.OrderProcessingType,ZNode.Libraries.DataAccess.Entities.OrderProcessingType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.#ctor">
            <summary>
            Initializes a new instance of the OrderProcessingTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeBase)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the OrderProcessingTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeKey.OrderProcessingTypeID">
            <summary>
            Gets or sets the OrderProcessingTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn">
            <summary>
            Enumerate the OrderProcessingType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn.OrderProcessingTypeID">
            <summary>
            OrderProcessingTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderProcessingTypeColumn.ClassID">
            <summary>
            ClassID : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CountryColumn)">
            <summary>
             Initalizes a new Instance of the CountryEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CountryColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CountryEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryEventArgs.Column">
            <summary>
             The CountryColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CountryColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryEventHandler">
            <summary>
             Define a delegate for all Country related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CountryComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CountryColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryComparer.Equals(ZNode.Libraries.DataAccess.Entities.Country,ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> to compare.</param>
            <param name="b">The second <c>Country</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryComparer.Compare(ZNode.Libraries.DataAccess.Entities.Country,ZNode.Libraries.DataAccess.Entities.Country)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Country"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryKey.#ctor">
            <summary>
            Initializes a new instance of the CountryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryKey.#ctor(ZNode.Libraries.DataAccess.Entities.CountryBase)">
            <summary>
            Initializes a new instance of the CountryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CountryKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CountryKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CountryKey.Code">
            <summary>
            Gets or sets the Code property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CountryColumn">
            <summary>
            Enumerate the Country columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryColumn.Code">
            <summary>
            Code : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CountryColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.TaxRule">
            <summary>
             An object representation of the 'ZNodeTaxRule' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.TaxRule.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.TaxRule"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell">
            <summary>
             An object representation of the 'ZNodeProductCrossSell' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductCrossSell.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductCrossSell"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn)">
            <summary>
             Initalizes a new Instance of the ProductTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeEventArgs.Column">
            <summary>
             The ProductTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeEventHandler">
            <summary>
             Define a delegate for all ProductType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.ProductType,ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> to compare.</param>
            <param name="b">The second <c>ProductType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.ProductType,ZNode.Libraries.DataAccess.Entities.ProductType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.ProductType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.#ctor">
            <summary>
            Initializes a new instance of the ProductTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductTypeBase)">
            <summary>
            Initializes a new instance of the ProductTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductTypeKey.ProductTypeId">
            <summary>
            Gets or sets the ProductTypeId property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn">
            <summary>
            Enumerate the ProductType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn.ProductTypeId">
            <summary>
            ProductTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductTypeColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderColumn)">
            <summary>
             Initalizes a new Instance of the OrderEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.OrderColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the OrderEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderEventArgs.Column">
            <summary>
             The OrderColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.OrderColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderEventHandler">
            <summary>
             Define a delegate for all Order related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OrderComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderComparer.#ctor(ZNode.Libraries.DataAccess.Entities.OrderColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderComparer.Equals(ZNode.Libraries.DataAccess.Entities.Order,ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> to compare.</param>
            <param name="b">The second <c>Order</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderComparer.Compare(ZNode.Libraries.DataAccess.Entities.Order,ZNode.Libraries.DataAccess.Entities.Order)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Order"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderKey.#ctor">
            <summary>
            Initializes a new instance of the OrderKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderKey.#ctor(ZNode.Libraries.DataAccess.Entities.OrderBase)">
            <summary>
            Initializes a new instance of the OrderKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the OrderKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.OrderKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.OrderKey.OrderID">
            <summary>
            Gets or sets the OrderID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.OrderColumn">
            <summary>
            Enumerate the Order columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.OrderID">
            <summary>
            OrderID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.PortalId">
            <summary>
            PortalId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.AccountID">
            <summary>
            AccountID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.OrderStateID">
            <summary>
            OrderStateID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShippingID">
            <summary>
            ShippingID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.PaymentTypeId">
            <summary>
            PaymentTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipFirstName">
            <summary>
            ShipFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipLastName">
            <summary>
            ShipLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipCompanyName">
            <summary>
            ShipCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipStreet">
            <summary>
            ShipStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipStreet1">
            <summary>
            ShipStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipCity">
            <summary>
            ShipCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipStateCode">
            <summary>
            ShipStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipPostalCode">
            <summary>
            ShipPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipCountry">
            <summary>
            ShipCountry : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipPhoneNumber">
            <summary>
            ShipPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShipEmailID">
            <summary>
            ShipEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingFirstName">
            <summary>
            BillingFirstName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingLastName">
            <summary>
            BillingLastName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingCompanyName">
            <summary>
            BillingCompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingStreet">
            <summary>
            BillingStreet : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingStreet1">
            <summary>
            BillingStreet1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingCity">
            <summary>
            BillingCity : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingStateCode">
            <summary>
            BillingStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingPostalCode">
            <summary>
            BillingPostalCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingCountry">
            <summary>
            BillingCountry : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingPhoneNumber">
            <summary>
            BillingPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.BillingEmailId">
            <summary>
            BillingEmailId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CardTransactionID">
            <summary>
            CardTransactionID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CardTypeId">
            <summary>
            CardTypeId : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CardEndsIn">
            <summary>
            CardEndsIn : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.TaxCost">
            <summary>
            TaxCost : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.ShippingCost">
            <summary>
            ShippingCost : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.SubTotal">
            <summary>
            SubTotal : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.DiscountAmount">
            <summary>
            DiscountAmount : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.Total">
            <summary>
            Total : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CouponID">
            <summary>
            CouponID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.OrderDate">
            <summary>
            OrderDate : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CreditCardNumber">
            <summary>
            CreditCardNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CreditCardExp">
            <summary>
            CreditCardExp : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.CreditCardCVV">
            <summary>
            CreditCardCVV : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.AdditionalInstructions">
            <summary>
            AdditionalInstructions : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.OrderColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn)">
            <summary>
             Initalizes a new Instance of the AddOnValueEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the AddOnValueEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueEventArgs.Column">
            <summary>
             The AddOnValueColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueEventHandler">
            <summary>
             Define a delegate for all AddOnValue related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AddOnValueComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnValueColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer.Equals(ZNode.Libraries.DataAccess.Entities.AddOnValue,ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> to compare.</param>
            <param name="b">The second <c>AddOnValue</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer.Compare(ZNode.Libraries.DataAccess.Entities.AddOnValue,ZNode.Libraries.DataAccess.Entities.AddOnValue)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.AddOnValue"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.#ctor">
            <summary>
            Initializes a new instance of the AddOnValueKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.#ctor(ZNode.Libraries.DataAccess.Entities.AddOnValueBase)">
            <summary>
            Initializes a new instance of the AddOnValueKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AddOnValueKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.AddOnValueKey.AddOnValueID">
            <summary>
            Gets or sets the AddOnValueID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn">
            <summary>
            Enumerate the AddOnValue columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.AddOnValueID">
            <summary>
            AddOnValueID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.AddOnID">
            <summary>
            AddOnID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.QuantityOnHand">
            <summary>
            QuantityOnHand : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.DefaultInd">
            <summary>
            DefaultInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.Price">
            <summary>
            Price : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.AddOnValueColumn.Weight">
            <summary>
            Weight : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn)">
            <summary>
             Initalizes a new Instance of the CasePriorityEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CasePriorityEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityEventArgs.Column">
            <summary>
             The CasePriorityColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityEventHandler">
            <summary>
             Define a delegate for all CasePriority related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CasePriorityComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CasePriorityColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer.Equals(ZNode.Libraries.DataAccess.Entities.CasePriority,ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> to compare.</param>
            <param name="b">The second <c>CasePriority</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer.Compare(ZNode.Libraries.DataAccess.Entities.CasePriority,ZNode.Libraries.DataAccess.Entities.CasePriority)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CasePriority"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.#ctor">
            <summary>
            Initializes a new instance of the CasePriorityKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.#ctor(ZNode.Libraries.DataAccess.Entities.CasePriorityBase)">
            <summary>
            Initializes a new instance of the CasePriorityKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CasePriorityKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CasePriorityKey.CasePriorityID">
            <summary>
            Gets or sets the CasePriorityID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn">
            <summary>
            Enumerate the CasePriority columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn.CasePriorityID">
            <summary>
            CasePriorityID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn.CasePriorityNme">
            <summary>
            CasePriorityNme : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CasePriorityColumn.ViewOrder">
            <summary>
            ViewOrder : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn)">
            <summary>
             Initalizes a new Instance of the CaseTypeEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the CaseTypeEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeEventArgs.Column">
            <summary>
             The CaseTypeColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeEventHandler">
            <summary>
             Define a delegate for all CaseType related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CaseTypeComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer.#ctor(ZNode.Libraries.DataAccess.Entities.CaseTypeColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer.Equals(ZNode.Libraries.DataAccess.Entities.CaseType,ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> to compare.</param>
            <param name="b">The second <c>CaseType</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer.Compare(ZNode.Libraries.DataAccess.Entities.CaseType,ZNode.Libraries.DataAccess.Entities.CaseType)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.CaseType"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.#ctor">
            <summary>
            Initializes a new instance of the CaseTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.#ctor(ZNode.Libraries.DataAccess.Entities.CaseTypeBase)">
            <summary>
            Initializes a new instance of the CaseTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CaseTypeKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.CaseTypeKey.CaseTypeID">
            <summary>
            Gets or sets the CaseTypeID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn">
            <summary>
            Enumerate the CaseType columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn.CaseTypeID">
            <summary>
            CaseTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.CaseTypeColumn.CaseTypeNme">
            <summary>
            CaseTypeNme : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting">
            <summary>
             An object representation of the 'ZNodePaymentSetting' table. [No description found the database]	
            </summary>
             <remarks>
             This file is generated once and will never be overwritten.
             </remarks>	
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PaymentSetting.#ctor">
            <summary>
             Creates a new <see cref="T:ZNode.Libraries.DataAccess.Entities.PaymentSetting"/> instance.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductColumn)">
            <summary>
             Initalizes a new Instance of the ProductEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.ProductColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the ProductEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductEventArgs.Column">
            <summary>
             The ProductColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.ProductColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductEventHandler">
            <summary>
             Define a delegate for all Product related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductComparer.#ctor(ZNode.Libraries.DataAccess.Entities.ProductColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductComparer.Equals(ZNode.Libraries.DataAccess.Entities.Product,ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> to compare.</param>
            <param name="b">The second <c>Product</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductComparer.Compare(ZNode.Libraries.DataAccess.Entities.Product,ZNode.Libraries.DataAccess.Entities.Product)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Product"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductKey.#ctor">
            <summary>
            Initializes a new instance of the ProductKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductKey.#ctor(ZNode.Libraries.DataAccess.Entities.ProductBase)">
            <summary>
            Initializes a new instance of the ProductKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.ProductKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.ProductKey.ProductID">
            <summary>
            Gets or sets the ProductID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.ProductColumn">
            <summary>
            Enumerate the Product columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ProductID">
            <summary>
            ProductID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Name">
            <summary>
            Name : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ShortDescription">
            <summary>
            ShortDescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Description">
            <summary>
            Description : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.FeaturesDesc">
            <summary>
            FeaturesDesc : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ProductNum">
            <summary>
            ProductNum : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ProductTypeID">
            <summary>
            ProductTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.RetailPrice">
            <summary>
            RetailPrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.WholesalePrice">
            <summary>
            WholesalePrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.SalePrice">
            <summary>
            SalePrice : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ImageFile">
            <summary>
            ImageFile : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Weight">
            <summary>
            Weight : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.DisplayOrder">
            <summary>
            DisplayOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.CallForPricing">
            <summary>
            CallForPricing : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.HomepageSpecial">
            <summary>
            HomepageSpecial : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.CategorySpecial">
            <summary>
            CategorySpecial : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.InventoryDisplay">
            <summary>
            InventoryDisplay : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Keywords">
            <summary>
            Keywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ManufacturerID">
            <summary>
            ManufacturerID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.AdditionalInfoLink">
            <summary>
            AdditionalInfoLink : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.AdditionalInfoLinkLabel">
            <summary>
            AdditionalInfoLinkLabel : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ShippingRuleTypeID">
            <summary>
            ShippingRuleTypeID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.SEOTitle">
            <summary>
            SEOTitle : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.SEOKeywords">
            <summary>
            SEOKeywords : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.SEODescription">
            <summary>
            SEODescription : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Custom1">
            <summary>
            Custom1 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Custom2">
            <summary>
            Custom2 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Custom3">
            <summary>
            Custom3 : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.ShipEachItemSeparately">
            <summary>
            ShipEachItemSeparately : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.SKU">
            <summary>
            SKU : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.QuantityOnHand">
            <summary>
            QuantityOnHand : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.AllowBackOrder">
            <summary>
            AllowBackOrder : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.BackOrderMsg">
            <summary>
            BackOrderMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.DropShipInd">
            <summary>
            DropShipInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.DropShipEmailID">
            <summary>
            DropShipEmailID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.Specifications">
            <summary>
            Specifications : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.AdditionalInformation">
            <summary>
            AdditionalInformation : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.InStockMsg">
            <summary>
            InStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.OutOfStockMsg">
            <summary>
            OutOfStockMsg : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.ProductColumn.TrackInventoryInd">
            <summary>
            TrackInventoryInd : 
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalEventArgs">
            <summary>
            Provides data for the ColumnChanging and ColumnChanged events.
            </summary>
            <remarks>
            The ColumnChanging and ColumnChanged events occur when a change is made to the value 
            of a property of a <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.
            </remarks>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.PortalColumn)">
            <summary>
             Initalizes a new Instance of the PortalEventArgs class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalEventArgs.#ctor(ZNode.Libraries.DataAccess.Entities.PortalColumn,System.Object)">
            <summary>
             Initalizes a new Instance of the PortalEventArgs class.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalEventArgs.Column">
            <summary>
             The PortalColumn that was modified, which has raised the event.
            </summary>
            <value cref="T:ZNode.Libraries.DataAccess.Entities.PortalColumn"/>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalEventArgs.Value">
            <summary>
            Gets the current value of the column.
            </summary>
            <value>The current value of the column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalEventHandler">
            <summary>
             Define a delegate for all Portal related events.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalComparer">
            <summary>
            Strongly Typed IComparer
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PortalComparer"/> class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalComparer.#ctor(ZNode.Libraries.DataAccess.Entities.PortalColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
            </summary>
            <param name="column">The column to sort on.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalComparer.Equals(ZNode.Libraries.DataAccess.Entities.Portal,ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            Determines whether the specified <c cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> instances are considered equal.
            </summary>
            <param name="a">The first <c cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> to compare.</param>
            <param name="b">The second <c>Portal</c> to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalComparer.GetHashCode(ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            Gets the hash code of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalComparer.Compare(ZNode.Libraries.DataAccess.Entities.Portal,ZNode.Libraries.DataAccess.Entities.Portal)">
            <summary>
            Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalComparer.WhichComparison">
            <summary>
            Gets or sets the column that will be used for comparison.
            </summary>
            <value>The comparison column.</value>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalKey">
            <summary>
            Wraps the unique identifier values for the <see cref="T:ZNode.Libraries.DataAccess.Entities.Portal"/> object.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalKey.#ctor">
            <summary>
            Initializes a new instance of the PortalKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalKey.#ctor(ZNode.Libraries.DataAccess.Entities.PortalBase)">
            <summary>
            Initializes a new instance of the PortalKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalKey.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PortalKey class.
            </summary>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalKey.Load(System.Collections.IDictionary)">
            <summary>
            Reads values from the supplied <see cref="T:System.Collections.IDictionary"/> object into
            properties of the current object.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"/> instance that contains
            the key/value pairs to be used as property values.</param>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalKey.ToDictionary">
            <summary>
            Creates a new <see cref="T:System.Collections.IDictionary"/> object and populates it
            with the property values of the current object.
            </summary>
            <returns>A collection of name/value pairs.</returns>
        </member>
        <member name="M:ZNode.Libraries.DataAccess.Entities.PortalKey.ToString">
            <summary>
             Returns a String that represents the current object.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalKey.Entity">
            <summary>
            Gets or sets the Entity property.
            </summary>
        </member>
        <member name="P:ZNode.Libraries.DataAccess.Entities.PortalKey.PortalID">
            <summary>
            Gets or sets the PortalID property.
            </summary>
        </member>
        <member name="T:ZNode.Libraries.DataAccess.Entities.PortalColumn">
            <summary>
            Enumerate the Portal columns.
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.PortalID">
            <summary>
            PortalID : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.DomainName">
            <summary>
            DomainName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.CompanyName">
            <summary>
            CompanyName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.StoreName">
            <summary>
            StoreName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.LogoPath">
            <summary>
            LogoPath : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.UseSSL">
            <summary>
            UseSSL : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.AdminEmail">
            <summary>
            AdminEmail : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.SalesEmail">
            <summary>
            SalesEmail : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.CustomerServiceEmail">
            <summary>
            CustomerServiceEmail : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.SalesPhoneNumber">
            <summary>
            SalesPhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.CustomerServicePhoneNumber">
            <summary>
            CustomerServicePhoneNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ImageNotAvailablePath">
            <summary>
            ImageNotAvailablePath : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.MaxCatalogDisplayColumns">
            <summary>
            MaxCatalogDisplayColumns : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.MaxCatalogDisplayItems">
            <summary>
            MaxCatalogDisplayItems : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.MaxCatalogItemSmallWidth">
            <summary>
            MaxCatalogItemSmallWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.MaxCatalogItemMediumWidth">
            <summary>
            MaxCatalogItemMediumWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.MaxCatalogItemThumbnailWidth">
            <summary>
            MaxCatalogItemThumbnailWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.MaxCatalogItemLargeWidth">
            <summary>
            MaxCatalogItemLargeWidth : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ActiveInd">
            <summary>
            ActiveInd : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.SMTPServer">
            <summary>
            SMTPServer : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.SMTPUserName">
            <summary>
            SMTPUserName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.SMTPPassword">
            <summary>
            SMTPPassword : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.BottomScriptBlock">
            <summary>
            BottomScriptBlock : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.UPSUserName">
            <summary>
            UPSUserName : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.UPSPassword">
            <summary>
            UPSPassword : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.UPSKey">
            <summary>
            UPSKey : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ShippingOriginZipCode">
            <summary>
            ShippingOriginZipCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.Theme">
            <summary>
            Theme : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ShopByPriceMin">
            <summary>
            ShopByPriceMin : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ShopByPriceMax">
            <summary>
            ShopByPriceMax : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ShopByPriceIncrement">
            <summary>
            ShopByPriceIncrement : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.FedExAccountNumber">
            <summary>
            FedExAccountNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.FedExMeterNumber">
            <summary>
            FedExMeterNumber : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.FedExProductionKey">
            <summary>
            FedExProductionKey : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.FedExSecurityCode">
            <summary>
            FedExSecurityCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ShippingOriginStateCode">
            <summary>
            ShippingOriginStateCode : 
            </summary>
        </member>
        <member name="F:ZNode.Libraries.DataAccess.Entities.PortalColumn.ShippingOriginCountryCode">
            <summary>
            ShippingOriginCountryCode : 
            </summary>
        </member>
    </members>
</doc>
