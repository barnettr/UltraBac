	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file Product.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region ProductEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Product"/> object.
	/// </remarks>
	public class ProductEventArgs : System.EventArgs
	{
		private ProductColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the ProductEventArgs class.
		///</summary>
		public ProductEventArgs(ProductColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProductEventArgs class.
		///</summary>
		public ProductEventArgs(ProductColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The ProductColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProductColumn" />
		public ProductColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Product related events.
	///</summary>
	public delegate void ProductEventHandler(object sender, ProductEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeProduct' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Product))]
	public abstract partial class ProductBase : EntityBase, IEntityId<ProductKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private ProductEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//ProductEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private ProductEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Product> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ProductEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProductBase"/> instance.
		///</summary>
		public ProductBase()
		{
			this.entityData = new ProductEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProductBase"/> instance.
		///</summary>
		///<param name="productPortalID"></param>
		///<param name="productName"></param>
		///<param name="productShortDescription"></param>
		///<param name="productDescription"></param>
		///<param name="productFeaturesDesc"></param>
		///<param name="productProductNum"></param>
		///<param name="productProductTypeID"></param>
		///<param name="productRetailPrice"></param>
		///<param name="productWholesalePrice"></param>
		///<param name="productSalePrice"></param>
		///<param name="productImageFile"></param>
		///<param name="productWeight"></param>
		///<param name="productActiveInd"></param>
		///<param name="productDisplayOrder"></param>
		///<param name="productCallForPricing"></param>
		///<param name="productHomepageSpecial"></param>
		///<param name="productCategorySpecial"></param>
		///<param name="productInventoryDisplay"></param>
		///<param name="productKeywords"></param>
		///<param name="productManufacturerID"></param>
		///<param name="productAdditionalInfoLink"></param>
		///<param name="productAdditionalInfoLinkLabel"></param>
		///<param name="productShippingRuleTypeID"></param>
		///<param name="productSEOTitle"></param>
		///<param name="productSEOKeywords"></param>
		///<param name="productSEODescription"></param>
		///<param name="productCustom1"></param>
		///<param name="productCustom2"></param>
		///<param name="productCustom3"></param>
		///<param name="productShipEachItemSeparately"></param>
		///<param name="productSKU"></param>
		///<param name="productQuantityOnHand"></param>
		///<param name="productAllowBackOrder"></param>
		///<param name="productBackOrderMsg"></param>
		///<param name="productDropShipInd"></param>
		///<param name="productDropShipEmailID"></param>
		///<param name="productSpecifications"></param>
		///<param name="productAdditionalInformation"></param>
		///<param name="productInStockMsg"></param>
		///<param name="productOutOfStockMsg"></param>
		///<param name="productTrackInventoryInd"></param>
		public ProductBase(System.Int32 productPortalID, System.String productName, System.String productShortDescription, 
			System.String productDescription, System.String productFeaturesDesc, System.String productProductNum, System.Int32 productProductTypeID, 
			System.Decimal? productRetailPrice, System.Decimal? productWholesalePrice, System.Decimal? productSalePrice, 
			System.String productImageFile, System.Decimal? productWeight, System.Boolean productActiveInd, System.Int32 productDisplayOrder, 
			System.Boolean productCallForPricing, System.Boolean productHomepageSpecial, System.Boolean productCategorySpecial, 
			System.Byte productInventoryDisplay, System.String productKeywords, System.Int32? productManufacturerID, 
			System.String productAdditionalInfoLink, System.String productAdditionalInfoLinkLabel, System.Int32? productShippingRuleTypeID, 
			System.String productSEOTitle, System.String productSEOKeywords, System.String productSEODescription, System.String productCustom1, 
			System.String productCustom2, System.String productCustom3, System.Boolean? productShipEachItemSeparately, 
			System.String productSKU, System.Int32? productQuantityOnHand, System.Boolean? productAllowBackOrder, System.String productBackOrderMsg, 
			System.Boolean? productDropShipInd, System.String productDropShipEmailID, System.String productSpecifications, 
			System.String productAdditionalInformation, System.String productInStockMsg, System.String productOutOfStockMsg, 
			System.Boolean? productTrackInventoryInd)
		{
			this.entityData = new ProductEntityData();
			this.backupData = null;

			this.PortalID = productPortalID;
			this.Name = productName;
			this.ShortDescription = productShortDescription;
			this.Description = productDescription;
			this.FeaturesDesc = productFeaturesDesc;
			this.ProductNum = productProductNum;
			this.ProductTypeID = productProductTypeID;
			this.RetailPrice = productRetailPrice;
			this.WholesalePrice = productWholesalePrice;
			this.SalePrice = productSalePrice;
			this.ImageFile = productImageFile;
			this.Weight = productWeight;
			this.ActiveInd = productActiveInd;
			this.DisplayOrder = productDisplayOrder;
			this.CallForPricing = productCallForPricing;
			this.HomepageSpecial = productHomepageSpecial;
			this.CategorySpecial = productCategorySpecial;
			this.InventoryDisplay = productInventoryDisplay;
			this.Keywords = productKeywords;
			this.ManufacturerID = productManufacturerID;
			this.AdditionalInfoLink = productAdditionalInfoLink;
			this.AdditionalInfoLinkLabel = productAdditionalInfoLinkLabel;
			this.ShippingRuleTypeID = productShippingRuleTypeID;
			this.SEOTitle = productSEOTitle;
			this.SEOKeywords = productSEOKeywords;
			this.SEODescription = productSEODescription;
			this.Custom1 = productCustom1;
			this.Custom2 = productCustom2;
			this.Custom3 = productCustom3;
			this.ShipEachItemSeparately = productShipEachItemSeparately;
			this.SKU = productSKU;
			this.QuantityOnHand = productQuantityOnHand;
			this.AllowBackOrder = productAllowBackOrder;
			this.BackOrderMsg = productBackOrderMsg;
			this.DropShipInd = productDropShipInd;
			this.DropShipEmailID = productDropShipEmailID;
			this.Specifications = productSpecifications;
			this.AdditionalInformation = productAdditionalInformation;
			this.InStockMsg = productInStockMsg;
			this.OutOfStockMsg = productOutOfStockMsg;
			this.TrackInventoryInd = productTrackInventoryInd;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Product"/> instance.
		///</summary>
		///<param name="productPortalID"></param>
		///<param name="productName"></param>
		///<param name="productShortDescription"></param>
		///<param name="productDescription"></param>
		///<param name="productFeaturesDesc"></param>
		///<param name="productProductNum"></param>
		///<param name="productProductTypeID"></param>
		///<param name="productRetailPrice"></param>
		///<param name="productWholesalePrice"></param>
		///<param name="productSalePrice"></param>
		///<param name="productImageFile"></param>
		///<param name="productWeight"></param>
		///<param name="productActiveInd"></param>
		///<param name="productDisplayOrder"></param>
		///<param name="productCallForPricing"></param>
		///<param name="productHomepageSpecial"></param>
		///<param name="productCategorySpecial"></param>
		///<param name="productInventoryDisplay"></param>
		///<param name="productKeywords"></param>
		///<param name="productManufacturerID"></param>
		///<param name="productAdditionalInfoLink"></param>
		///<param name="productAdditionalInfoLinkLabel"></param>
		///<param name="productShippingRuleTypeID"></param>
		///<param name="productSEOTitle"></param>
		///<param name="productSEOKeywords"></param>
		///<param name="productSEODescription"></param>
		///<param name="productCustom1"></param>
		///<param name="productCustom2"></param>
		///<param name="productCustom3"></param>
		///<param name="productShipEachItemSeparately"></param>
		///<param name="productSKU"></param>
		///<param name="productQuantityOnHand"></param>
		///<param name="productAllowBackOrder"></param>
		///<param name="productBackOrderMsg"></param>
		///<param name="productDropShipInd"></param>
		///<param name="productDropShipEmailID"></param>
		///<param name="productSpecifications"></param>
		///<param name="productAdditionalInformation"></param>
		///<param name="productInStockMsg"></param>
		///<param name="productOutOfStockMsg"></param>
		///<param name="productTrackInventoryInd"></param>
		public static Product CreateProduct(System.Int32 productPortalID, System.String productName, System.String productShortDescription, 
			System.String productDescription, System.String productFeaturesDesc, System.String productProductNum, System.Int32 productProductTypeID, 
			System.Decimal? productRetailPrice, System.Decimal? productWholesalePrice, System.Decimal? productSalePrice, 
			System.String productImageFile, System.Decimal? productWeight, System.Boolean productActiveInd, System.Int32 productDisplayOrder, 
			System.Boolean productCallForPricing, System.Boolean productHomepageSpecial, System.Boolean productCategorySpecial, 
			System.Byte productInventoryDisplay, System.String productKeywords, System.Int32? productManufacturerID, 
			System.String productAdditionalInfoLink, System.String productAdditionalInfoLinkLabel, System.Int32? productShippingRuleTypeID, 
			System.String productSEOTitle, System.String productSEOKeywords, System.String productSEODescription, System.String productCustom1, 
			System.String productCustom2, System.String productCustom3, System.Boolean? productShipEachItemSeparately, 
			System.String productSKU, System.Int32? productQuantityOnHand, System.Boolean? productAllowBackOrder, System.String productBackOrderMsg, 
			System.Boolean? productDropShipInd, System.String productDropShipEmailID, System.String productSpecifications, 
			System.String productAdditionalInformation, System.String productInStockMsg, System.String productOutOfStockMsg, 
			System.Boolean? productTrackInventoryInd)
		{
			Product newProduct = new Product();
			newProduct.PortalID = productPortalID;
			newProduct.Name = productName;
			newProduct.ShortDescription = productShortDescription;
			newProduct.Description = productDescription;
			newProduct.FeaturesDesc = productFeaturesDesc;
			newProduct.ProductNum = productProductNum;
			newProduct.ProductTypeID = productProductTypeID;
			newProduct.RetailPrice = productRetailPrice;
			newProduct.WholesalePrice = productWholesalePrice;
			newProduct.SalePrice = productSalePrice;
			newProduct.ImageFile = productImageFile;
			newProduct.Weight = productWeight;
			newProduct.ActiveInd = productActiveInd;
			newProduct.DisplayOrder = productDisplayOrder;
			newProduct.CallForPricing = productCallForPricing;
			newProduct.HomepageSpecial = productHomepageSpecial;
			newProduct.CategorySpecial = productCategorySpecial;
			newProduct.InventoryDisplay = productInventoryDisplay;
			newProduct.Keywords = productKeywords;
			newProduct.ManufacturerID = productManufacturerID;
			newProduct.AdditionalInfoLink = productAdditionalInfoLink;
			newProduct.AdditionalInfoLinkLabel = productAdditionalInfoLinkLabel;
			newProduct.ShippingRuleTypeID = productShippingRuleTypeID;
			newProduct.SEOTitle = productSEOTitle;
			newProduct.SEOKeywords = productSEOKeywords;
			newProduct.SEODescription = productSEODescription;
			newProduct.Custom1 = productCustom1;
			newProduct.Custom2 = productCustom2;
			newProduct.Custom3 = productCustom3;
			newProduct.ShipEachItemSeparately = productShipEachItemSeparately;
			newProduct.SKU = productSKU;
			newProduct.QuantityOnHand = productQuantityOnHand;
			newProduct.AllowBackOrder = productAllowBackOrder;
			newProduct.BackOrderMsg = productBackOrderMsg;
			newProduct.DropShipInd = productDropShipInd;
			newProduct.DropShipEmailID = productDropShipEmailID;
			newProduct.Specifications = productSpecifications;
			newProduct.AdditionalInformation = productAdditionalInformation;
			newProduct.InStockMsg = productInStockMsg;
			newProduct.OutOfStockMsg = productOutOfStockMsg;
			newProduct.TrackInventoryInd = productTrackInventoryInd;
			return newProduct;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ProductColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ProductColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ProductColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ProductEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProductEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ProductColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProductEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProductEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the ProductID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProductID
		{
			get
			{
				return this.entityData.ProductID; 
			}
			
			set
			{
				if (this.entityData.ProductID == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ProductID, this.entityData.ProductID);
				this.entityData.ProductID = value;
				this.EntityId.ProductID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ProductID, this.entityData.ProductID);
				OnPropertyChanged("ProductID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PortalID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PortalID
		{
			get
			{
				return this.entityData.PortalID; 
			}
			
			set
			{
				if (this.entityData.PortalID == value)
					return;
					
					
				OnColumnChanging(ProductColumn.PortalID, this.entityData.PortalID);
				this.entityData.PortalID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.PortalID, this.entityData.PortalID);
				OnPropertyChanged("PortalID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShortDescription property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String ShortDescription
		{
			get
			{
				return this.entityData.ShortDescription; 
			}
			
			set
			{
				if (this.entityData.ShortDescription == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ShortDescription, this.entityData.ShortDescription);
				this.entityData.ShortDescription = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ShortDescription, this.entityData.ShortDescription);
				OnPropertyChanged("ShortDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeaturesDesc property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String FeaturesDesc
		{
			get
			{
				return this.entityData.FeaturesDesc; 
			}
			
			set
			{
				if (this.entityData.FeaturesDesc == value)
					return;
					
					
				OnColumnChanging(ProductColumn.FeaturesDesc, this.entityData.FeaturesDesc);
				this.entityData.FeaturesDesc = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.FeaturesDesc, this.entityData.FeaturesDesc);
				OnPropertyChanged("FeaturesDesc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String ProductNum
		{
			get
			{
				return this.entityData.ProductNum; 
			}
			
			set
			{
				if (this.entityData.ProductNum == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ProductNum, this.entityData.ProductNum);
				this.entityData.ProductNum = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ProductNum, this.entityData.ProductNum);
				OnPropertyChanged("ProductNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductTypeID
		{
			get
			{
				return this.entityData.ProductTypeID; 
			}
			
			set
			{
				if (this.entityData.ProductTypeID == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ProductTypeID, this.entityData.ProductTypeID);
				this.entityData.ProductTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ProductTypeID, this.entityData.ProductTypeID);
				OnPropertyChanged("ProductTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsRetailPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailPrice
		{
			get
			{
				return this.entityData.RetailPrice; 
			}
			
			set
			{
				if (this.entityData.RetailPrice == value)
					return;
					
					
				OnColumnChanging(ProductColumn.RetailPrice, this.entityData.RetailPrice);
				this.entityData.RetailPrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.RetailPrice, this.entityData.RetailPrice);
				OnPropertyChanged("RetailPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalePrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsWholesalePriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WholesalePrice
		{
			get
			{
				return this.entityData.WholesalePrice; 
			}
			
			set
			{
				if (this.entityData.WholesalePrice == value)
					return;
					
					
				OnColumnChanging(ProductColumn.WholesalePrice, this.entityData.WholesalePrice);
				this.entityData.WholesalePrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.WholesalePrice, this.entityData.WholesalePrice);
				OnPropertyChanged("WholesalePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalePrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsSalePriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SalePrice
		{
			get
			{
				return this.entityData.SalePrice; 
			}
			
			set
			{
				if (this.entityData.SalePrice == value)
					return;
					
					
				OnColumnChanging(ProductColumn.SalePrice, this.entityData.SalePrice);
				this.entityData.SalePrice = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.SalePrice, this.entityData.SalePrice);
				OnPropertyChanged("SalePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageFile property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String ImageFile
		{
			get
			{
				return this.entityData.ImageFile; 
			}
			
			set
			{
				if (this.entityData.ImageFile == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ImageFile, this.entityData.ImageFile);
				this.entityData.ImageFile = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ImageFile, this.entityData.ImageFile);
				OnPropertyChanged("ImageFile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Weight property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWeightNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Weight
		{
			get
			{
				return this.entityData.Weight; 
			}
			
			set
			{
				if (this.entityData.Weight == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Weight, this.entityData.Weight);
				this.entityData.Weight = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Weight, this.entityData.Weight);
				OnPropertyChanged("Weight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ActiveInd
		{
			get
			{
				return this.entityData.ActiveInd; 
			}
			
			set
			{
				if (this.entityData.ActiveInd == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ActiveInd, this.entityData.ActiveInd);
				this.entityData.ActiveInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ActiveInd, this.entityData.ActiveInd);
				OnPropertyChanged("ActiveInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
					
				OnColumnChanging(ProductColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallForPricing property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean CallForPricing
		{
			get
			{
				return this.entityData.CallForPricing; 
			}
			
			set
			{
				if (this.entityData.CallForPricing == value)
					return;
					
					
				OnColumnChanging(ProductColumn.CallForPricing, this.entityData.CallForPricing);
				this.entityData.CallForPricing = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.CallForPricing, this.entityData.CallForPricing);
				OnPropertyChanged("CallForPricing");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HomepageSpecial property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean HomepageSpecial
		{
			get
			{
				return this.entityData.HomepageSpecial; 
			}
			
			set
			{
				if (this.entityData.HomepageSpecial == value)
					return;
					
					
				OnColumnChanging(ProductColumn.HomepageSpecial, this.entityData.HomepageSpecial);
				this.entityData.HomepageSpecial = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.HomepageSpecial, this.entityData.HomepageSpecial);
				OnPropertyChanged("HomepageSpecial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategorySpecial property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean CategorySpecial
		{
			get
			{
				return this.entityData.CategorySpecial; 
			}
			
			set
			{
				if (this.entityData.CategorySpecial == value)
					return;
					
					
				OnColumnChanging(ProductColumn.CategorySpecial, this.entityData.CategorySpecial);
				this.entityData.CategorySpecial = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.CategorySpecial, this.entityData.CategorySpecial);
				OnPropertyChanged("CategorySpecial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InventoryDisplay property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Byte InventoryDisplay
		{
			get
			{
				return this.entityData.InventoryDisplay; 
			}
			
			set
			{
				if (this.entityData.InventoryDisplay == value)
					return;
					
					
				OnColumnChanging(ProductColumn.InventoryDisplay, this.entityData.InventoryDisplay);
				this.entityData.InventoryDisplay = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.InventoryDisplay, this.entityData.InventoryDisplay);
				OnPropertyChanged("InventoryDisplay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Keywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Keywords
		{
			get
			{
				return this.entityData.Keywords; 
			}
			
			set
			{
				if (this.entityData.Keywords == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Keywords, this.entityData.Keywords);
				this.entityData.Keywords = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Keywords, this.entityData.Keywords);
				OnPropertyChanged("Keywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ManufacturerID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsManufacturerIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ManufacturerID
		{
			get
			{
				return this.entityData.ManufacturerID; 
			}
			
			set
			{
				if (this.entityData.ManufacturerID == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ManufacturerID, this.entityData.ManufacturerID);
				this.entityData.ManufacturerID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ManufacturerID, this.entityData.ManufacturerID);
				OnPropertyChanged("ManufacturerID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdditionalInfoLink property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String AdditionalInfoLink
		{
			get
			{
				return this.entityData.AdditionalInfoLink; 
			}
			
			set
			{
				if (this.entityData.AdditionalInfoLink == value)
					return;
					
					
				OnColumnChanging(ProductColumn.AdditionalInfoLink, this.entityData.AdditionalInfoLink);
				this.entityData.AdditionalInfoLink = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.AdditionalInfoLink, this.entityData.AdditionalInfoLink);
				OnPropertyChanged("AdditionalInfoLink");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdditionalInfoLinkLabel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String AdditionalInfoLinkLabel
		{
			get
			{
				return this.entityData.AdditionalInfoLinkLabel; 
			}
			
			set
			{
				if (this.entityData.AdditionalInfoLinkLabel == value)
					return;
					
					
				OnColumnChanging(ProductColumn.AdditionalInfoLinkLabel, this.entityData.AdditionalInfoLinkLabel);
				this.entityData.AdditionalInfoLinkLabel = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.AdditionalInfoLinkLabel, this.entityData.AdditionalInfoLinkLabel);
				OnPropertyChanged("AdditionalInfoLinkLabel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippingRuleTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsShippingRuleTypeIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ShippingRuleTypeID
		{
			get
			{
				return this.entityData.ShippingRuleTypeID; 
			}
			
			set
			{
				if (this.entityData.ShippingRuleTypeID == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ShippingRuleTypeID, this.entityData.ShippingRuleTypeID);
				this.entityData.ShippingRuleTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ShippingRuleTypeID, this.entityData.ShippingRuleTypeID);
				OnPropertyChanged("ShippingRuleTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SEOTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SEOTitle
		{
			get
			{
				return this.entityData.SEOTitle; 
			}
			
			set
			{
				if (this.entityData.SEOTitle == value)
					return;
					
					
				OnColumnChanging(ProductColumn.SEOTitle, this.entityData.SEOTitle);
				this.entityData.SEOTitle = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.SEOTitle, this.entityData.SEOTitle);
				OnPropertyChanged("SEOTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SEOKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SEOKeywords
		{
			get
			{
				return this.entityData.SEOKeywords; 
			}
			
			set
			{
				if (this.entityData.SEOKeywords == value)
					return;
					
					
				OnColumnChanging(ProductColumn.SEOKeywords, this.entityData.SEOKeywords);
				this.entityData.SEOKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.SEOKeywords, this.entityData.SEOKeywords);
				OnPropertyChanged("SEOKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SEODescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SEODescription
		{
			get
			{
				return this.entityData.SEODescription; 
			}
			
			set
			{
				if (this.entityData.SEODescription == value)
					return;
					
					
				OnColumnChanging(ProductColumn.SEODescription, this.entityData.SEODescription);
				this.entityData.SEODescription = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.SEODescription, this.entityData.SEODescription);
				OnPropertyChanged("SEODescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom1
		{
			get
			{
				return this.entityData.Custom1; 
			}
			
			set
			{
				if (this.entityData.Custom1 == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Custom1, this.entityData.Custom1);
				this.entityData.Custom1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Custom1, this.entityData.Custom1);
				OnPropertyChanged("Custom1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom2
		{
			get
			{
				return this.entityData.Custom2; 
			}
			
			set
			{
				if (this.entityData.Custom2 == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Custom2, this.entityData.Custom2);
				this.entityData.Custom2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Custom2, this.entityData.Custom2);
				OnPropertyChanged("Custom2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom3 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom3
		{
			get
			{
				return this.entityData.Custom3; 
			}
			
			set
			{
				if (this.entityData.Custom3 == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Custom3, this.entityData.Custom3);
				this.entityData.Custom3 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Custom3, this.entityData.Custom3);
				OnPropertyChanged("Custom3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipEachItemSeparately property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsShipEachItemSeparatelyNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ShipEachItemSeparately
		{
			get
			{
				return this.entityData.ShipEachItemSeparately; 
			}
			
			set
			{
				if (this.entityData.ShipEachItemSeparately == value)
					return;
					
					
				OnColumnChanging(ProductColumn.ShipEachItemSeparately, this.entityData.ShipEachItemSeparately);
				this.entityData.ShipEachItemSeparately = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.ShipEachItemSeparately, this.entityData.ShipEachItemSeparately);
				OnPropertyChanged("ShipEachItemSeparately");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SKU property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String SKU
		{
			get
			{
				return this.entityData.SKU; 
			}
			
			set
			{
				if (this.entityData.SKU == value)
					return;
					
					
				OnColumnChanging(ProductColumn.SKU, this.entityData.SKU);
				this.entityData.SKU = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.SKU, this.entityData.SKU);
				OnPropertyChanged("SKU");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuantityOnHand property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQuantityOnHandNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? QuantityOnHand
		{
			get
			{
				return this.entityData.QuantityOnHand; 
			}
			
			set
			{
				if (this.entityData.QuantityOnHand == value)
					return;
					
					
				OnColumnChanging(ProductColumn.QuantityOnHand, this.entityData.QuantityOnHand);
				this.entityData.QuantityOnHand = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.QuantityOnHand, this.entityData.QuantityOnHand);
				OnPropertyChanged("QuantityOnHand");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllowBackOrder property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAllowBackOrderNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AllowBackOrder
		{
			get
			{
				return this.entityData.AllowBackOrder; 
			}
			
			set
			{
				if (this.entityData.AllowBackOrder == value)
					return;
					
					
				OnColumnChanging(ProductColumn.AllowBackOrder, this.entityData.AllowBackOrder);
				this.entityData.AllowBackOrder = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.AllowBackOrder, this.entityData.AllowBackOrder);
				OnPropertyChanged("AllowBackOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BackOrderMsg property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String BackOrderMsg
		{
			get
			{
				return this.entityData.BackOrderMsg; 
			}
			
			set
			{
				if (this.entityData.BackOrderMsg == value)
					return;
					
					
				OnColumnChanging(ProductColumn.BackOrderMsg, this.entityData.BackOrderMsg);
				this.entityData.BackOrderMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.BackOrderMsg, this.entityData.BackOrderMsg);
				OnPropertyChanged("BackOrderMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DropShipInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDropShipIndNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DropShipInd
		{
			get
			{
				return this.entityData.DropShipInd; 
			}
			
			set
			{
				if (this.entityData.DropShipInd == value)
					return;
					
					
				OnColumnChanging(ProductColumn.DropShipInd, this.entityData.DropShipInd);
				this.entityData.DropShipInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.DropShipInd, this.entityData.DropShipInd);
				OnPropertyChanged("DropShipInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DropShipEmailID property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String DropShipEmailID
		{
			get
			{
				return this.entityData.DropShipEmailID; 
			}
			
			set
			{
				if (this.entityData.DropShipEmailID == value)
					return;
					
					
				OnColumnChanging(ProductColumn.DropShipEmailID, this.entityData.DropShipEmailID);
				this.entityData.DropShipEmailID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.DropShipEmailID, this.entityData.DropShipEmailID);
				OnPropertyChanged("DropShipEmailID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Specifications property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Specifications
		{
			get
			{
				return this.entityData.Specifications; 
			}
			
			set
			{
				if (this.entityData.Specifications == value)
					return;
					
					
				OnColumnChanging(ProductColumn.Specifications, this.entityData.Specifications);
				this.entityData.Specifications = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.Specifications, this.entityData.Specifications);
				OnPropertyChanged("Specifications");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdditionalInformation property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String AdditionalInformation
		{
			get
			{
				return this.entityData.AdditionalInformation; 
			}
			
			set
			{
				if (this.entityData.AdditionalInformation == value)
					return;
					
					
				OnColumnChanging(ProductColumn.AdditionalInformation, this.entityData.AdditionalInformation);
				this.entityData.AdditionalInformation = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.AdditionalInformation, this.entityData.AdditionalInformation);
				OnPropertyChanged("AdditionalInformation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InStockMsg property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String InStockMsg
		{
			get
			{
				return this.entityData.InStockMsg; 
			}
			
			set
			{
				if (this.entityData.InStockMsg == value)
					return;
					
					
				OnColumnChanging(ProductColumn.InStockMsg, this.entityData.InStockMsg);
				this.entityData.InStockMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.InStockMsg, this.entityData.InStockMsg);
				OnPropertyChanged("InStockMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutOfStockMsg property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String OutOfStockMsg
		{
			get
			{
				return this.entityData.OutOfStockMsg; 
			}
			
			set
			{
				if (this.entityData.OutOfStockMsg == value)
					return;
					
					
				OnColumnChanging(ProductColumn.OutOfStockMsg, this.entityData.OutOfStockMsg);
				this.entityData.OutOfStockMsg = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.OutOfStockMsg, this.entityData.OutOfStockMsg);
				OnPropertyChanged("OutOfStockMsg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrackInventoryInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTrackInventoryIndNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TrackInventoryInd
		{
			get
			{
				return this.entityData.TrackInventoryInd; 
			}
			
			set
			{
				if (this.entityData.TrackInventoryInd == value)
					return;
					
					
				OnColumnChanging(ProductColumn.TrackInventoryInd, this.entityData.TrackInventoryInd);
				this.entityData.TrackInventoryInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(ProductColumn.TrackInventoryInd, this.entityData.TrackInventoryInd);
				OnPropertyChanged("TrackInventoryInd");
			}
		}
		

		#region Source Foreign Key Property
				
		private Portal _portalIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Portal"/>.
		/// </summary>
		/// <value>The source Portal for PortalID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Portal PortalIDSource
      	{
            get { return this._portalIDSource; }
            set { this._portalIDSource = value; }
      	}
		private Manufacturer _manufacturerIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Manufacturer"/>.
		/// </summary>
		/// <value>The source Manufacturer for ManufacturerID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Manufacturer ManufacturerIDSource
      	{
            get { return this._manufacturerIDSource; }
            set { this._manufacturerIDSource = value; }
      	}
		private ProductType _productTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProductType"/>.
		/// </summary>
		/// <value>The source ProductType for ProductTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual ProductType ProductTypeIDSource
      	{
            get { return this._productTypeIDSource; }
            set { this._productTypeIDSource = value; }
      	}
		private ShippingRuleType _shippingRuleTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ShippingRuleType"/>.
		/// </summary>
		/// <value>The source ShippingRuleType for ShippingRuleTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual ShippingRuleType ShippingRuleTypeIDSource
      	{
            get { return this._shippingRuleTypeIDSource; }
            set { this._shippingRuleTypeIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeProduct"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProductID", "PortalID", "Name", "ShortDescription", "Description", "FeaturesDesc", "ProductNum", "ProductTypeID", "RetailPrice", "WholesalePrice", "SalePrice", "ImageFile", "Weight", "ActiveInd", "DisplayOrder", "CallForPricing", "HomepageSpecial", "CategorySpecial", "InventoryDisplay", "Keywords", "ManufacturerID", "AdditionalInfoLink", "AdditionalInfoLinkLabel", "ShippingRuleTypeID", "SEOTitle", "SEOKeywords", "SEODescription", "Custom1", "Custom2", "Custom3", "ShipEachItemSeparately", "SKU", "QuantityOnHand", "AllowBackOrder", "BackOrderMsg", "DropShipInd", "DropShipEmailID", "Specifications", "AdditionalInformation", "InStockMsg", "OutOfStockMsg", "TrackInventoryInd"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of ProductImage objects
		///	which are related to this object through the relation FK_ZNodeProductView_ZNodeProduct
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductImage> ProductImageCollection
		{
			get { return entityData.ProductImageCollection; }
			set { entityData.ProductImageCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductCategory objects
		///	which are related to this object through the relation FK_SC_ProductCategory_SC_Product
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductCategory> ProductCategoryCollection
		{
			get { return entityData.ProductCategoryCollection; }
			set { entityData.ProductCategoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductCrossSell objects
		///	which are related to this object through the relation FK_SC_ProductCrossSellType_SC_Product
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductCrossSell> ProductCrossSellCollection
		{
			get { return entityData.ProductCrossSellCollection; }
			set { entityData.ProductCrossSellCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SKU objects
		///	which are related to this object through the relation FK_SC_SKU_SC_Product
		/// </summary>	
		[BindableAttribute()]
		public TList<SKU> SKUCollection
		{
			get { return entityData.SKUCollection; }
			set { entityData.SKUCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductHighlight objects
		///	which are related to this object through the relation FK_SC_ProductHighlight_SC_Product
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductHighlight> ProductHighlightCollection
		{
			get { return entityData.ProductHighlightCollection; }
			set { entityData.ProductHighlightCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductAddOn objects
		///	which are related to this object through the relation FK_ZNodeProductAddOn_ZNodeProduct
		/// </summary>	
		[BindableAttribute()]
		public TList<ProductAddOn> ProductAddOnCollection
		{
			get { return entityData.ProductAddOnCollection; }
			set { entityData.ProductAddOnCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProductEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Product) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Product>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Product);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Product Entity 
		///</summary>
		public virtual Product Copy()
		{
			//shallow copy entity
			Product copy = new Product();
			copy.ProductID = this.ProductID;
			copy.PortalID = this.PortalID;
			copy.Name = this.Name;
			copy.ShortDescription = this.ShortDescription;
			copy.Description = this.Description;
			copy.FeaturesDesc = this.FeaturesDesc;
			copy.ProductNum = this.ProductNum;
			copy.ProductTypeID = this.ProductTypeID;
			copy.RetailPrice = this.RetailPrice;
			copy.WholesalePrice = this.WholesalePrice;
			copy.SalePrice = this.SalePrice;
			copy.ImageFile = this.ImageFile;
			copy.Weight = this.Weight;
			copy.ActiveInd = this.ActiveInd;
			copy.DisplayOrder = this.DisplayOrder;
			copy.CallForPricing = this.CallForPricing;
			copy.HomepageSpecial = this.HomepageSpecial;
			copy.CategorySpecial = this.CategorySpecial;
			copy.InventoryDisplay = this.InventoryDisplay;
			copy.Keywords = this.Keywords;
			copy.ManufacturerID = this.ManufacturerID;
			copy.AdditionalInfoLink = this.AdditionalInfoLink;
			copy.AdditionalInfoLinkLabel = this.AdditionalInfoLinkLabel;
			copy.ShippingRuleTypeID = this.ShippingRuleTypeID;
			copy.SEOTitle = this.SEOTitle;
			copy.SEOKeywords = this.SEOKeywords;
			copy.SEODescription = this.SEODescription;
			copy.Custom1 = this.Custom1;
			copy.Custom2 = this.Custom2;
			copy.Custom3 = this.Custom3;
			copy.ShipEachItemSeparately = this.ShipEachItemSeparately;
			copy.SKU = this.SKU;
			copy.QuantityOnHand = this.QuantityOnHand;
			copy.AllowBackOrder = this.AllowBackOrder;
			copy.BackOrderMsg = this.BackOrderMsg;
			copy.DropShipInd = this.DropShipInd;
			copy.DropShipEmailID = this.DropShipEmailID;
			copy.Specifications = this.Specifications;
			copy.AdditionalInformation = this.AdditionalInformation;
			copy.InStockMsg = this.InStockMsg;
			copy.OutOfStockMsg = this.OutOfStockMsg;
			copy.TrackInventoryInd = this.TrackInventoryInd;
					
			copy.AcceptChanges();
			return (Product)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Product Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Product DeepCopy()
		{
			return EntityHelper.Clone<Product>(this as Product);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProductBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProductBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ProductBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ProductBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProductBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ProductBase Object1, ProductBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProductID != Object2.ProductID)
				equal = false;
			if (Object1.PortalID != Object2.PortalID)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.ShortDescription != null && Object2.ShortDescription != null )
			{
				if (Object1.ShortDescription != Object2.ShortDescription)
					equal = false;
			}
			else if (Object1.ShortDescription == null ^ Object2.ShortDescription == null )
			{
				equal = false;
			}
			if (Object1.Description != Object2.Description)
				equal = false;
			if ( Object1.FeaturesDesc != null && Object2.FeaturesDesc != null )
			{
				if (Object1.FeaturesDesc != Object2.FeaturesDesc)
					equal = false;
			}
			else if (Object1.FeaturesDesc == null ^ Object2.FeaturesDesc == null )
			{
				equal = false;
			}
			if (Object1.ProductNum != Object2.ProductNum)
				equal = false;
			if (Object1.ProductTypeID != Object2.ProductTypeID)
				equal = false;
			if ( Object1.RetailPrice != null && Object2.RetailPrice != null )
			{
				if (Object1.RetailPrice != Object2.RetailPrice)
					equal = false;
			}
			else if (Object1.RetailPrice == null ^ Object2.RetailPrice == null )
			{
				equal = false;
			}
			if ( Object1.WholesalePrice != null && Object2.WholesalePrice != null )
			{
				if (Object1.WholesalePrice != Object2.WholesalePrice)
					equal = false;
			}
			else if (Object1.WholesalePrice == null ^ Object2.WholesalePrice == null )
			{
				equal = false;
			}
			if ( Object1.SalePrice != null && Object2.SalePrice != null )
			{
				if (Object1.SalePrice != Object2.SalePrice)
					equal = false;
			}
			else if (Object1.SalePrice == null ^ Object2.SalePrice == null )
			{
				equal = false;
			}
			if ( Object1.ImageFile != null && Object2.ImageFile != null )
			{
				if (Object1.ImageFile != Object2.ImageFile)
					equal = false;
			}
			else if (Object1.ImageFile == null ^ Object2.ImageFile == null )
			{
				equal = false;
			}
			if ( Object1.Weight != null && Object2.Weight != null )
			{
				if (Object1.Weight != Object2.Weight)
					equal = false;
			}
			else if (Object1.Weight == null ^ Object2.Weight == null )
			{
				equal = false;
			}
			if (Object1.ActiveInd != Object2.ActiveInd)
				equal = false;
			if (Object1.DisplayOrder != Object2.DisplayOrder)
				equal = false;
			if (Object1.CallForPricing != Object2.CallForPricing)
				equal = false;
			if (Object1.HomepageSpecial != Object2.HomepageSpecial)
				equal = false;
			if (Object1.CategorySpecial != Object2.CategorySpecial)
				equal = false;
			if (Object1.InventoryDisplay != Object2.InventoryDisplay)
				equal = false;
			if ( Object1.Keywords != null && Object2.Keywords != null )
			{
				if (Object1.Keywords != Object2.Keywords)
					equal = false;
			}
			else if (Object1.Keywords == null ^ Object2.Keywords == null )
			{
				equal = false;
			}
			if ( Object1.ManufacturerID != null && Object2.ManufacturerID != null )
			{
				if (Object1.ManufacturerID != Object2.ManufacturerID)
					equal = false;
			}
			else if (Object1.ManufacturerID == null ^ Object2.ManufacturerID == null )
			{
				equal = false;
			}
			if ( Object1.AdditionalInfoLink != null && Object2.AdditionalInfoLink != null )
			{
				if (Object1.AdditionalInfoLink != Object2.AdditionalInfoLink)
					equal = false;
			}
			else if (Object1.AdditionalInfoLink == null ^ Object2.AdditionalInfoLink == null )
			{
				equal = false;
			}
			if ( Object1.AdditionalInfoLinkLabel != null && Object2.AdditionalInfoLinkLabel != null )
			{
				if (Object1.AdditionalInfoLinkLabel != Object2.AdditionalInfoLinkLabel)
					equal = false;
			}
			else if (Object1.AdditionalInfoLinkLabel == null ^ Object2.AdditionalInfoLinkLabel == null )
			{
				equal = false;
			}
			if ( Object1.ShippingRuleTypeID != null && Object2.ShippingRuleTypeID != null )
			{
				if (Object1.ShippingRuleTypeID != Object2.ShippingRuleTypeID)
					equal = false;
			}
			else if (Object1.ShippingRuleTypeID == null ^ Object2.ShippingRuleTypeID == null )
			{
				equal = false;
			}
			if ( Object1.SEOTitle != null && Object2.SEOTitle != null )
			{
				if (Object1.SEOTitle != Object2.SEOTitle)
					equal = false;
			}
			else if (Object1.SEOTitle == null ^ Object2.SEOTitle == null )
			{
				equal = false;
			}
			if ( Object1.SEOKeywords != null && Object2.SEOKeywords != null )
			{
				if (Object1.SEOKeywords != Object2.SEOKeywords)
					equal = false;
			}
			else if (Object1.SEOKeywords == null ^ Object2.SEOKeywords == null )
			{
				equal = false;
			}
			if ( Object1.SEODescription != null && Object2.SEODescription != null )
			{
				if (Object1.SEODescription != Object2.SEODescription)
					equal = false;
			}
			else if (Object1.SEODescription == null ^ Object2.SEODescription == null )
			{
				equal = false;
			}
			if ( Object1.Custom1 != null && Object2.Custom1 != null )
			{
				if (Object1.Custom1 != Object2.Custom1)
					equal = false;
			}
			else if (Object1.Custom1 == null ^ Object2.Custom1 == null )
			{
				equal = false;
			}
			if ( Object1.Custom2 != null && Object2.Custom2 != null )
			{
				if (Object1.Custom2 != Object2.Custom2)
					equal = false;
			}
			else if (Object1.Custom2 == null ^ Object2.Custom2 == null )
			{
				equal = false;
			}
			if ( Object1.Custom3 != null && Object2.Custom3 != null )
			{
				if (Object1.Custom3 != Object2.Custom3)
					equal = false;
			}
			else if (Object1.Custom3 == null ^ Object2.Custom3 == null )
			{
				equal = false;
			}
			if ( Object1.ShipEachItemSeparately != null && Object2.ShipEachItemSeparately != null )
			{
				if (Object1.ShipEachItemSeparately != Object2.ShipEachItemSeparately)
					equal = false;
			}
			else if (Object1.ShipEachItemSeparately == null ^ Object2.ShipEachItemSeparately == null )
			{
				equal = false;
			}
			if ( Object1.SKU != null && Object2.SKU != null )
			{
				if (Object1.SKU != Object2.SKU)
					equal = false;
			}
			else if (Object1.SKU == null ^ Object2.SKU == null )
			{
				equal = false;
			}
			if ( Object1.QuantityOnHand != null && Object2.QuantityOnHand != null )
			{
				if (Object1.QuantityOnHand != Object2.QuantityOnHand)
					equal = false;
			}
			else if (Object1.QuantityOnHand == null ^ Object2.QuantityOnHand == null )
			{
				equal = false;
			}
			if ( Object1.AllowBackOrder != null && Object2.AllowBackOrder != null )
			{
				if (Object1.AllowBackOrder != Object2.AllowBackOrder)
					equal = false;
			}
			else if (Object1.AllowBackOrder == null ^ Object2.AllowBackOrder == null )
			{
				equal = false;
			}
			if ( Object1.BackOrderMsg != null && Object2.BackOrderMsg != null )
			{
				if (Object1.BackOrderMsg != Object2.BackOrderMsg)
					equal = false;
			}
			else if (Object1.BackOrderMsg == null ^ Object2.BackOrderMsg == null )
			{
				equal = false;
			}
			if ( Object1.DropShipInd != null && Object2.DropShipInd != null )
			{
				if (Object1.DropShipInd != Object2.DropShipInd)
					equal = false;
			}
			else if (Object1.DropShipInd == null ^ Object2.DropShipInd == null )
			{
				equal = false;
			}
			if ( Object1.DropShipEmailID != null && Object2.DropShipEmailID != null )
			{
				if (Object1.DropShipEmailID != Object2.DropShipEmailID)
					equal = false;
			}
			else if (Object1.DropShipEmailID == null ^ Object2.DropShipEmailID == null )
			{
				equal = false;
			}
			if ( Object1.Specifications != null && Object2.Specifications != null )
			{
				if (Object1.Specifications != Object2.Specifications)
					equal = false;
			}
			else if (Object1.Specifications == null ^ Object2.Specifications == null )
			{
				equal = false;
			}
			if ( Object1.AdditionalInformation != null && Object2.AdditionalInformation != null )
			{
				if (Object1.AdditionalInformation != Object2.AdditionalInformation)
					equal = false;
			}
			else if (Object1.AdditionalInformation == null ^ Object2.AdditionalInformation == null )
			{
				equal = false;
			}
			if ( Object1.InStockMsg != null && Object2.InStockMsg != null )
			{
				if (Object1.InStockMsg != Object2.InStockMsg)
					equal = false;
			}
			else if (Object1.InStockMsg == null ^ Object2.InStockMsg == null )
			{
				equal = false;
			}
			if ( Object1.OutOfStockMsg != null && Object2.OutOfStockMsg != null )
			{
				if (Object1.OutOfStockMsg != Object2.OutOfStockMsg)
					equal = false;
			}
			else if (Object1.OutOfStockMsg == null ^ Object2.OutOfStockMsg == null )
			{
				equal = false;
			}
			if ( Object1.TrackInventoryInd != null && Object2.TrackInventoryInd != null )
			{
				if (Object1.TrackInventoryInd != Object2.TrackInventoryInd)
					equal = false;
			}
			else if (Object1.TrackInventoryInd == null ^ Object2.TrackInventoryInd == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((ProductBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static ProductComparer GetComparer()
        {
            return new ProductComparer();
        }
        */

        // Comparer delegates back to Product
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Product rhs, ProductColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProductColumn.ProductID:
            		return this.ProductID.CompareTo(rhs.ProductID);
            		
            		                 
            	
            	
            	case ProductColumn.PortalID:
            		return this.PortalID.CompareTo(rhs.PortalID);
            		
            		                 
            	
            	
            	case ProductColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ProductColumn.ShortDescription:
            		return this.ShortDescription.CompareTo(rhs.ShortDescription);
            		
            		                 
            	
            	
            	case ProductColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ProductColumn.FeaturesDesc:
            		return this.FeaturesDesc.CompareTo(rhs.FeaturesDesc);
            		
            		                 
            	
            	
            	case ProductColumn.ProductNum:
            		return this.ProductNum.CompareTo(rhs.ProductNum);
            		
            		                 
            	
            	
            	case ProductColumn.ProductTypeID:
            		return this.ProductTypeID.CompareTo(rhs.ProductTypeID);
            		
            		                 
            	
            	
            	case ProductColumn.RetailPrice:
            		return this.RetailPrice.Value.CompareTo(rhs.RetailPrice.Value);
            		
            		                 
            	
            	
            	case ProductColumn.WholesalePrice:
            		return this.WholesalePrice.Value.CompareTo(rhs.WholesalePrice.Value);
            		
            		                 
            	
            	
            	case ProductColumn.SalePrice:
            		return this.SalePrice.Value.CompareTo(rhs.SalePrice.Value);
            		
            		                 
            	
            	
            	case ProductColumn.ImageFile:
            		return this.ImageFile.CompareTo(rhs.ImageFile);
            		
            		                 
            	
            	
            	case ProductColumn.Weight:
            		return this.Weight.Value.CompareTo(rhs.Weight.Value);
            		
            		                 
            	
            	
            	case ProductColumn.ActiveInd:
            		return this.ActiveInd.CompareTo(rhs.ActiveInd);
            		
            		                 
            	
            	
            	case ProductColumn.DisplayOrder:
            		return this.DisplayOrder.CompareTo(rhs.DisplayOrder);
            		
            		                 
            	
            	
            	case ProductColumn.CallForPricing:
            		return this.CallForPricing.CompareTo(rhs.CallForPricing);
            		
            		                 
            	
            	
            	case ProductColumn.HomepageSpecial:
            		return this.HomepageSpecial.CompareTo(rhs.HomepageSpecial);
            		
            		                 
            	
            	
            	case ProductColumn.CategorySpecial:
            		return this.CategorySpecial.CompareTo(rhs.CategorySpecial);
            		
            		                 
            	
            	
            	case ProductColumn.InventoryDisplay:
            		return this.InventoryDisplay.CompareTo(rhs.InventoryDisplay);
            		
            		                 
            	
            	
            	case ProductColumn.Keywords:
            		return this.Keywords.CompareTo(rhs.Keywords);
            		
            		                 
            	
            	
            	case ProductColumn.ManufacturerID:
            		return this.ManufacturerID.Value.CompareTo(rhs.ManufacturerID.Value);
            		
            		                 
            	
            	
            	case ProductColumn.AdditionalInfoLink:
            		return this.AdditionalInfoLink.CompareTo(rhs.AdditionalInfoLink);
            		
            		                 
            	
            	
            	case ProductColumn.AdditionalInfoLinkLabel:
            		return this.AdditionalInfoLinkLabel.CompareTo(rhs.AdditionalInfoLinkLabel);
            		
            		                 
            	
            	
            	case ProductColumn.ShippingRuleTypeID:
            		return this.ShippingRuleTypeID.Value.CompareTo(rhs.ShippingRuleTypeID.Value);
            		
            		                 
            	
            	
            	case ProductColumn.SEOTitle:
            		return this.SEOTitle.CompareTo(rhs.SEOTitle);
            		
            		                 
            	
            	
            	case ProductColumn.SEOKeywords:
            		return this.SEOKeywords.CompareTo(rhs.SEOKeywords);
            		
            		                 
            	
            	
            	case ProductColumn.SEODescription:
            		return this.SEODescription.CompareTo(rhs.SEODescription);
            		
            		                 
            	
            	
            	case ProductColumn.Custom1:
            		return this.Custom1.CompareTo(rhs.Custom1);
            		
            		                 
            	
            	
            	case ProductColumn.Custom2:
            		return this.Custom2.CompareTo(rhs.Custom2);
            		
            		                 
            	
            	
            	case ProductColumn.Custom3:
            		return this.Custom3.CompareTo(rhs.Custom3);
            		
            		                 
            	
            	
            	case ProductColumn.ShipEachItemSeparately:
            		return this.ShipEachItemSeparately.Value.CompareTo(rhs.ShipEachItemSeparately.Value);
            		
            		                 
            	
            	
            	case ProductColumn.SKU:
            		return this.SKU.CompareTo(rhs.SKU);
            		
            		                 
            	
            	
            	case ProductColumn.QuantityOnHand:
            		return this.QuantityOnHand.Value.CompareTo(rhs.QuantityOnHand.Value);
            		
            		                 
            	
            	
            	case ProductColumn.AllowBackOrder:
            		return this.AllowBackOrder.Value.CompareTo(rhs.AllowBackOrder.Value);
            		
            		                 
            	
            	
            	case ProductColumn.BackOrderMsg:
            		return this.BackOrderMsg.CompareTo(rhs.BackOrderMsg);
            		
            		                 
            	
            	
            	case ProductColumn.DropShipInd:
            		return this.DropShipInd.Value.CompareTo(rhs.DropShipInd.Value);
            		
            		                 
            	
            	
            	case ProductColumn.DropShipEmailID:
            		return this.DropShipEmailID.CompareTo(rhs.DropShipEmailID);
            		
            		                 
            	
            	
            	case ProductColumn.Specifications:
            		return this.Specifications.CompareTo(rhs.Specifications);
            		
            		                 
            	
            	
            	case ProductColumn.AdditionalInformation:
            		return this.AdditionalInformation.CompareTo(rhs.AdditionalInformation);
            		
            		                 
            	
            	
            	case ProductColumn.InStockMsg:
            		return this.InStockMsg.CompareTo(rhs.InStockMsg);
            		
            		                 
            	
            	
            	case ProductColumn.OutOfStockMsg:
            		return this.OutOfStockMsg.CompareTo(rhs.OutOfStockMsg);
            		
            		                 
            	
            	
            	case ProductColumn.TrackInventoryInd:
            		return this.TrackInventoryInd.Value.CompareTo(rhs.TrackInventoryInd.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProductKey> Members
		
		// member variable for the EntityId property
		private ProductKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public ProductKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProductKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Product" 
					+ this.ProductID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{43}{42}- ProductID: {0}{42}- PortalID: {1}{42}- Name: {2}{42}- ShortDescription: {3}{42}- Description: {4}{42}- FeaturesDesc: {5}{42}- ProductNum: {6}{42}- ProductTypeID: {7}{42}- RetailPrice: {8}{42}- WholesalePrice: {9}{42}- SalePrice: {10}{42}- ImageFile: {11}{42}- Weight: {12}{42}- ActiveInd: {13}{42}- DisplayOrder: {14}{42}- CallForPricing: {15}{42}- HomepageSpecial: {16}{42}- CategorySpecial: {17}{42}- InventoryDisplay: {18}{42}- Keywords: {19}{42}- ManufacturerID: {20}{42}- AdditionalInfoLink: {21}{42}- AdditionalInfoLinkLabel: {22}{42}- ShippingRuleTypeID: {23}{42}- SEOTitle: {24}{42}- SEOKeywords: {25}{42}- SEODescription: {26}{42}- Custom1: {27}{42}- Custom2: {28}{42}- Custom3: {29}{42}- ShipEachItemSeparately: {30}{42}- SKU: {31}{42}- QuantityOnHand: {32}{42}- AllowBackOrder: {33}{42}- BackOrderMsg: {34}{42}- DropShipInd: {35}{42}- DropShipEmailID: {36}{42}- Specifications: {37}{42}- AdditionalInformation: {38}{42}- InStockMsg: {39}{42}- OutOfStockMsg: {40}{42}- TrackInventoryInd: {41}{42}", 
				this.ProductID,
				this.PortalID,
				this.Name,
				(this.ShortDescription == null) ? string.Empty : this.ShortDescription.ToString(),
				this.Description,
				(this.FeaturesDesc == null) ? string.Empty : this.FeaturesDesc.ToString(),
				this.ProductNum,
				this.ProductTypeID,
				(this.RetailPrice == null) ? string.Empty : this.RetailPrice.ToString(),
				(this.WholesalePrice == null) ? string.Empty : this.WholesalePrice.ToString(),
				(this.SalePrice == null) ? string.Empty : this.SalePrice.ToString(),
				(this.ImageFile == null) ? string.Empty : this.ImageFile.ToString(),
				(this.Weight == null) ? string.Empty : this.Weight.ToString(),
				this.ActiveInd,
				this.DisplayOrder,
				this.CallForPricing,
				this.HomepageSpecial,
				this.CategorySpecial,
				this.InventoryDisplay,
				(this.Keywords == null) ? string.Empty : this.Keywords.ToString(),
				(this.ManufacturerID == null) ? string.Empty : this.ManufacturerID.ToString(),
				(this.AdditionalInfoLink == null) ? string.Empty : this.AdditionalInfoLink.ToString(),
				(this.AdditionalInfoLinkLabel == null) ? string.Empty : this.AdditionalInfoLinkLabel.ToString(),
				(this.ShippingRuleTypeID == null) ? string.Empty : this.ShippingRuleTypeID.ToString(),
				(this.SEOTitle == null) ? string.Empty : this.SEOTitle.ToString(),
				(this.SEOKeywords == null) ? string.Empty : this.SEOKeywords.ToString(),
				(this.SEODescription == null) ? string.Empty : this.SEODescription.ToString(),
				(this.Custom1 == null) ? string.Empty : this.Custom1.ToString(),
				(this.Custom2 == null) ? string.Empty : this.Custom2.ToString(),
				(this.Custom3 == null) ? string.Empty : this.Custom3.ToString(),
				(this.ShipEachItemSeparately == null) ? string.Empty : this.ShipEachItemSeparately.ToString(),
				(this.SKU == null) ? string.Empty : this.SKU.ToString(),
				(this.QuantityOnHand == null) ? string.Empty : this.QuantityOnHand.ToString(),
				(this.AllowBackOrder == null) ? string.Empty : this.AllowBackOrder.ToString(),
				(this.BackOrderMsg == null) ? string.Empty : this.BackOrderMsg.ToString(),
				(this.DropShipInd == null) ? string.Empty : this.DropShipInd.ToString(),
				(this.DropShipEmailID == null) ? string.Empty : this.DropShipEmailID.ToString(),
				(this.Specifications == null) ? string.Empty : this.Specifications.ToString(),
				(this.AdditionalInformation == null) ? string.Empty : this.AdditionalInformation.ToString(),
				(this.InStockMsg == null) ? string.Empty : this.InStockMsg.ToString(),
				(this.OutOfStockMsg == null) ? string.Empty : this.OutOfStockMsg.ToString(),
				(this.TrackInventoryInd == null) ? string.Empty : this.TrackInventoryInd.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeProduct' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class ProductEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// ProductID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeProduct"</remarks>
			public System.Int32 ProductID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PortalID : 
		/// </summary>
		public System.Int32		  PortalID = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// ShortDescription : 
		/// </summary>
		public System.String		  ShortDescription = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// FeaturesDesc : 
		/// </summary>
		public System.String		  FeaturesDesc = string.Empty;
		
		/// <summary>
		/// ProductNum : 
		/// </summary>
		public System.String		  ProductNum = string.Empty;
		
		/// <summary>
		/// ProductTypeID : 
		/// </summary>
		public System.Int32		  ProductTypeID = (int)0;
		
		/// <summary>
		/// RetailPrice : 
		/// </summary>
		public System.Decimal?		  RetailPrice = 0;
		
		/// <summary>
		/// WholesalePrice : 
		/// </summary>
		public System.Decimal?		  WholesalePrice = 0;
		
		/// <summary>
		/// SalePrice : 
		/// </summary>
		public System.Decimal?		  SalePrice = 0;
		
		/// <summary>
		/// ImageFile : 
		/// </summary>
		public System.String		  ImageFile = string.Empty;
		
		/// <summary>
		/// Weight : 
		/// </summary>
		public System.Decimal?		  Weight = 0.0m;
		
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		public System.Boolean		  ActiveInd = false;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32		  DisplayOrder = (int)0;
		
		/// <summary>
		/// CallForPricing : 
		/// </summary>
		public System.Boolean		  CallForPricing = false;
		
		/// <summary>
		/// HomepageSpecial : 
		/// </summary>
		public System.Boolean		  HomepageSpecial = false;
		
		/// <summary>
		/// CategorySpecial : 
		/// </summary>
		public System.Boolean		  CategorySpecial = false;
		
		/// <summary>
		/// InventoryDisplay : 
		/// </summary>
		public System.Byte		  InventoryDisplay = (byte)0;
		
		/// <summary>
		/// Keywords : 
		/// </summary>
		public System.String		  Keywords = string.Empty;
		
		/// <summary>
		/// ManufacturerID : 
		/// </summary>
		public System.Int32?		  ManufacturerID = (int)0;
		
		/// <summary>
		/// AdditionalInfoLink : 
		/// </summary>
		public System.String		  AdditionalInfoLink = string.Empty;
		
		/// <summary>
		/// AdditionalInfoLinkLabel : 
		/// </summary>
		public System.String		  AdditionalInfoLinkLabel = string.Empty;
		
		/// <summary>
		/// ShippingRuleTypeID : 
		/// </summary>
		public System.Int32?		  ShippingRuleTypeID = (int)0;
		
		/// <summary>
		/// SEOTitle : 
		/// </summary>
		public System.String		  SEOTitle = string.Empty;
		
		/// <summary>
		/// SEOKeywords : 
		/// </summary>
		public System.String		  SEOKeywords = string.Empty;
		
		/// <summary>
		/// SEODescription : 
		/// </summary>
		public System.String		  SEODescription = string.Empty;
		
		/// <summary>
		/// Custom1 : 
		/// </summary>
		public System.String		  Custom1 = string.Empty;
		
		/// <summary>
		/// Custom2 : 
		/// </summary>
		public System.String		  Custom2 = string.Empty;
		
		/// <summary>
		/// Custom3 : 
		/// </summary>
		public System.String		  Custom3 = string.Empty;
		
		/// <summary>
		/// ShipEachItemSeparately : 
		/// </summary>
		public System.Boolean?		  ShipEachItemSeparately = false;
		
		/// <summary>
		/// SKU : 
		/// </summary>
		public System.String		  SKU = string.Empty;
		
		/// <summary>
		/// QuantityOnHand : 
		/// </summary>
		public System.Int32?		  QuantityOnHand = (int)0;
		
		/// <summary>
		/// AllowBackOrder : 
		/// </summary>
		public System.Boolean?		  AllowBackOrder = false;
		
		/// <summary>
		/// BackOrderMsg : 
		/// </summary>
		public System.String		  BackOrderMsg = string.Empty;
		
		/// <summary>
		/// DropShipInd : 
		/// </summary>
		public System.Boolean?		  DropShipInd = false;
		
		/// <summary>
		/// DropShipEmailID : 
		/// </summary>
		public System.String		  DropShipEmailID = string.Empty;
		
		/// <summary>
		/// Specifications : 
		/// </summary>
		public System.String		  Specifications = string.Empty;
		
		/// <summary>
		/// AdditionalInformation : 
		/// </summary>
		public System.String		  AdditionalInformation = string.Empty;
		
		/// <summary>
		/// InStockMsg : 
		/// </summary>
		public System.String		  InStockMsg = string.Empty;
		
		/// <summary>
		/// OutOfStockMsg : 
		/// </summary>
		public System.String		  OutOfStockMsg = string.Empty;
		
		/// <summary>
		/// TrackInventoryInd : 
		/// </summary>
		public System.Boolean?		  TrackInventoryInd = false;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			ProductEntityData _tmp = new ProductEntityData();
						
			_tmp.ProductID = this.ProductID;
			
			_tmp.PortalID = this.PortalID;
			_tmp.Name = this.Name;
			_tmp.ShortDescription = this.ShortDescription;
			_tmp.Description = this.Description;
			_tmp.FeaturesDesc = this.FeaturesDesc;
			_tmp.ProductNum = this.ProductNum;
			_tmp.ProductTypeID = this.ProductTypeID;
			_tmp.RetailPrice = this.RetailPrice;
			_tmp.WholesalePrice = this.WholesalePrice;
			_tmp.SalePrice = this.SalePrice;
			_tmp.ImageFile = this.ImageFile;
			_tmp.Weight = this.Weight;
			_tmp.ActiveInd = this.ActiveInd;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.CallForPricing = this.CallForPricing;
			_tmp.HomepageSpecial = this.HomepageSpecial;
			_tmp.CategorySpecial = this.CategorySpecial;
			_tmp.InventoryDisplay = this.InventoryDisplay;
			_tmp.Keywords = this.Keywords;
			_tmp.ManufacturerID = this.ManufacturerID;
			_tmp.AdditionalInfoLink = this.AdditionalInfoLink;
			_tmp.AdditionalInfoLinkLabel = this.AdditionalInfoLinkLabel;
			_tmp.ShippingRuleTypeID = this.ShippingRuleTypeID;
			_tmp.SEOTitle = this.SEOTitle;
			_tmp.SEOKeywords = this.SEOKeywords;
			_tmp.SEODescription = this.SEODescription;
			_tmp.Custom1 = this.Custom1;
			_tmp.Custom2 = this.Custom2;
			_tmp.Custom3 = this.Custom3;
			_tmp.ShipEachItemSeparately = this.ShipEachItemSeparately;
			_tmp.SKU = this.SKU;
			_tmp.QuantityOnHand = this.QuantityOnHand;
			_tmp.AllowBackOrder = this.AllowBackOrder;
			_tmp.BackOrderMsg = this.BackOrderMsg;
			_tmp.DropShipInd = this.DropShipInd;
			_tmp.DropShipEmailID = this.DropShipEmailID;
			_tmp.Specifications = this.Specifications;
			_tmp.AdditionalInformation = this.AdditionalInformation;
			_tmp.InStockMsg = this.InStockMsg;
			_tmp.OutOfStockMsg = this.OutOfStockMsg;
			_tmp.TrackInventoryInd = this.TrackInventoryInd;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region ProductImageCollection
		
		private TList<ProductImage> productImageProductID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productImageProductID
		/// </summary>	
		public TList<ProductImage> ProductImageCollection
		{
			get
			{
				if (productImageProductID == null)
				{
				productImageProductID = new TList<ProductImage>();
				}
	
				return productImageProductID;
			}
			set { productImageProductID = value; }
		}
		
		#endregion

		#region ProductCategoryCollection
		
		private TList<ProductCategory> productCategoryProductID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productCategoryProductID
		/// </summary>	
		public TList<ProductCategory> ProductCategoryCollection
		{
			get
			{
				if (productCategoryProductID == null)
				{
				productCategoryProductID = new TList<ProductCategory>();
				}
	
				return productCategoryProductID;
			}
			set { productCategoryProductID = value; }
		}
		
		#endregion

		#region ProductCrossSellCollection
		
		private TList<ProductCrossSell> productCrossSellProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productCrossSellProductId
		/// </summary>	
		public TList<ProductCrossSell> ProductCrossSellCollection
		{
			get
			{
				if (productCrossSellProductId == null)
				{
				productCrossSellProductId = new TList<ProductCrossSell>();
				}
	
				return productCrossSellProductId;
			}
			set { productCrossSellProductId = value; }
		}
		
		#endregion

		#region SKUCollection
		
		private TList<SKU> skuProductID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation skuProductID
		/// </summary>	
		public TList<SKU> SKUCollection
		{
			get
			{
				if (skuProductID == null)
				{
				skuProductID = new TList<SKU>();
				}
	
				return skuProductID;
			}
			set { skuProductID = value; }
		}
		
		#endregion

		#region ProductHighlightCollection
		
		private TList<ProductHighlight> productHighlightProductID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productHighlightProductID
		/// </summary>	
		public TList<ProductHighlight> ProductHighlightCollection
		{
			get
			{
				if (productHighlightProductID == null)
				{
				productHighlightProductID = new TList<ProductHighlight>();
				}
	
				return productHighlightProductID;
			}
			set { productHighlightProductID = value; }
		}
		
		#endregion

		#region ProductAddOnCollection
		
		private TList<ProductAddOn> productAddOnProductID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation productAddOnProductID
		/// </summary>	
		public TList<ProductAddOn> ProductAddOnCollection
		{
			get
			{
				if (productAddOnProductID == null)
				{
				productAddOnProductID = new TList<ProductAddOn>();
				}
	
				return productAddOnProductID;
			}
			set { productAddOnProductID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Description");
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"ProductNum");
		}
   		#endregion
	
	} // End Class
	
	#region ProductComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProductComparer : System.Collections.Generic.IComparer<Product>
	{
		ProductColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProductComparer"/> class.
        /// </summary>
		public ProductComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProductComparer(ProductColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Product"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Product"/> to compare.</param>
        /// <param name="b">The second <c>Product</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Product a, Product b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Product entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Product a, Product b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProductColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProductKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Product"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProductKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProductKey class.
		/// </summary>
		public ProductKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductKey class.
		/// </summary>
		public ProductKey(ProductBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.productID = entity.ProductID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductKey class.
		/// </summary>
		public ProductKey(System.Int32 productID)
		{
			#region Init Properties

			this.productID = productID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProductBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProductBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProductID property
		private System.Int32 productID;
		
		/// <summary>
		/// Gets or sets the ProductID property.
		/// </summary>
		public System.Int32 ProductID
		{
			get { return productID; }
			set
			{
				if ( Entity != null )
				{
					Entity.ProductID = value;
				}
				
				productID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProductID = ( values["ProductID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProductID", ProductID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProductID: {0}{1}",
								ProductID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProductColumn Enum
	
	/// <summary>
	/// Enumerate the Product columns.
	/// </summary>
	[Serializable]
	public enum ProductColumn : int
	{
		/// <summary>
		/// ProductID : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProductID = 1,
		/// <summary>
		/// PortalID : 
		/// </summary>
		[EnumTextValue("PortalID")]
		[ColumnEnum("PortalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PortalID = 2,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Name = 3,
		/// <summary>
		/// ShortDescription : 
		/// </summary>
		[EnumTextValue("ShortDescription")]
		[ColumnEnum("ShortDescription", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ShortDescription = 4,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Description = 5,
		/// <summary>
		/// FeaturesDesc : 
		/// </summary>
		[EnumTextValue("FeaturesDesc")]
		[ColumnEnum("FeaturesDesc", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FeaturesDesc = 6,
		/// <summary>
		/// ProductNum : 
		/// </summary>
		[EnumTextValue("ProductNum")]
		[ColumnEnum("ProductNum", typeof(System.String), System.Data.DbType.String, false, false, false)]
		ProductNum = 7,
		/// <summary>
		/// ProductTypeID : 
		/// </summary>
		[EnumTextValue("ProductTypeID")]
		[ColumnEnum("ProductTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductTypeID = 8,
		/// <summary>
		/// RetailPrice : 
		/// </summary>
		[EnumTextValue("RetailPrice")]
		[ColumnEnum("RetailPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		RetailPrice = 9,
		/// <summary>
		/// WholesalePrice : 
		/// </summary>
		[EnumTextValue("WholesalePrice")]
		[ColumnEnum("WholesalePrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		WholesalePrice = 10,
		/// <summary>
		/// SalePrice : 
		/// </summary>
		[EnumTextValue("SalePrice")]
		[ColumnEnum("SalePrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		SalePrice = 11,
		/// <summary>
		/// ImageFile : 
		/// </summary>
		[EnumTextValue("ImageFile")]
		[ColumnEnum("ImageFile", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ImageFile = 12,
		/// <summary>
		/// Weight : 
		/// </summary>
		[EnumTextValue("Weight")]
		[ColumnEnum("Weight", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Weight = 13,
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		[EnumTextValue("ActiveInd")]
		[ColumnEnum("ActiveInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ActiveInd = 14,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DisplayOrder = 15,
		/// <summary>
		/// CallForPricing : 
		/// </summary>
		[EnumTextValue("CallForPricing")]
		[ColumnEnum("CallForPricing", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		CallForPricing = 16,
		/// <summary>
		/// HomepageSpecial : 
		/// </summary>
		[EnumTextValue("HomepageSpecial")]
		[ColumnEnum("HomepageSpecial", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		HomepageSpecial = 17,
		/// <summary>
		/// CategorySpecial : 
		/// </summary>
		[EnumTextValue("CategorySpecial")]
		[ColumnEnum("CategorySpecial", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		CategorySpecial = 18,
		/// <summary>
		/// InventoryDisplay : 
		/// </summary>
		[EnumTextValue("InventoryDisplay")]
		[ColumnEnum("InventoryDisplay", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		InventoryDisplay = 19,
		/// <summary>
		/// Keywords : 
		/// </summary>
		[EnumTextValue("Keywords")]
		[ColumnEnum("Keywords", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Keywords = 20,
		/// <summary>
		/// ManufacturerID : 
		/// </summary>
		[EnumTextValue("ManufacturerID")]
		[ColumnEnum("ManufacturerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ManufacturerID = 21,
		/// <summary>
		/// AdditionalInfoLink : 
		/// </summary>
		[EnumTextValue("AdditionalInfoLink")]
		[ColumnEnum("AdditionalInfoLink", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AdditionalInfoLink = 22,
		/// <summary>
		/// AdditionalInfoLinkLabel : 
		/// </summary>
		[EnumTextValue("AdditionalInfoLinkLabel")]
		[ColumnEnum("AdditionalInfoLinkLabel", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AdditionalInfoLinkLabel = 23,
		/// <summary>
		/// ShippingRuleTypeID : 
		/// </summary>
		[EnumTextValue("ShippingRuleTypeID")]
		[ColumnEnum("ShippingRuleTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ShippingRuleTypeID = 24,
		/// <summary>
		/// SEOTitle : 
		/// </summary>
		[EnumTextValue("SEOTitle")]
		[ColumnEnum("SEOTitle", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SEOTitle = 25,
		/// <summary>
		/// SEOKeywords : 
		/// </summary>
		[EnumTextValue("SEOKeywords")]
		[ColumnEnum("SEOKeywords", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SEOKeywords = 26,
		/// <summary>
		/// SEODescription : 
		/// </summary>
		[EnumTextValue("SEODescription")]
		[ColumnEnum("SEODescription", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SEODescription = 27,
		/// <summary>
		/// Custom1 : 
		/// </summary>
		[EnumTextValue("Custom1")]
		[ColumnEnum("Custom1", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom1 = 28,
		/// <summary>
		/// Custom2 : 
		/// </summary>
		[EnumTextValue("Custom2")]
		[ColumnEnum("Custom2", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom2 = 29,
		/// <summary>
		/// Custom3 : 
		/// </summary>
		[EnumTextValue("Custom3")]
		[ColumnEnum("Custom3", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Custom3 = 30,
		/// <summary>
		/// ShipEachItemSeparately : 
		/// </summary>
		[EnumTextValue("ShipEachItemSeparately")]
		[ColumnEnum("ShipEachItemSeparately", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ShipEachItemSeparately = 31,
		/// <summary>
		/// SKU : 
		/// </summary>
		[EnumTextValue("SKU")]
		[ColumnEnum("SKU", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SKU = 32,
		/// <summary>
		/// QuantityOnHand : 
		/// </summary>
		[EnumTextValue("QuantityOnHand")]
		[ColumnEnum("QuantityOnHand", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		QuantityOnHand = 33,
		/// <summary>
		/// AllowBackOrder : 
		/// </summary>
		[EnumTextValue("AllowBackOrder")]
		[ColumnEnum("AllowBackOrder", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AllowBackOrder = 34,
		/// <summary>
		/// BackOrderMsg : 
		/// </summary>
		[EnumTextValue("BackOrderMsg")]
		[ColumnEnum("BackOrderMsg", typeof(System.String), System.Data.DbType.String, false, false, true)]
		BackOrderMsg = 35,
		/// <summary>
		/// DropShipInd : 
		/// </summary>
		[EnumTextValue("DropShipInd")]
		[ColumnEnum("DropShipInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DropShipInd = 36,
		/// <summary>
		/// DropShipEmailID : 
		/// </summary>
		[EnumTextValue("DropShipEmailID")]
		[ColumnEnum("DropShipEmailID", typeof(System.String), System.Data.DbType.String, false, false, true)]
		DropShipEmailID = 37,
		/// <summary>
		/// Specifications : 
		/// </summary>
		[EnumTextValue("Specifications")]
		[ColumnEnum("Specifications", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Specifications = 38,
		/// <summary>
		/// AdditionalInformation : 
		/// </summary>
		[EnumTextValue("AdditionalInformation")]
		[ColumnEnum("AdditionalInformation", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AdditionalInformation = 39,
		/// <summary>
		/// InStockMsg : 
		/// </summary>
		[EnumTextValue("InStockMsg")]
		[ColumnEnum("InStockMsg", typeof(System.String), System.Data.DbType.String, false, false, true)]
		InStockMsg = 40,
		/// <summary>
		/// OutOfStockMsg : 
		/// </summary>
		[EnumTextValue("OutOfStockMsg")]
		[ColumnEnum("OutOfStockMsg", typeof(System.String), System.Data.DbType.String, false, false, true)]
		OutOfStockMsg = 41,
		/// <summary>
		/// TrackInventoryInd : 
		/// </summary>
		[EnumTextValue("TrackInventoryInd")]
		[ColumnEnum("TrackInventoryInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrackInventoryInd = 42
	}//End enum

	#endregion ProductColumn Enum

} // end namespace
