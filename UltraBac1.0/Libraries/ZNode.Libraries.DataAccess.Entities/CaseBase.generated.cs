	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file Case.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region CaseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Case"/> object.
	/// </remarks>
	public class CaseEventArgs : System.EventArgs
	{
		private CaseColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the CaseEventArgs class.
		///</summary>
		public CaseEventArgs(CaseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CaseEventArgs class.
		///</summary>
		public CaseEventArgs(CaseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The CaseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CaseColumn" />
		public CaseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Case related events.
	///</summary>
	public delegate void CaseEventHandler(object sender, CaseEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeCase' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Case))]
	public abstract partial class CaseBase : EntityBase, IEntityId<CaseKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private CaseEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//CaseEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private CaseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Case> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CaseEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CaseEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CaseBase"/> instance.
		///</summary>
		public CaseBase()
		{
			this.entityData = new CaseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CaseBase"/> instance.
		///</summary>
		///<param name="casePortalID"></param>
		///<param name="caseAccountID"></param>
		///<param name="caseOwnerAccountID"></param>
		///<param name="caseCaseStatusID"></param>
		///<param name="caseCasePriorityID"></param>
		///<param name="caseCaseTypeID"></param>
		///<param name="caseCaseOrigin"></param>
		///<param name="caseTitle"></param>
		///<param name="caseDescription"></param>
		///<param name="caseFirstName"></param>
		///<param name="caseLastName"></param>
		///<param name="caseCompanyName"></param>
		///<param name="caseEmailID"></param>
		///<param name="casePhoneNumber"></param>
		///<param name="caseCreateDte"></param>
		///<param name="caseCreateUser"></param>
		public CaseBase(System.Int32 casePortalID, System.Int32? caseAccountID, System.Int32? caseOwnerAccountID, 
			System.Int32 caseCaseStatusID, System.Int32 caseCasePriorityID, System.Int32 caseCaseTypeID, System.String caseCaseOrigin, 
			System.String caseTitle, System.String caseDescription, System.String caseFirstName, System.String caseLastName, 
			System.String caseCompanyName, System.String caseEmailID, System.String casePhoneNumber, System.DateTime caseCreateDte, 
			System.String caseCreateUser)
		{
			this.entityData = new CaseEntityData();
			this.backupData = null;

			this.PortalID = casePortalID;
			this.AccountID = caseAccountID;
			this.OwnerAccountID = caseOwnerAccountID;
			this.CaseStatusID = caseCaseStatusID;
			this.CasePriorityID = caseCasePriorityID;
			this.CaseTypeID = caseCaseTypeID;
			this.CaseOrigin = caseCaseOrigin;
			this.Title = caseTitle;
			this.Description = caseDescription;
			this.FirstName = caseFirstName;
			this.LastName = caseLastName;
			this.CompanyName = caseCompanyName;
			this.EmailID = caseEmailID;
			this.PhoneNumber = casePhoneNumber;
			this.CreateDte = caseCreateDte;
			this.CreateUser = caseCreateUser;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Case"/> instance.
		///</summary>
		///<param name="casePortalID"></param>
		///<param name="caseAccountID"></param>
		///<param name="caseOwnerAccountID"></param>
		///<param name="caseCaseStatusID"></param>
		///<param name="caseCasePriorityID"></param>
		///<param name="caseCaseTypeID"></param>
		///<param name="caseCaseOrigin"></param>
		///<param name="caseTitle"></param>
		///<param name="caseDescription"></param>
		///<param name="caseFirstName"></param>
		///<param name="caseLastName"></param>
		///<param name="caseCompanyName"></param>
		///<param name="caseEmailID"></param>
		///<param name="casePhoneNumber"></param>
		///<param name="caseCreateDte"></param>
		///<param name="caseCreateUser"></param>
		public static Case CreateCase(System.Int32 casePortalID, System.Int32? caseAccountID, System.Int32? caseOwnerAccountID, 
			System.Int32 caseCaseStatusID, System.Int32 caseCasePriorityID, System.Int32 caseCaseTypeID, System.String caseCaseOrigin, 
			System.String caseTitle, System.String caseDescription, System.String caseFirstName, System.String caseLastName, 
			System.String caseCompanyName, System.String caseEmailID, System.String casePhoneNumber, System.DateTime caseCreateDte, 
			System.String caseCreateUser)
		{
			Case newCase = new Case();
			newCase.PortalID = casePortalID;
			newCase.AccountID = caseAccountID;
			newCase.OwnerAccountID = caseOwnerAccountID;
			newCase.CaseStatusID = caseCaseStatusID;
			newCase.CasePriorityID = caseCasePriorityID;
			newCase.CaseTypeID = caseCaseTypeID;
			newCase.CaseOrigin = caseCaseOrigin;
			newCase.Title = caseTitle;
			newCase.Description = caseDescription;
			newCase.FirstName = caseFirstName;
			newCase.LastName = caseLastName;
			newCase.CompanyName = caseCompanyName;
			newCase.EmailID = caseEmailID;
			newCase.PhoneNumber = casePhoneNumber;
			newCase.CreateDte = caseCreateDte;
			newCase.CreateUser = caseCreateUser;
			return newCase;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CaseColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CaseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CaseColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CaseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CaseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CaseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CaseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CaseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CaseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CaseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the CaseID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CaseID
		{
			get
			{
				return this.entityData.CaseID; 
			}
			
			set
			{
				if (this.entityData.CaseID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CaseID, this.entityData.CaseID);
				this.entityData.CaseID = value;
				this.EntityId.CaseID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CaseID, this.entityData.CaseID);
				OnPropertyChanged("CaseID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PortalID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PortalID
		{
			get
			{
				return this.entityData.PortalID; 
			}
			
			set
			{
				if (this.entityData.PortalID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.PortalID, this.entityData.PortalID);
				this.entityData.PortalID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.PortalID, this.entityData.PortalID);
				OnPropertyChanged("PortalID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAccountIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AccountID
		{
			get
			{
				return this.entityData.AccountID; 
			}
			
			set
			{
				if (this.entityData.AccountID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.AccountID, this.entityData.AccountID);
				this.entityData.AccountID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.AccountID, this.entityData.AccountID);
				OnPropertyChanged("AccountID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OwnerAccountID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOwnerAccountIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OwnerAccountID
		{
			get
			{
				return this.entityData.OwnerAccountID; 
			}
			
			set
			{
				if (this.entityData.OwnerAccountID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.OwnerAccountID, this.entityData.OwnerAccountID);
				this.entityData.OwnerAccountID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.OwnerAccountID, this.entityData.OwnerAccountID);
				OnPropertyChanged("OwnerAccountID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CaseStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CaseStatusID
		{
			get
			{
				return this.entityData.CaseStatusID; 
			}
			
			set
			{
				if (this.entityData.CaseStatusID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CaseStatusID, this.entityData.CaseStatusID);
				this.entityData.CaseStatusID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CaseStatusID, this.entityData.CaseStatusID);
				OnPropertyChanged("CaseStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CasePriorityID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CasePriorityID
		{
			get
			{
				return this.entityData.CasePriorityID; 
			}
			
			set
			{
				if (this.entityData.CasePriorityID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CasePriorityID, this.entityData.CasePriorityID);
				this.entityData.CasePriorityID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CasePriorityID, this.entityData.CasePriorityID);
				OnPropertyChanged("CasePriorityID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CaseTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CaseTypeID
		{
			get
			{
				return this.entityData.CaseTypeID; 
			}
			
			set
			{
				if (this.entityData.CaseTypeID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CaseTypeID, this.entityData.CaseTypeID);
				this.entityData.CaseTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CaseTypeID, this.entityData.CaseTypeID);
				OnPropertyChanged("CaseTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CaseOrigin property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CaseOrigin
		{
			get
			{
				return this.entityData.CaseOrigin; 
			}
			
			set
			{
				if (this.entityData.CaseOrigin == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CaseOrigin, this.entityData.CaseOrigin);
				this.entityData.CaseOrigin = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CaseOrigin, this.entityData.CaseOrigin);
				OnPropertyChanged("CaseOrigin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
					
					
				OnColumnChanging(CaseColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(CaseColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
					
				OnColumnChanging(CaseColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
					
					
				OnColumnChanging(CaseColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String EmailID
		{
			get
			{
				return this.entityData.EmailID; 
			}
			
			set
			{
				if (this.entityData.EmailID == value)
					return;
					
					
				OnColumnChanging(CaseColumn.EmailID, this.entityData.EmailID);
				this.entityData.EmailID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.EmailID, this.entityData.EmailID);
				OnPropertyChanged("EmailID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PhoneNumber
		{
			get
			{
				return this.entityData.PhoneNumber; 
			}
			
			set
			{
				if (this.entityData.PhoneNumber == value)
					return;
					
					
				OnColumnChanging(CaseColumn.PhoneNumber, this.entityData.PhoneNumber);
				this.entityData.PhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.PhoneNumber, this.entityData.PhoneNumber);
				OnPropertyChanged("PhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDte property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDte
		{
			get
			{
				return this.entityData.CreateDte; 
			}
			
			set
			{
				if (this.entityData.CreateDte == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CreateDte, this.entityData.CreateDte);
				this.entityData.CreateDte = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CreateDte, this.entityData.CreateDte);
				OnPropertyChanged("CreateDte");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String CreateUser
		{
			get
			{
				return this.entityData.CreateUser; 
			}
			
			set
			{
				if (this.entityData.CreateUser == value)
					return;
					
					
				OnColumnChanging(CaseColumn.CreateUser, this.entityData.CreateUser);
				this.entityData.CreateUser = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(CaseColumn.CreateUser, this.entityData.CreateUser);
				OnPropertyChanged("CreateUser");
			}
		}
		

		#region Source Foreign Key Property
				
		private Portal _portalIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Portal"/>.
		/// </summary>
		/// <value>The source Portal for PortalID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Portal PortalIDSource
      	{
            get { return this._portalIDSource; }
            set { this._portalIDSource = value; }
      	}
		private Account _accountIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Account"/>.
		/// </summary>
		/// <value>The source Account for AccountID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Account AccountIDSource
      	{
            get { return this._accountIDSource; }
            set { this._accountIDSource = value; }
      	}
		private Account _ownerAccountIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Account"/>.
		/// </summary>
		/// <value>The source Account for OwnerAccountID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Account OwnerAccountIDSource
      	{
            get { return this._ownerAccountIDSource; }
            set { this._ownerAccountIDSource = value; }
      	}
		private CaseType _caseTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CaseType"/>.
		/// </summary>
		/// <value>The source CaseType for CaseTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual CaseType CaseTypeIDSource
      	{
            get { return this._caseTypeIDSource; }
            set { this._caseTypeIDSource = value; }
      	}
		private CaseStatus _caseStatusIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CaseStatus"/>.
		/// </summary>
		/// <value>The source CaseStatus for CaseStatusID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual CaseStatus CaseStatusIDSource
      	{
            get { return this._caseStatusIDSource; }
            set { this._caseStatusIDSource = value; }
      	}
		private CasePriority _casePriorityIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CasePriority"/>.
		/// </summary>
		/// <value>The source CasePriority for CasePriorityID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual CasePriority CasePriorityIDSource
      	{
            get { return this._casePriorityIDSource; }
            set { this._casePriorityIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeCase"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CaseID", "PortalID", "AccountID", "OwnerAccountID", "CaseStatusID", "CasePriorityID", "CaseTypeID", "CaseOrigin", "Title", "Description", "FirstName", "LastName", "CompanyName", "EmailID", "PhoneNumber", "CreateDte", "CreateUser"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of Note objects
		///	which are related to this object through the relation FK_SC_Note_SC_Case
		/// </summary>	
		[BindableAttribute()]
		public TList<Note> NoteCollection
		{
			get { return entityData.NoteCollection; }
			set { entityData.NoteCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CaseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Case) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Case>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Case);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Case Entity 
		///</summary>
		public virtual Case Copy()
		{
			//shallow copy entity
			Case copy = new Case();
			copy.CaseID = this.CaseID;
			copy.PortalID = this.PortalID;
			copy.AccountID = this.AccountID;
			copy.OwnerAccountID = this.OwnerAccountID;
			copy.CaseStatusID = this.CaseStatusID;
			copy.CasePriorityID = this.CasePriorityID;
			copy.CaseTypeID = this.CaseTypeID;
			copy.CaseOrigin = this.CaseOrigin;
			copy.Title = this.Title;
			copy.Description = this.Description;
			copy.FirstName = this.FirstName;
			copy.LastName = this.LastName;
			copy.CompanyName = this.CompanyName;
			copy.EmailID = this.EmailID;
			copy.PhoneNumber = this.PhoneNumber;
			copy.CreateDte = this.CreateDte;
			copy.CreateUser = this.CreateUser;
					
			copy.AcceptChanges();
			return (Case)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Case Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Case DeepCopy()
		{
			return EntityHelper.Clone<Case>(this as Case);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CaseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CaseBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CaseBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CaseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CaseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CaseBase Object1, CaseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CaseID != Object2.CaseID)
				equal = false;
			if (Object1.PortalID != Object2.PortalID)
				equal = false;
			if ( Object1.AccountID != null && Object2.AccountID != null )
			{
				if (Object1.AccountID != Object2.AccountID)
					equal = false;
			}
			else if (Object1.AccountID == null ^ Object2.AccountID == null )
			{
				equal = false;
			}
			if ( Object1.OwnerAccountID != null && Object2.OwnerAccountID != null )
			{
				if (Object1.OwnerAccountID != Object2.OwnerAccountID)
					equal = false;
			}
			else if (Object1.OwnerAccountID == null ^ Object2.OwnerAccountID == null )
			{
				equal = false;
			}
			if (Object1.CaseStatusID != Object2.CaseStatusID)
				equal = false;
			if (Object1.CasePriorityID != Object2.CasePriorityID)
				equal = false;
			if (Object1.CaseTypeID != Object2.CaseTypeID)
				equal = false;
			if ( Object1.CaseOrigin != null && Object2.CaseOrigin != null )
			{
				if (Object1.CaseOrigin != Object2.CaseOrigin)
					equal = false;
			}
			else if (Object1.CaseOrigin == null ^ Object2.CaseOrigin == null )
			{
				equal = false;
			}
			if (Object1.Title != Object2.Title)
				equal = false;
			if (Object1.Description != Object2.Description)
				equal = false;
			if ( Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object2.FirstName == null )
			{
				equal = false;
			}
			if ( Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object2.LastName == null )
			{
				equal = false;
			}
			if ( Object1.CompanyName != null && Object2.CompanyName != null )
			{
				if (Object1.CompanyName != Object2.CompanyName)
					equal = false;
			}
			else if (Object1.CompanyName == null ^ Object2.CompanyName == null )
			{
				equal = false;
			}
			if ( Object1.EmailID != null && Object2.EmailID != null )
			{
				if (Object1.EmailID != Object2.EmailID)
					equal = false;
			}
			else if (Object1.EmailID == null ^ Object2.EmailID == null )
			{
				equal = false;
			}
			if ( Object1.PhoneNumber != null && Object2.PhoneNumber != null )
			{
				if (Object1.PhoneNumber != Object2.PhoneNumber)
					equal = false;
			}
			else if (Object1.PhoneNumber == null ^ Object2.PhoneNumber == null )
			{
				equal = false;
			}
			if (Object1.CreateDte != Object2.CreateDte)
				equal = false;
			if (Object1.CreateUser != Object2.CreateUser)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((CaseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static CaseComparer GetComparer()
        {
            return new CaseComparer();
        }
        */

        // Comparer delegates back to Case
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Case rhs, CaseColumn which)
        {
            switch (which)
            {
            	
            	
            	case CaseColumn.CaseID:
            		return this.CaseID.CompareTo(rhs.CaseID);
            		
            		                 
            	
            	
            	case CaseColumn.PortalID:
            		return this.PortalID.CompareTo(rhs.PortalID);
            		
            		                 
            	
            	
            	case CaseColumn.AccountID:
            		return this.AccountID.Value.CompareTo(rhs.AccountID.Value);
            		
            		                 
            	
            	
            	case CaseColumn.OwnerAccountID:
            		return this.OwnerAccountID.Value.CompareTo(rhs.OwnerAccountID.Value);
            		
            		                 
            	
            	
            	case CaseColumn.CaseStatusID:
            		return this.CaseStatusID.CompareTo(rhs.CaseStatusID);
            		
            		                 
            	
            	
            	case CaseColumn.CasePriorityID:
            		return this.CasePriorityID.CompareTo(rhs.CasePriorityID);
            		
            		                 
            	
            	
            	case CaseColumn.CaseTypeID:
            		return this.CaseTypeID.CompareTo(rhs.CaseTypeID);
            		
            		                 
            	
            	
            	case CaseColumn.CaseOrigin:
            		return this.CaseOrigin.CompareTo(rhs.CaseOrigin);
            		
            		                 
            	
            	
            	case CaseColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case CaseColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case CaseColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case CaseColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case CaseColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case CaseColumn.EmailID:
            		return this.EmailID.CompareTo(rhs.EmailID);
            		
            		                 
            	
            	
            	case CaseColumn.PhoneNumber:
            		return this.PhoneNumber.CompareTo(rhs.PhoneNumber);
            		
            		                 
            	
            	
            	case CaseColumn.CreateDte:
            		return this.CreateDte.CompareTo(rhs.CreateDte);
            		
            		                 
            	
            	
            	case CaseColumn.CreateUser:
            		return this.CreateUser.CompareTo(rhs.CreateUser);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CaseKey> Members
		
		// member variable for the EntityId property
		private CaseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public CaseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CaseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Case" 
					+ this.CaseID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- CaseID: {0}{17}- PortalID: {1}{17}- AccountID: {2}{17}- OwnerAccountID: {3}{17}- CaseStatusID: {4}{17}- CasePriorityID: {5}{17}- CaseTypeID: {6}{17}- CaseOrigin: {7}{17}- Title: {8}{17}- Description: {9}{17}- FirstName: {10}{17}- LastName: {11}{17}- CompanyName: {12}{17}- EmailID: {13}{17}- PhoneNumber: {14}{17}- CreateDte: {15}{17}- CreateUser: {16}{17}", 
				this.CaseID,
				this.PortalID,
				(this.AccountID == null) ? string.Empty : this.AccountID.ToString(),
				(this.OwnerAccountID == null) ? string.Empty : this.OwnerAccountID.ToString(),
				this.CaseStatusID,
				this.CasePriorityID,
				this.CaseTypeID,
				(this.CaseOrigin == null) ? string.Empty : this.CaseOrigin.ToString(),
				this.Title,
				this.Description,
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
				(this.CompanyName == null) ? string.Empty : this.CompanyName.ToString(),
				(this.EmailID == null) ? string.Empty : this.EmailID.ToString(),
				(this.PhoneNumber == null) ? string.Empty : this.PhoneNumber.ToString(),
				this.CreateDte,
				this.CreateUser,
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeCase' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class CaseEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// CaseID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeCase"</remarks>
			public System.Int32 CaseID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PortalID : 
		/// </summary>
		public System.Int32		  PortalID = (int)0;
		
		/// <summary>
		/// AccountID : 
		/// </summary>
		public System.Int32?		  AccountID = (int)0;
		
		/// <summary>
		/// OwnerAccountID : 
		/// </summary>
		public System.Int32?		  OwnerAccountID = (int)0;
		
		/// <summary>
		/// CaseStatusID : 
		/// </summary>
		public System.Int32		  CaseStatusID = (int)0;
		
		/// <summary>
		/// CasePriorityID : 
		/// </summary>
		public System.Int32		  CasePriorityID = (int)0;
		
		/// <summary>
		/// CaseTypeID : 
		/// </summary>
		public System.Int32		  CaseTypeID = (int)0;
		
		/// <summary>
		/// CaseOrigin : 
		/// </summary>
		public System.String		  CaseOrigin = string.Empty;
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String		  Title = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String		  FirstName = string.Empty;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String		  LastName = string.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = string.Empty;
		
		/// <summary>
		/// EmailID : 
		/// </summary>
		public System.String		  EmailID = string.Empty;
		
		/// <summary>
		/// PhoneNumber : 
		/// </summary>
		public System.String		  PhoneNumber = string.Empty;
		
		/// <summary>
		/// CreateDte : 
		/// </summary>
		public System.DateTime		  CreateDte = DateTime.MinValue;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		public System.String		  CreateUser = string.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			CaseEntityData _tmp = new CaseEntityData();
						
			_tmp.CaseID = this.CaseID;
			
			_tmp.PortalID = this.PortalID;
			_tmp.AccountID = this.AccountID;
			_tmp.OwnerAccountID = this.OwnerAccountID;
			_tmp.CaseStatusID = this.CaseStatusID;
			_tmp.CasePriorityID = this.CasePriorityID;
			_tmp.CaseTypeID = this.CaseTypeID;
			_tmp.CaseOrigin = this.CaseOrigin;
			_tmp.Title = this.Title;
			_tmp.Description = this.Description;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.CompanyName = this.CompanyName;
			_tmp.EmailID = this.EmailID;
			_tmp.PhoneNumber = this.PhoneNumber;
			_tmp.CreateDte = this.CreateDte;
			_tmp.CreateUser = this.CreateUser;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region NoteCollection
		
		private TList<Note> noteCaseID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation noteCaseID
		/// </summary>	
		public TList<Note> NoteCollection
		{
			get
			{
				if (noteCaseID == null)
				{
				noteCaseID = new TList<Note>();
				}
	
				return noteCaseID;
			}
			set { noteCaseID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CaseOrigin",50));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Title");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Title",255));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Description");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("FirstName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("LastName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CompanyName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("EmailID",200));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("PhoneNumber",20));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"CreateUser");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CreateUser",100));
		}
   		#endregion
	
	} // End Class
	
	#region CaseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CaseComparer : System.Collections.Generic.IComparer<Case>
	{
		CaseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CaseComparer"/> class.
        /// </summary>
		public CaseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CaseComparer(CaseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Case"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Case"/> to compare.</param>
        /// <param name="b">The second <c>Case</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Case a, Case b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Case entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Case a, Case b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CaseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CaseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Case"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CaseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CaseKey class.
		/// </summary>
		public CaseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CaseKey class.
		/// </summary>
		public CaseKey(CaseBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.caseID = entity.CaseID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CaseKey class.
		/// </summary>
		public CaseKey(System.Int32 caseID)
		{
			#region Init Properties

			this.caseID = caseID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CaseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CaseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CaseID property
		private System.Int32 caseID;
		
		/// <summary>
		/// Gets or sets the CaseID property.
		/// </summary>
		public System.Int32 CaseID
		{
			get { return caseID; }
			set
			{
				if ( Entity != null )
				{
					Entity.CaseID = value;
				}
				
				caseID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CaseID = ( values["CaseID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CaseID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CaseID", CaseID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CaseID: {0}{1}",
								CaseID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CaseColumn Enum
	
	/// <summary>
	/// Enumerate the Case columns.
	/// </summary>
	[Serializable]
	public enum CaseColumn : int
	{
		/// <summary>
		/// CaseID : 
		/// </summary>
		[EnumTextValue("CaseID")]
		[ColumnEnum("CaseID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CaseID = 1,
		/// <summary>
		/// PortalID : 
		/// </summary>
		[EnumTextValue("PortalID")]
		[ColumnEnum("PortalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PortalID = 2,
		/// <summary>
		/// AccountID : 
		/// </summary>
		[EnumTextValue("AccountID")]
		[ColumnEnum("AccountID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AccountID = 3,
		/// <summary>
		/// OwnerAccountID : 
		/// </summary>
		[EnumTextValue("OwnerAccountID")]
		[ColumnEnum("OwnerAccountID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OwnerAccountID = 4,
		/// <summary>
		/// CaseStatusID : 
		/// </summary>
		[EnumTextValue("CaseStatusID")]
		[ColumnEnum("CaseStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CaseStatusID = 5,
		/// <summary>
		/// CasePriorityID : 
		/// </summary>
		[EnumTextValue("CasePriorityID")]
		[ColumnEnum("CasePriorityID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CasePriorityID = 6,
		/// <summary>
		/// CaseTypeID : 
		/// </summary>
		[EnumTextValue("CaseTypeID")]
		[ColumnEnum("CaseTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CaseTypeID = 7,
		/// <summary>
		/// CaseOrigin : 
		/// </summary>
		[EnumTextValue("CaseOrigin")]
		[ColumnEnum("CaseOrigin", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		CaseOrigin = 8,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		Title = 9,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Description = 10,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		FirstName = 11,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		LastName = 12,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		CompanyName = 13,
		/// <summary>
		/// EmailID : 
		/// </summary>
		[EnumTextValue("EmailID")]
		[ColumnEnum("EmailID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		EmailID = 14,
		/// <summary>
		/// PhoneNumber : 
		/// </summary>
		[EnumTextValue("PhoneNumber")]
		[ColumnEnum("PhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		PhoneNumber = 15,
		/// <summary>
		/// CreateDte : 
		/// </summary>
		[EnumTextValue("CreateDte")]
		[ColumnEnum("CreateDte", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDte = 16,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		CreateUser = 17
	}//End enum

	#endregion CaseColumn Enum

} // end namespace
