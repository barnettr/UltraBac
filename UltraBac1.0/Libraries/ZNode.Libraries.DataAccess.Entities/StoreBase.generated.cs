	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file Store.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region StoreEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Store"/> object.
	/// </remarks>
	public class StoreEventArgs : System.EventArgs
	{
		private StoreColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the StoreEventArgs class.
		///</summary>
		public StoreEventArgs(StoreColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the StoreEventArgs class.
		///</summary>
		public StoreEventArgs(StoreColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The StoreColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="StoreColumn" />
		public StoreColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Store related events.
	///</summary>
	public delegate void StoreEventHandler(object sender, StoreEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeStore' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Store))]
	public abstract partial class StoreBase : EntityBase, IEntityId<StoreKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private StoreEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//StoreEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private StoreEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Store> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event StoreEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StoreEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StoreBase"/> instance.
		///</summary>
		public StoreBase()
		{
			this.entityData = new StoreEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="StoreBase"/> instance.
		///</summary>
		///<param name="storeStoreID"></param>
		///<param name="storeName"></param>
		///<param name="storeAddress1"></param>
		///<param name="storeAddress2"></param>
		///<param name="storeAddress3"></param>
		///<param name="storeCity"></param>
		///<param name="storeState"></param>
		///<param name="storeZip"></param>
		///<param name="storePhone"></param>
		///<param name="storeFax"></param>
		///<param name="storeContactName"></param>
		///<param name="storeContactAddress1"></param>
		///<param name="storeContactAddress2"></param>
		///<param name="storeContactCity"></param>
		///<param name="storeContactState"></param>
		///<param name="storeContactZip"></param>
		///<param name="storeContactPhone"></param>
		///<param name="storeIsDealer"></param>
		///<param name="storeP1"></param>
		public StoreBase(System.Int32 storeStoreID, System.String storeName, System.String storeAddress1, 
			System.String storeAddress2, System.String storeAddress3, System.String storeCity, System.String storeState, 
			System.String storeZip, System.String storePhone, System.String storeFax, System.String storeContactName, 
			System.String storeContactAddress1, System.String storeContactAddress2, System.String storeContactCity, 
			System.String storeContactState, System.String storeContactZip, System.String storeContactPhone, System.String storeIsDealer, 
			System.String storeP1)
		{
			this.entityData = new StoreEntityData();
			this.backupData = null;

			this.StoreID = storeStoreID;
			this.Name = storeName;
			this.Address1 = storeAddress1;
			this.Address2 = storeAddress2;
			this.Address3 = storeAddress3;
			this.City = storeCity;
			this.State = storeState;
			this.Zip = storeZip;
			this.Phone = storePhone;
			this.Fax = storeFax;
			this.ContactName = storeContactName;
			this.ContactAddress1 = storeContactAddress1;
			this.ContactAddress2 = storeContactAddress2;
			this.ContactCity = storeContactCity;
			this.ContactState = storeContactState;
			this.ContactZip = storeContactZip;
			this.ContactPhone = storeContactPhone;
			this.IsDealer = storeIsDealer;
			this.P1 = storeP1;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Store"/> instance.
		///</summary>
		///<param name="storeStoreID"></param>
		///<param name="storeName"></param>
		///<param name="storeAddress1"></param>
		///<param name="storeAddress2"></param>
		///<param name="storeAddress3"></param>
		///<param name="storeCity"></param>
		///<param name="storeState"></param>
		///<param name="storeZip"></param>
		///<param name="storePhone"></param>
		///<param name="storeFax"></param>
		///<param name="storeContactName"></param>
		///<param name="storeContactAddress1"></param>
		///<param name="storeContactAddress2"></param>
		///<param name="storeContactCity"></param>
		///<param name="storeContactState"></param>
		///<param name="storeContactZip"></param>
		///<param name="storeContactPhone"></param>
		///<param name="storeIsDealer"></param>
		///<param name="storeP1"></param>
		public static Store CreateStore(System.Int32 storeStoreID, System.String storeName, System.String storeAddress1, 
			System.String storeAddress2, System.String storeAddress3, System.String storeCity, System.String storeState, 
			System.String storeZip, System.String storePhone, System.String storeFax, System.String storeContactName, 
			System.String storeContactAddress1, System.String storeContactAddress2, System.String storeContactCity, 
			System.String storeContactState, System.String storeContactZip, System.String storeContactPhone, System.String storeIsDealer, 
			System.String storeP1)
		{
			Store newStore = new Store();
			newStore.StoreID = storeStoreID;
			newStore.Name = storeName;
			newStore.Address1 = storeAddress1;
			newStore.Address2 = storeAddress2;
			newStore.Address3 = storeAddress3;
			newStore.City = storeCity;
			newStore.State = storeState;
			newStore.Zip = storeZip;
			newStore.Phone = storePhone;
			newStore.Fax = storeFax;
			newStore.ContactName = storeContactName;
			newStore.ContactAddress1 = storeContactAddress1;
			newStore.ContactAddress2 = storeContactAddress2;
			newStore.ContactCity = storeContactCity;
			newStore.ContactState = storeContactState;
			newStore.ContactZip = storeContactZip;
			newStore.ContactPhone = storeContactPhone;
			newStore.IsDealer = storeIsDealer;
			newStore.P1 = storeP1;
			return newStore;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StoreColumn"/> which has raised the event.</param>
		public void OnColumnChanging(StoreColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StoreColumn"/> which has raised the event.</param>
		public void OnColumnChanged(StoreColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StoreColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(StoreColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				StoreEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new StoreEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StoreColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(StoreColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				StoreEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new StoreEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the StoreID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 StoreID
		{
			get
			{
				return this.entityData.StoreID; 
			}
			
			set
			{
				if (this.entityData.StoreID == value)
					return;
					
					
				OnColumnChanging(StoreColumn.StoreID, this.entityData.StoreID);
				this.entityData.StoreID = value;
				this.EntityId.StoreID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.StoreID, this.entityData.StoreID);
				OnPropertyChanged("StoreID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the StoreID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the StoreID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalStoreID
		{
			get { return this.entityData.OriginalStoreID; }
			set { this.entityData.OriginalStoreID = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Address1
		{
			get
			{
				return this.entityData.Address1; 
			}
			
			set
			{
				if (this.entityData.Address1 == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Address1, this.entityData.Address1);
				this.entityData.Address1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Address1, this.entityData.Address1);
				OnPropertyChanged("Address1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Address2
		{
			get
			{
				return this.entityData.Address2; 
			}
			
			set
			{
				if (this.entityData.Address2 == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Address2, this.entityData.Address2);
				this.entityData.Address2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Address2, this.entityData.Address2);
				OnPropertyChanged("Address2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Address3
		{
			get
			{
				return this.entityData.Address3; 
			}
			
			set
			{
				if (this.entityData.Address3 == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Address3, this.entityData.Address3);
				this.entityData.Address3 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Address3, this.entityData.Address3);
				OnPropertyChanged("Address3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
					
				OnColumnChanging(StoreColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the State property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 2)]
		public virtual System.String State
		{
			get
			{
				return this.entityData.State; 
			}
			
			set
			{
				if (this.entityData.State == value)
					return;
					
					
				OnColumnChanging(StoreColumn.State, this.entityData.State);
				this.entityData.State = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.State, this.entityData.State);
				OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Zip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Zip
		{
			get
			{
				return this.entityData.Zip; 
			}
			
			set
			{
				if (this.entityData.Zip == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Zip, this.entityData.Zip);
				this.entityData.Zip = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Zip, this.entityData.Zip);
				OnPropertyChanged("Zip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
					
					
				OnColumnChanging(StoreColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ContactName
		{
			get
			{
				return this.entityData.ContactName; 
			}
			
			set
			{
				if (this.entityData.ContactName == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactName, this.entityData.ContactName);
				this.entityData.ContactName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactName, this.entityData.ContactName);
				OnPropertyChanged("ContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactAddress1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ContactAddress1
		{
			get
			{
				return this.entityData.ContactAddress1; 
			}
			
			set
			{
				if (this.entityData.ContactAddress1 == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactAddress1, this.entityData.ContactAddress1);
				this.entityData.ContactAddress1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactAddress1, this.entityData.ContactAddress1);
				OnPropertyChanged("ContactAddress1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactAddress2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ContactAddress2
		{
			get
			{
				return this.entityData.ContactAddress2; 
			}
			
			set
			{
				if (this.entityData.ContactAddress2 == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactAddress2, this.entityData.ContactAddress2);
				this.entityData.ContactAddress2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactAddress2, this.entityData.ContactAddress2);
				OnPropertyChanged("ContactAddress2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ContactCity
		{
			get
			{
				return this.entityData.ContactCity; 
			}
			
			set
			{
				if (this.entityData.ContactCity == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactCity, this.entityData.ContactCity);
				this.entityData.ContactCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactCity, this.entityData.ContactCity);
				OnPropertyChanged("ContactCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactState property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String ContactState
		{
			get
			{
				return this.entityData.ContactState; 
			}
			
			set
			{
				if (this.entityData.ContactState == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactState, this.entityData.ContactState);
				this.entityData.ContactState = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactState, this.entityData.ContactState);
				OnPropertyChanged("ContactState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactZip property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String ContactZip
		{
			get
			{
				return this.entityData.ContactZip; 
			}
			
			set
			{
				if (this.entityData.ContactZip == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactZip, this.entityData.ContactZip);
				this.entityData.ContactZip = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactZip, this.entityData.ContactZip);
				OnPropertyChanged("ContactZip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactPhone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String ContactPhone
		{
			get
			{
				return this.entityData.ContactPhone; 
			}
			
			set
			{
				if (this.entityData.ContactPhone == value)
					return;
					
					
				OnColumnChanging(StoreColumn.ContactPhone, this.entityData.ContactPhone);
				this.entityData.ContactPhone = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.ContactPhone, this.entityData.ContactPhone);
				OnPropertyChanged("ContactPhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDealer property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String IsDealer
		{
			get
			{
				return this.entityData.IsDealer; 
			}
			
			set
			{
				if (this.entityData.IsDealer == value)
					return;
					
					
				OnColumnChanging(StoreColumn.IsDealer, this.entityData.IsDealer);
				this.entityData.IsDealer = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.IsDealer, this.entityData.IsDealer);
				OnPropertyChanged("IsDealer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the P1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String P1
		{
			get
			{
				return this.entityData.P1; 
			}
			
			set
			{
				if (this.entityData.P1 == value)
					return;
					
					
				OnColumnChanging(StoreColumn.P1, this.entityData.P1);
				this.entityData.P1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(StoreColumn.P1, this.entityData.P1);
				OnPropertyChanged("P1");
			}
		}
		

		#region Source Foreign Key Property
				
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeStore"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"StoreID", "Name", "Address1", "Address2", "Address3", "City", "State", "Zip", "Phone", "Fax", "ContactName", "ContactAddress1", "ContactAddress2", "ContactCity", "ContactState", "ContactZip", "ContactPhone", "IsDealer", "p1"};
			}
		}
		#endregion 
		
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as StoreEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Store) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Store>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Store);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Store Entity 
		///</summary>
		public virtual Store Copy()
		{
			//shallow copy entity
			Store copy = new Store();
			copy.StoreID = this.StoreID;
			copy.OriginalStoreID = this.OriginalStoreID;
			copy.Name = this.Name;
			copy.Address1 = this.Address1;
			copy.Address2 = this.Address2;
			copy.Address3 = this.Address3;
			copy.City = this.City;
			copy.State = this.State;
			copy.Zip = this.Zip;
			copy.Phone = this.Phone;
			copy.Fax = this.Fax;
			copy.ContactName = this.ContactName;
			copy.ContactAddress1 = this.ContactAddress1;
			copy.ContactAddress2 = this.ContactAddress2;
			copy.ContactCity = this.ContactCity;
			copy.ContactState = this.ContactState;
			copy.ContactZip = this.ContactZip;
			copy.ContactPhone = this.ContactPhone;
			copy.IsDealer = this.IsDealer;
			copy.P1 = this.P1;
					
			copy.AcceptChanges();
			return (Store)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Store Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Store DeepCopy()
		{
			return EntityHelper.Clone<Store>(this as Store);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StoreBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StoreBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="StoreBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="StoreBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StoreBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(StoreBase Object1, StoreBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.StoreID != Object2.StoreID)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.Address1 != Object2.Address1)
				equal = false;
			if ( Object1.Address2 != null && Object2.Address2 != null )
			{
				if (Object1.Address2 != Object2.Address2)
					equal = false;
			}
			else if (Object1.Address2 == null ^ Object2.Address2 == null )
			{
				equal = false;
			}
			if ( Object1.Address3 != null && Object2.Address3 != null )
			{
				if (Object1.Address3 != Object2.Address3)
					equal = false;
			}
			else if (Object1.Address3 == null ^ Object2.Address3 == null )
			{
				equal = false;
			}
			if (Object1.City != Object2.City)
				equal = false;
			if (Object1.State != Object2.State)
				equal = false;
			if (Object1.Zip != Object2.Zip)
				equal = false;
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
			if ( Object1.ContactName != null && Object2.ContactName != null )
			{
				if (Object1.ContactName != Object2.ContactName)
					equal = false;
			}
			else if (Object1.ContactName == null ^ Object2.ContactName == null )
			{
				equal = false;
			}
			if ( Object1.ContactAddress1 != null && Object2.ContactAddress1 != null )
			{
				if (Object1.ContactAddress1 != Object2.ContactAddress1)
					equal = false;
			}
			else if (Object1.ContactAddress1 == null ^ Object2.ContactAddress1 == null )
			{
				equal = false;
			}
			if ( Object1.ContactAddress2 != null && Object2.ContactAddress2 != null )
			{
				if (Object1.ContactAddress2 != Object2.ContactAddress2)
					equal = false;
			}
			else if (Object1.ContactAddress2 == null ^ Object2.ContactAddress2 == null )
			{
				equal = false;
			}
			if ( Object1.ContactCity != null && Object2.ContactCity != null )
			{
				if (Object1.ContactCity != Object2.ContactCity)
					equal = false;
			}
			else if (Object1.ContactCity == null ^ Object2.ContactCity == null )
			{
				equal = false;
			}
			if ( Object1.ContactState != null && Object2.ContactState != null )
			{
				if (Object1.ContactState != Object2.ContactState)
					equal = false;
			}
			else if (Object1.ContactState == null ^ Object2.ContactState == null )
			{
				equal = false;
			}
			if ( Object1.ContactZip != null && Object2.ContactZip != null )
			{
				if (Object1.ContactZip != Object2.ContactZip)
					equal = false;
			}
			else if (Object1.ContactZip == null ^ Object2.ContactZip == null )
			{
				equal = false;
			}
			if ( Object1.ContactPhone != null && Object2.ContactPhone != null )
			{
				if (Object1.ContactPhone != Object2.ContactPhone)
					equal = false;
			}
			else if (Object1.ContactPhone == null ^ Object2.ContactPhone == null )
			{
				equal = false;
			}
			if ( Object1.IsDealer != null && Object2.IsDealer != null )
			{
				if (Object1.IsDealer != Object2.IsDealer)
					equal = false;
			}
			else if (Object1.IsDealer == null ^ Object2.IsDealer == null )
			{
				equal = false;
			}
			if ( Object1.P1 != null && Object2.P1 != null )
			{
				if (Object1.P1 != Object2.P1)
					equal = false;
			}
			else if (Object1.P1 == null ^ Object2.P1 == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((StoreBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static StoreComparer GetComparer()
        {
            return new StoreComparer();
        }
        */

        // Comparer delegates back to Store
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Store rhs, StoreColumn which)
        {
            switch (which)
            {
            	
            	
            	case StoreColumn.StoreID:
            		return this.StoreID.CompareTo(rhs.StoreID);
            		
            		                 
            	
            	
            	case StoreColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case StoreColumn.Address1:
            		return this.Address1.CompareTo(rhs.Address1);
            		
            		                 
            	
            	
            	case StoreColumn.Address2:
            		return this.Address2.CompareTo(rhs.Address2);
            		
            		                 
            	
            	
            	case StoreColumn.Address3:
            		return this.Address3.CompareTo(rhs.Address3);
            		
            		                 
            	
            	
            	case StoreColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case StoreColumn.State:
            		return this.State.CompareTo(rhs.State);
            		
            		                 
            	
            	
            	case StoreColumn.Zip:
            		return this.Zip.CompareTo(rhs.Zip);
            		
            		                 
            	
            	
            	case StoreColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case StoreColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            	
            	
            	case StoreColumn.ContactName:
            		return this.ContactName.CompareTo(rhs.ContactName);
            		
            		                 
            	
            	
            	case StoreColumn.ContactAddress1:
            		return this.ContactAddress1.CompareTo(rhs.ContactAddress1);
            		
            		                 
            	
            	
            	case StoreColumn.ContactAddress2:
            		return this.ContactAddress2.CompareTo(rhs.ContactAddress2);
            		
            		                 
            	
            	
            	case StoreColumn.ContactCity:
            		return this.ContactCity.CompareTo(rhs.ContactCity);
            		
            		                 
            	
            	
            	case StoreColumn.ContactState:
            		return this.ContactState.CompareTo(rhs.ContactState);
            		
            		                 
            	
            	
            	case StoreColumn.ContactZip:
            		return this.ContactZip.CompareTo(rhs.ContactZip);
            		
            		                 
            	
            	
            	case StoreColumn.ContactPhone:
            		return this.ContactPhone.CompareTo(rhs.ContactPhone);
            		
            		                 
            	
            	
            	case StoreColumn.IsDealer:
            		return this.IsDealer.CompareTo(rhs.IsDealer);
            		
            		                 
            	
            	
            	case StoreColumn.P1:
            		return this.P1.CompareTo(rhs.P1);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<StoreKey> Members
		
		// member variable for the EntityId property
		private StoreKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public StoreKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new StoreKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Store" 
					+ this.StoreID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- StoreID: {0}{19}- Name: {1}{19}- Address1: {2}{19}- Address2: {3}{19}- Address3: {4}{19}- City: {5}{19}- State: {6}{19}- Zip: {7}{19}- Phone: {8}{19}- Fax: {9}{19}- ContactName: {10}{19}- ContactAddress1: {11}{19}- ContactAddress2: {12}{19}- ContactCity: {13}{19}- ContactState: {14}{19}- ContactZip: {15}{19}- ContactPhone: {16}{19}- IsDealer: {17}{19}- P1: {18}{19}", 
				this.StoreID,
				this.Name,
				this.Address1,
				(this.Address2 == null) ? string.Empty : this.Address2.ToString(),
				(this.Address3 == null) ? string.Empty : this.Address3.ToString(),
				this.City,
				this.State,
				this.Zip,
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				(this.ContactName == null) ? string.Empty : this.ContactName.ToString(),
				(this.ContactAddress1 == null) ? string.Empty : this.ContactAddress1.ToString(),
				(this.ContactAddress2 == null) ? string.Empty : this.ContactAddress2.ToString(),
				(this.ContactCity == null) ? string.Empty : this.ContactCity.ToString(),
				(this.ContactState == null) ? string.Empty : this.ContactState.ToString(),
				(this.ContactZip == null) ? string.Empty : this.ContactZip.ToString(),
				(this.ContactPhone == null) ? string.Empty : this.ContactPhone.ToString(),
				(this.IsDealer == null) ? string.Empty : this.IsDealer.ToString(),
				(this.P1 == null) ? string.Empty : this.P1.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeStore' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class StoreEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// StoreID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeStore"</remarks>
			public System.Int32 StoreID;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalStoreID;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Address1 : 
		/// </summary>
		public System.String		  Address1 = string.Empty;
		
		/// <summary>
		/// Address2 : 
		/// </summary>
		public System.String		  Address2 = string.Empty;
		
		/// <summary>
		/// Address3 : 
		/// </summary>
		public System.String		  Address3 = string.Empty;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = string.Empty;
		
		/// <summary>
		/// State : 
		/// </summary>
		public System.String		  State = string.Empty;
		
		/// <summary>
		/// Zip : 
		/// </summary>
		public System.String		  Zip = string.Empty;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String		  Phone = string.Empty;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		public System.String		  Fax = string.Empty;
		
		/// <summary>
		/// ContactName : 
		/// </summary>
		public System.String		  ContactName = string.Empty;
		
		/// <summary>
		/// ContactAddress1 : 
		/// </summary>
		public System.String		  ContactAddress1 = string.Empty;
		
		/// <summary>
		/// ContactAddress2 : 
		/// </summary>
		public System.String		  ContactAddress2 = string.Empty;
		
		/// <summary>
		/// ContactCity : 
		/// </summary>
		public System.String		  ContactCity = string.Empty;
		
		/// <summary>
		/// ContactState : 
		/// </summary>
		public System.String		  ContactState = string.Empty;
		
		/// <summary>
		/// ContactZip : 
		/// </summary>
		public System.String		  ContactZip = string.Empty;
		
		/// <summary>
		/// ContactPhone : 
		/// </summary>
		public System.String		  ContactPhone = string.Empty;
		
		/// <summary>
		/// IsDealer : 
		/// </summary>
		public System.String		  IsDealer = string.Empty;
		
		/// <summary>
		/// p1 : 
		/// </summary>
		public System.String		  P1 = string.Empty;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			StoreEntityData _tmp = new StoreEntityData();
						
			_tmp.StoreID = this.StoreID;
			_tmp.OriginalStoreID = this.OriginalStoreID;
			
			_tmp.Name = this.Name;
			_tmp.Address1 = this.Address1;
			_tmp.Address2 = this.Address2;
			_tmp.Address3 = this.Address3;
			_tmp.City = this.City;
			_tmp.State = this.State;
			_tmp.Zip = this.Zip;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			_tmp.ContactName = this.ContactName;
			_tmp.ContactAddress1 = this.ContactAddress1;
			_tmp.ContactAddress2 = this.ContactAddress2;
			_tmp.ContactCity = this.ContactCity;
			_tmp.ContactState = this.ContactState;
			_tmp.ContactZip = this.ContactZip;
			_tmp.ContactPhone = this.ContactPhone;
			_tmp.IsDealer = this.IsDealer;
			_tmp.P1 = this.P1;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Name");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Name",255));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Address1");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Address1",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Address2",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Address3",255));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"City");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("City",255));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"State");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("State",2));
			ValidationRules.AddRule(Validation.CommonRules.NotNull,"Zip");
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Zip",10));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Phone",15));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Fax",15));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactName",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactAddress1",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactAddress2",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactCity",255));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactState",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactZip",10));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ContactPhone",15));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("IsDealer",1));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("P1",50));
		}
   		#endregion
	
	} // End Class
	
	#region StoreComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class StoreComparer : System.Collections.Generic.IComparer<Store>
	{
		StoreColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:StoreComparer"/> class.
        /// </summary>
		public StoreComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public StoreComparer(StoreColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Store"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Store"/> to compare.</param>
        /// <param name="b">The second <c>Store</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Store a, Store b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Store entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Store a, Store b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public StoreColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region StoreKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Store"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class StoreKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the StoreKey class.
		/// </summary>
		public StoreKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the StoreKey class.
		/// </summary>
		public StoreKey(StoreBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.storeID = entity.StoreID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the StoreKey class.
		/// </summary>
		public StoreKey(System.Int32 storeID)
		{
			#region Init Properties

			this.storeID = storeID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private StoreBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public StoreBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the StoreID property
		private System.Int32 storeID;
		
		/// <summary>
		/// Gets or sets the StoreID property.
		/// </summary>
		public System.Int32 StoreID
		{
			get { return storeID; }
			set
			{
				if ( Entity != null )
				{
					Entity.StoreID = value;
				}
				
				storeID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				StoreID = ( values["StoreID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["StoreID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("StoreID", StoreID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("StoreID: {0}{1}",
								StoreID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region StoreColumn Enum
	
	/// <summary>
	/// Enumerate the Store columns.
	/// </summary>
	[Serializable]
	public enum StoreColumn : int
	{
		/// <summary>
		/// StoreID : 
		/// </summary>
		[EnumTextValue("StoreID")]
		[ColumnEnum("StoreID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		StoreID = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		Name = 2,
		/// <summary>
		/// Address1 : 
		/// </summary>
		[EnumTextValue("Address1")]
		[ColumnEnum("Address1", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		Address1 = 3,
		/// <summary>
		/// Address2 : 
		/// </summary>
		[EnumTextValue("Address2")]
		[ColumnEnum("Address2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Address2 = 4,
		/// <summary>
		/// Address3 : 
		/// </summary>
		[EnumTextValue("Address3")]
		[ColumnEnum("Address3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Address3 = 5,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		City = 6,
		/// <summary>
		/// State : 
		/// </summary>
		[EnumTextValue("State")]
		[ColumnEnum("State", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 2)]
		State = 7,
		/// <summary>
		/// Zip : 
		/// </summary>
		[EnumTextValue("Zip")]
		[ColumnEnum("Zip", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		Zip = 8,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Phone = 9,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Fax = 10,
		/// <summary>
		/// ContactName : 
		/// </summary>
		[EnumTextValue("ContactName")]
		[ColumnEnum("ContactName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ContactName = 11,
		/// <summary>
		/// ContactAddress1 : 
		/// </summary>
		[EnumTextValue("ContactAddress1")]
		[ColumnEnum("ContactAddress1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ContactAddress1 = 12,
		/// <summary>
		/// ContactAddress2 : 
		/// </summary>
		[EnumTextValue("ContactAddress2")]
		[ColumnEnum("ContactAddress2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ContactAddress2 = 13,
		/// <summary>
		/// ContactCity : 
		/// </summary>
		[EnumTextValue("ContactCity")]
		[ColumnEnum("ContactCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ContactCity = 14,
		/// <summary>
		/// ContactState : 
		/// </summary>
		[EnumTextValue("ContactState")]
		[ColumnEnum("ContactState", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 2)]
		ContactState = 15,
		/// <summary>
		/// ContactZip : 
		/// </summary>
		[EnumTextValue("ContactZip")]
		[ColumnEnum("ContactZip", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		ContactZip = 16,
		/// <summary>
		/// ContactPhone : 
		/// </summary>
		[EnumTextValue("ContactPhone")]
		[ColumnEnum("ContactPhone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		ContactPhone = 17,
		/// <summary>
		/// IsDealer : 
		/// </summary>
		[EnumTextValue("IsDealer")]
		[ColumnEnum("IsDealer", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		IsDealer = 18,
		/// <summary>
		/// P1 : 
		/// </summary>
		[EnumTextValue("p1")]
		[ColumnEnum("p1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		P1 = 19
	}//End enum

	#endregion StoreColumn Enum

} // end namespace
