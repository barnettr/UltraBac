	
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file Account.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace ZNode.Libraries.DataAccess.Entities
{
	#region AccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Account"/> object.
	/// </remarks>
	public class AccountEventArgs : System.EventArgs
	{
		private AccountColumn column;
		private object value;
		
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		
		///<summary>
		/// The AccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccountColumn" />
		public AccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all Account related events.
	///</summary>
	public delegate void AccountEventHandler(object sender, AccountEventArgs e);
	
	///<summary>
	/// An object representation of the 'ZNodeAccount' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(Account))]
	public abstract partial class AccountBase : EntityBase, IEntityId<AccountKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private AccountEntityData entityData;
		
		// <summary>
		// 	Old the original data of the entity.
		// </summary>
		//AccountEntityData originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private AccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		[NonSerialized]
		private TList<Account> parentCollection;
		private bool inTxn = false;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		public AccountBase()
		{
			this.entityData = new AccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		///<param name="accountParentAccountID"></param>
		///<param name="accountPortalID"></param>
		///<param name="accountUserID"></param>
		///<param name="accountExternalAccountNo"></param>
		///<param name="accountCompanyName"></param>
		///<param name="accountAccountTypeID"></param>
		///<param name="accountProfileID"></param>
		///<param name="accountAccountProfileCode"></param>
		///<param name="accountSubAccountLimit"></param>
		///<param name="accountBillingFirstName"></param>
		///<param name="accountBillingLastName"></param>
		///<param name="accountBillingCompanyName"></param>
		///<param name="accountBillingStreet"></param>
		///<param name="accountBillingStreet1"></param>
		///<param name="accountBillingCity"></param>
		///<param name="accountBillingStateCode"></param>
		///<param name="accountBillingPostalCode"></param>
		///<param name="accountBillingCountryCode"></param>
		///<param name="accountBillingPhoneNumber"></param>
		///<param name="accountBillingEmailID"></param>
		///<param name="accountShipFirstName"></param>
		///<param name="accountShipLastName"></param>
		///<param name="accountShipCompanyName"></param>
		///<param name="accountShipStreet"></param>
		///<param name="accountShipStreet1"></param>
		///<param name="accountShipCity"></param>
		///<param name="accountShipStateCode"></param>
		///<param name="accountShipPostalCode"></param>
		///<param name="accountShipCountryCode"></param>
		///<param name="accountShipEmailID"></param>
		///<param name="accountShipPhoneNumber"></param>
		///<param name="accountDescription"></param>
		///<param name="accountCreateUser"></param>
		///<param name="accountCreateDte"></param>
		///<param name="accountUpdateUser"></param>
		///<param name="accountUpdateDte"></param>
		///<param name="accountActiveInd"></param>
		///<param name="accountWebsite"></param>
		///<param name="accountSource"></param>
		///<param name="accountReferredBy"></param>
		///<param name="accountCustom1"></param>
		///<param name="accountCustom2"></param>
		///<param name="accountCustom3"></param>
		///<param name="accountContactTemperatureID"></param>
		public AccountBase(System.Int32? accountParentAccountID, System.Int32? accountPortalID, System.Guid? accountUserID, 
			System.String accountExternalAccountNo, System.String accountCompanyName, System.Int32? accountAccountTypeID, 
			System.Int32? accountProfileID, System.String accountAccountProfileCode, System.Int32? accountSubAccountLimit, 
			System.String accountBillingFirstName, System.String accountBillingLastName, System.String accountBillingCompanyName, 
			System.String accountBillingStreet, System.String accountBillingStreet1, System.String accountBillingCity, 
			System.String accountBillingStateCode, System.String accountBillingPostalCode, System.String accountBillingCountryCode, 
			System.String accountBillingPhoneNumber, System.String accountBillingEmailID, System.String accountShipFirstName, 
			System.String accountShipLastName, System.String accountShipCompanyName, System.String accountShipStreet, 
			System.String accountShipStreet1, System.String accountShipCity, System.String accountShipStateCode, System.String accountShipPostalCode, 
			System.String accountShipCountryCode, System.String accountShipEmailID, System.String accountShipPhoneNumber, 
			System.String accountDescription, System.String accountCreateUser, System.DateTime accountCreateDte, System.String accountUpdateUser, 
			System.DateTime? accountUpdateDte, System.Boolean? accountActiveInd, System.String accountWebsite, System.String accountSource, 
			System.Byte[] accountReferredBy, System.String accountCustom1, System.String accountCustom2, System.String accountCustom3, 
			System.Int32? accountContactTemperatureID)
		{
			this.entityData = new AccountEntityData();
			this.backupData = null;

			this.ParentAccountID = accountParentAccountID;
			this.PortalID = accountPortalID;
			this.UserID = accountUserID;
			this.ExternalAccountNo = accountExternalAccountNo;
			this.CompanyName = accountCompanyName;
			this.AccountTypeID = accountAccountTypeID;
			this.ProfileID = accountProfileID;
			this.AccountProfileCode = accountAccountProfileCode;
			this.SubAccountLimit = accountSubAccountLimit;
			this.BillingFirstName = accountBillingFirstName;
			this.BillingLastName = accountBillingLastName;
			this.BillingCompanyName = accountBillingCompanyName;
			this.BillingStreet = accountBillingStreet;
			this.BillingStreet1 = accountBillingStreet1;
			this.BillingCity = accountBillingCity;
			this.BillingStateCode = accountBillingStateCode;
			this.BillingPostalCode = accountBillingPostalCode;
			this.BillingCountryCode = accountBillingCountryCode;
			this.BillingPhoneNumber = accountBillingPhoneNumber;
			this.BillingEmailID = accountBillingEmailID;
			this.ShipFirstName = accountShipFirstName;
			this.ShipLastName = accountShipLastName;
			this.ShipCompanyName = accountShipCompanyName;
			this.ShipStreet = accountShipStreet;
			this.ShipStreet1 = accountShipStreet1;
			this.ShipCity = accountShipCity;
			this.ShipStateCode = accountShipStateCode;
			this.ShipPostalCode = accountShipPostalCode;
			this.ShipCountryCode = accountShipCountryCode;
			this.ShipEmailID = accountShipEmailID;
			this.ShipPhoneNumber = accountShipPhoneNumber;
			this.Description = accountDescription;
			this.CreateUser = accountCreateUser;
			this.CreateDte = accountCreateDte;
			this.UpdateUser = accountUpdateUser;
			this.UpdateDte = accountUpdateDte;
			this.ActiveInd = accountActiveInd;
			this.Website = accountWebsite;
			this.Source = accountSource;
			this.ReferredBy = accountReferredBy;
			this.Custom1 = accountCustom1;
			this.Custom2 = accountCustom2;
			this.Custom3 = accountCustom3;
			this.ContactTemperatureID = accountContactTemperatureID;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Account"/> instance.
		///</summary>
		///<param name="accountParentAccountID"></param>
		///<param name="accountPortalID"></param>
		///<param name="accountUserID"></param>
		///<param name="accountExternalAccountNo"></param>
		///<param name="accountCompanyName"></param>
		///<param name="accountAccountTypeID"></param>
		///<param name="accountProfileID"></param>
		///<param name="accountAccountProfileCode"></param>
		///<param name="accountSubAccountLimit"></param>
		///<param name="accountBillingFirstName"></param>
		///<param name="accountBillingLastName"></param>
		///<param name="accountBillingCompanyName"></param>
		///<param name="accountBillingStreet"></param>
		///<param name="accountBillingStreet1"></param>
		///<param name="accountBillingCity"></param>
		///<param name="accountBillingStateCode"></param>
		///<param name="accountBillingPostalCode"></param>
		///<param name="accountBillingCountryCode"></param>
		///<param name="accountBillingPhoneNumber"></param>
		///<param name="accountBillingEmailID"></param>
		///<param name="accountShipFirstName"></param>
		///<param name="accountShipLastName"></param>
		///<param name="accountShipCompanyName"></param>
		///<param name="accountShipStreet"></param>
		///<param name="accountShipStreet1"></param>
		///<param name="accountShipCity"></param>
		///<param name="accountShipStateCode"></param>
		///<param name="accountShipPostalCode"></param>
		///<param name="accountShipCountryCode"></param>
		///<param name="accountShipEmailID"></param>
		///<param name="accountShipPhoneNumber"></param>
		///<param name="accountDescription"></param>
		///<param name="accountCreateUser"></param>
		///<param name="accountCreateDte"></param>
		///<param name="accountUpdateUser"></param>
		///<param name="accountUpdateDte"></param>
		///<param name="accountActiveInd"></param>
		///<param name="accountWebsite"></param>
		///<param name="accountSource"></param>
		///<param name="accountReferredBy"></param>
		///<param name="accountCustom1"></param>
		///<param name="accountCustom2"></param>
		///<param name="accountCustom3"></param>
		///<param name="accountContactTemperatureID"></param>
		public static Account CreateAccount(System.Int32? accountParentAccountID, System.Int32? accountPortalID, System.Guid? accountUserID, 
			System.String accountExternalAccountNo, System.String accountCompanyName, System.Int32? accountAccountTypeID, 
			System.Int32? accountProfileID, System.String accountAccountProfileCode, System.Int32? accountSubAccountLimit, 
			System.String accountBillingFirstName, System.String accountBillingLastName, System.String accountBillingCompanyName, 
			System.String accountBillingStreet, System.String accountBillingStreet1, System.String accountBillingCity, 
			System.String accountBillingStateCode, System.String accountBillingPostalCode, System.String accountBillingCountryCode, 
			System.String accountBillingPhoneNumber, System.String accountBillingEmailID, System.String accountShipFirstName, 
			System.String accountShipLastName, System.String accountShipCompanyName, System.String accountShipStreet, 
			System.String accountShipStreet1, System.String accountShipCity, System.String accountShipStateCode, System.String accountShipPostalCode, 
			System.String accountShipCountryCode, System.String accountShipEmailID, System.String accountShipPhoneNumber, 
			System.String accountDescription, System.String accountCreateUser, System.DateTime accountCreateDte, System.String accountUpdateUser, 
			System.DateTime? accountUpdateDte, System.Boolean? accountActiveInd, System.String accountWebsite, System.String accountSource, 
			System.Byte[] accountReferredBy, System.String accountCustom1, System.String accountCustom2, System.String accountCustom3, 
			System.Int32? accountContactTemperatureID)
		{
			Account newAccount = new Account();
			newAccount.ParentAccountID = accountParentAccountID;
			newAccount.PortalID = accountPortalID;
			newAccount.UserID = accountUserID;
			newAccount.ExternalAccountNo = accountExternalAccountNo;
			newAccount.CompanyName = accountCompanyName;
			newAccount.AccountTypeID = accountAccountTypeID;
			newAccount.ProfileID = accountProfileID;
			newAccount.AccountProfileCode = accountAccountProfileCode;
			newAccount.SubAccountLimit = accountSubAccountLimit;
			newAccount.BillingFirstName = accountBillingFirstName;
			newAccount.BillingLastName = accountBillingLastName;
			newAccount.BillingCompanyName = accountBillingCompanyName;
			newAccount.BillingStreet = accountBillingStreet;
			newAccount.BillingStreet1 = accountBillingStreet1;
			newAccount.BillingCity = accountBillingCity;
			newAccount.BillingStateCode = accountBillingStateCode;
			newAccount.BillingPostalCode = accountBillingPostalCode;
			newAccount.BillingCountryCode = accountBillingCountryCode;
			newAccount.BillingPhoneNumber = accountBillingPhoneNumber;
			newAccount.BillingEmailID = accountBillingEmailID;
			newAccount.ShipFirstName = accountShipFirstName;
			newAccount.ShipLastName = accountShipLastName;
			newAccount.ShipCompanyName = accountShipCompanyName;
			newAccount.ShipStreet = accountShipStreet;
			newAccount.ShipStreet1 = accountShipStreet1;
			newAccount.ShipCity = accountShipCity;
			newAccount.ShipStateCode = accountShipStateCode;
			newAccount.ShipPostalCode = accountShipPostalCode;
			newAccount.ShipCountryCode = accountShipCountryCode;
			newAccount.ShipEmailID = accountShipEmailID;
			newAccount.ShipPhoneNumber = accountShipPhoneNumber;
			newAccount.Description = accountDescription;
			newAccount.CreateUser = accountCreateUser;
			newAccount.CreateDte = accountCreateDte;
			newAccount.UpdateUser = accountUpdateUser;
			newAccount.UpdateDte = accountUpdateDte;
			newAccount.ActiveInd = accountActiveInd;
			newAccount.Website = accountWebsite;
			newAccount.Source = accountSource;
			newAccount.ReferredBy = accountReferredBy;
			newAccount.Custom1 = accountCustom1;
			newAccount.Custom2 = accountCustom2;
			newAccount.Custom3 = accountCustom3;
			newAccount.ContactTemperatureID = accountContactTemperatureID;
			return newAccount;
		}
				
		#endregion Constructors
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added)
				EntityManager.StopTracking(EntityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
				
		#region Properties	
				
		/// <summary>
		/// 	Gets or sets the AccountID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AccountID
		{
			get
			{
				return this.entityData.AccountID; 
			}
			
			set
			{
				if (this.entityData.AccountID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.AccountID, this.entityData.AccountID);
				this.entityData.AccountID = value;
				this.EntityId.AccountID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.AccountID, this.entityData.AccountID);
				OnPropertyChanged("AccountID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentAccountID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsParentAccountIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ParentAccountID
		{
			get
			{
				return this.entityData.ParentAccountID; 
			}
			
			set
			{
				if (this.entityData.ParentAccountID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ParentAccountID, this.entityData.ParentAccountID);
				this.entityData.ParentAccountID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ParentAccountID, this.entityData.ParentAccountID);
				OnPropertyChanged("ParentAccountID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PortalID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPortalIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PortalID
		{
			get
			{
				return this.entityData.PortalID; 
			}
			
			set
			{
				if (this.entityData.PortalID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.PortalID, this.entityData.PortalID);
				this.entityData.PortalID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.PortalID, this.entityData.PortalID);
				OnPropertyChanged("PortalID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsUserIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? UserID
		{
			get
			{
				return this.entityData.UserID; 
			}
			
			set
			{
				if (this.entityData.UserID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.UserID, this.entityData.UserID);
				this.entityData.UserID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.UserID, this.entityData.UserID);
				OnPropertyChanged("UserID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalAccountNo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalAccountNo
		{
			get
			{
				return this.entityData.ExternalAccountNo; 
			}
			
			set
			{
				if (this.entityData.ExternalAccountNo == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ExternalAccountNo, this.entityData.ExternalAccountNo);
				this.entityData.ExternalAccountNo = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ExternalAccountNo, this.entityData.ExternalAccountNo);
				OnPropertyChanged("ExternalAccountNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAccountTypeIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AccountTypeID
		{
			get
			{
				return this.entityData.AccountTypeID; 
			}
			
			set
			{
				if (this.entityData.AccountTypeID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.AccountTypeID, this.entityData.AccountTypeID);
				this.entityData.AccountTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.AccountTypeID, this.entityData.AccountTypeID);
				OnPropertyChanged("AccountTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProfileID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProfileIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProfileID
		{
			get
			{
				return this.entityData.ProfileID; 
			}
			
			set
			{
				if (this.entityData.ProfileID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ProfileID, this.entityData.ProfileID);
				this.entityData.ProfileID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ProfileID, this.entityData.ProfileID);
				OnPropertyChanged("ProfileID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountProfileCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String AccountProfileCode
		{
			get
			{
				return this.entityData.AccountProfileCode; 
			}
			
			set
			{
				if (this.entityData.AccountProfileCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.AccountProfileCode, this.entityData.AccountProfileCode);
				this.entityData.AccountProfileCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.AccountProfileCode, this.entityData.AccountProfileCode);
				OnPropertyChanged("AccountProfileCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubAccountLimit property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSubAccountLimitNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SubAccountLimit
		{
			get
			{
				return this.entityData.SubAccountLimit; 
			}
			
			set
			{
				if (this.entityData.SubAccountLimit == value)
					return;
					
					
				OnColumnChanging(AccountColumn.SubAccountLimit, this.entityData.SubAccountLimit);
				this.entityData.SubAccountLimit = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.SubAccountLimit, this.entityData.SubAccountLimit);
				OnPropertyChanged("SubAccountLimit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingFirstName
		{
			get
			{
				return this.entityData.BillingFirstName; 
			}
			
			set
			{
				if (this.entityData.BillingFirstName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingFirstName, this.entityData.BillingFirstName);
				this.entityData.BillingFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingFirstName, this.entityData.BillingFirstName);
				OnPropertyChanged("BillingFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingLastName
		{
			get
			{
				return this.entityData.BillingLastName; 
			}
			
			set
			{
				if (this.entityData.BillingLastName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingLastName, this.entityData.BillingLastName);
				this.entityData.BillingLastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingLastName, this.entityData.BillingLastName);
				OnPropertyChanged("BillingLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingCompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingCompanyName
		{
			get
			{
				return this.entityData.BillingCompanyName; 
			}
			
			set
			{
				if (this.entityData.BillingCompanyName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingCompanyName, this.entityData.BillingCompanyName);
				this.entityData.BillingCompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingCompanyName, this.entityData.BillingCompanyName);
				OnPropertyChanged("BillingCompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStreet property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingStreet
		{
			get
			{
				return this.entityData.BillingStreet; 
			}
			
			set
			{
				if (this.entityData.BillingStreet == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingStreet, this.entityData.BillingStreet);
				this.entityData.BillingStreet = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingStreet, this.entityData.BillingStreet);
				OnPropertyChanged("BillingStreet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStreet1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingStreet1
		{
			get
			{
				return this.entityData.BillingStreet1; 
			}
			
			set
			{
				if (this.entityData.BillingStreet1 == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingStreet1, this.entityData.BillingStreet1);
				this.entityData.BillingStreet1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingStreet1, this.entityData.BillingStreet1);
				OnPropertyChanged("BillingStreet1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingCity
		{
			get
			{
				return this.entityData.BillingCity; 
			}
			
			set
			{
				if (this.entityData.BillingCity == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingCity, this.entityData.BillingCity);
				this.entityData.BillingCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingCity, this.entityData.BillingCity);
				OnPropertyChanged("BillingCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStateCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String BillingStateCode
		{
			get
			{
				return this.entityData.BillingStateCode; 
			}
			
			set
			{
				if (this.entityData.BillingStateCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingStateCode, this.entityData.BillingStateCode);
				this.entityData.BillingStateCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingStateCode, this.entityData.BillingStateCode);
				OnPropertyChanged("BillingStateCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String BillingPostalCode
		{
			get
			{
				return this.entityData.BillingPostalCode; 
			}
			
			set
			{
				if (this.entityData.BillingPostalCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingPostalCode, this.entityData.BillingPostalCode);
				this.entityData.BillingPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingPostalCode, this.entityData.BillingPostalCode);
				OnPropertyChanged("BillingPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingCountryCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String BillingCountryCode
		{
			get
			{
				return this.entityData.BillingCountryCode; 
			}
			
			set
			{
				if (this.entityData.BillingCountryCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingCountryCode, this.entityData.BillingCountryCode);
				this.entityData.BillingCountryCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingCountryCode, this.entityData.BillingCountryCode);
				OnPropertyChanged("BillingCountryCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingPhoneNumber
		{
			get
			{
				return this.entityData.BillingPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.BillingPhoneNumber == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingPhoneNumber, this.entityData.BillingPhoneNumber);
				this.entityData.BillingPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingPhoneNumber, this.entityData.BillingPhoneNumber);
				OnPropertyChanged("BillingPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingEmailID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingEmailID
		{
			get
			{
				return this.entityData.BillingEmailID; 
			}
			
			set
			{
				if (this.entityData.BillingEmailID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.BillingEmailID, this.entityData.BillingEmailID);
				this.entityData.BillingEmailID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.BillingEmailID, this.entityData.BillingEmailID);
				OnPropertyChanged("BillingEmailID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipFirstName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipFirstName
		{
			get
			{
				return this.entityData.ShipFirstName; 
			}
			
			set
			{
				if (this.entityData.ShipFirstName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipFirstName, this.entityData.ShipFirstName);
				this.entityData.ShipFirstName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipFirstName, this.entityData.ShipFirstName);
				OnPropertyChanged("ShipFirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipLastName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipLastName
		{
			get
			{
				return this.entityData.ShipLastName; 
			}
			
			set
			{
				if (this.entityData.ShipLastName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipLastName, this.entityData.ShipLastName);
				this.entityData.ShipLastName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipLastName, this.entityData.ShipLastName);
				OnPropertyChanged("ShipLastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipCompanyName
		{
			get
			{
				return this.entityData.ShipCompanyName; 
			}
			
			set
			{
				if (this.entityData.ShipCompanyName == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipCompanyName, this.entityData.ShipCompanyName);
				this.entityData.ShipCompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipCompanyName, this.entityData.ShipCompanyName);
				OnPropertyChanged("ShipCompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipStreet property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipStreet
		{
			get
			{
				return this.entityData.ShipStreet; 
			}
			
			set
			{
				if (this.entityData.ShipStreet == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipStreet, this.entityData.ShipStreet);
				this.entityData.ShipStreet = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipStreet, this.entityData.ShipStreet);
				OnPropertyChanged("ShipStreet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipStreet1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipStreet1
		{
			get
			{
				return this.entityData.ShipStreet1; 
			}
			
			set
			{
				if (this.entityData.ShipStreet1 == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipStreet1, this.entityData.ShipStreet1);
				this.entityData.ShipStreet1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipStreet1, this.entityData.ShipStreet1);
				OnPropertyChanged("ShipStreet1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipCity
		{
			get
			{
				return this.entityData.ShipCity; 
			}
			
			set
			{
				if (this.entityData.ShipCity == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipCity, this.entityData.ShipCity);
				this.entityData.ShipCity = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipCity, this.entityData.ShipCity);
				OnPropertyChanged("ShipCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipStateCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String ShipStateCode
		{
			get
			{
				return this.entityData.ShipStateCode; 
			}
			
			set
			{
				if (this.entityData.ShipStateCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipStateCode, this.entityData.ShipStateCode);
				this.entityData.ShipStateCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipStateCode, this.entityData.ShipStateCode);
				OnPropertyChanged("ShipStateCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String ShipPostalCode
		{
			get
			{
				return this.entityData.ShipPostalCode; 
			}
			
			set
			{
				if (this.entityData.ShipPostalCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipPostalCode, this.entityData.ShipPostalCode);
				this.entityData.ShipPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipPostalCode, this.entityData.ShipPostalCode);
				OnPropertyChanged("ShipPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCountryCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String ShipCountryCode
		{
			get
			{
				return this.entityData.ShipCountryCode; 
			}
			
			set
			{
				if (this.entityData.ShipCountryCode == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipCountryCode, this.entityData.ShipCountryCode);
				this.entityData.ShipCountryCode = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipCountryCode, this.entityData.ShipCountryCode);
				OnPropertyChanged("ShipCountryCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipEmailID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipEmailID
		{
			get
			{
				return this.entityData.ShipEmailID; 
			}
			
			set
			{
				if (this.entityData.ShipEmailID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipEmailID, this.entityData.ShipEmailID);
				this.entityData.ShipEmailID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipEmailID, this.entityData.ShipEmailID);
				OnPropertyChanged("ShipEmailID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ShipPhoneNumber
		{
			get
			{
				return this.entityData.ShipPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.ShipPhoneNumber == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ShipPhoneNumber, this.entityData.ShipPhoneNumber);
				this.entityData.ShipPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ShipPhoneNumber, this.entityData.ShipPhoneNumber);
				OnPropertyChanged("ShipPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
					
				OnColumnChanging(AccountColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CreateUser
		{
			get
			{
				return this.entityData.CreateUser; 
			}
			
			set
			{
				if (this.entityData.CreateUser == value)
					return;
					
					
				OnColumnChanging(AccountColumn.CreateUser, this.entityData.CreateUser);
				this.entityData.CreateUser = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.CreateUser, this.entityData.CreateUser);
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDte property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDte
		{
			get
			{
				return this.entityData.CreateDte; 
			}
			
			set
			{
				if (this.entityData.CreateDte == value)
					return;
					
					
				OnColumnChanging(AccountColumn.CreateDte, this.entityData.CreateDte);
				this.entityData.CreateDte = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.CreateDte, this.entityData.CreateDte);
				OnPropertyChanged("CreateDte");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String UpdateUser
		{
			get
			{
				return this.entityData.UpdateUser; 
			}
			
			set
			{
				if (this.entityData.UpdateUser == value)
					return;
					
					
				OnColumnChanging(AccountColumn.UpdateUser, this.entityData.UpdateUser);
				this.entityData.UpdateUser = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.UpdateUser, this.entityData.UpdateUser);
				OnPropertyChanged("UpdateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDte property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdateDteNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDte
		{
			get
			{
				return this.entityData.UpdateDte; 
			}
			
			set
			{
				if (this.entityData.UpdateDte == value)
					return;
					
					
				OnColumnChanging(AccountColumn.UpdateDte, this.entityData.UpdateDte);
				this.entityData.UpdateDte = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.UpdateDte, this.entityData.UpdateDte);
				OnPropertyChanged("UpdateDte");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveInd property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsActiveIndNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ActiveInd
		{
			get
			{
				return this.entityData.ActiveInd; 
			}
			
			set
			{
				if (this.entityData.ActiveInd == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ActiveInd, this.entityData.ActiveInd);
				this.entityData.ActiveInd = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ActiveInd, this.entityData.ActiveInd);
				OnPropertyChanged("ActiveInd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Website property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Website
		{
			get
			{
				return this.entityData.Website; 
			}
			
			set
			{
				if (this.entityData.Website == value)
					return;
					
					
				OnColumnChanging(AccountColumn.Website, this.entityData.Website);
				this.entityData.Website = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Website, this.entityData.Website);
				OnPropertyChanged("Website");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Source property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Source
		{
			get
			{
				return this.entityData.Source; 
			}
			
			set
			{
				if (this.entityData.Source == value)
					return;
					
					
				OnColumnChanging(AccountColumn.Source, this.entityData.Source);
				this.entityData.Source = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Source, this.entityData.Source);
				OnPropertyChanged("Source");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferredBy property. 
		///		
		/// </summary>
		/// <value>This type is varbinary.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] ReferredBy
		{
			get
			{
				return this.entityData.ReferredBy; 
			}
			
			set
			{
				if (this.entityData.ReferredBy == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ReferredBy, this.entityData.ReferredBy);
				this.entityData.ReferredBy = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ReferredBy, this.entityData.ReferredBy);
				OnPropertyChanged("ReferredBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom1
		{
			get
			{
				return this.entityData.Custom1; 
			}
			
			set
			{
				if (this.entityData.Custom1 == value)
					return;
					
					
				OnColumnChanging(AccountColumn.Custom1, this.entityData.Custom1);
				this.entityData.Custom1 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Custom1, this.entityData.Custom1);
				OnPropertyChanged("Custom1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom2
		{
			get
			{
				return this.entityData.Custom2; 
			}
			
			set
			{
				if (this.entityData.Custom2 == value)
					return;
					
					
				OnColumnChanging(AccountColumn.Custom2, this.entityData.Custom2);
				this.entityData.Custom2 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Custom2, this.entityData.Custom2);
				OnPropertyChanged("Custom2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custom3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.String Custom3
		{
			get
			{
				return this.entityData.Custom3; 
			}
			
			set
			{
				if (this.entityData.Custom3 == value)
					return;
					
					
				OnColumnChanging(AccountColumn.Custom3, this.entityData.Custom3);
				this.entityData.Custom3 = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.Custom3, this.entityData.Custom3);
				OnPropertyChanged("Custom3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactTemperatureID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContactTemperatureIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContactTemperatureID
		{
			get
			{
				return this.entityData.ContactTemperatureID; 
			}
			
			set
			{
				if (this.entityData.ContactTemperatureID == value)
					return;
					
					
				OnColumnChanging(AccountColumn.ContactTemperatureID, this.entityData.ContactTemperatureID);
				this.entityData.ContactTemperatureID = value;
				if (this.EntityState == EntityState.Unchanged)
				{
					this.EntityState = EntityState.Changed;
				}
				OnColumnChanged(AccountColumn.ContactTemperatureID, this.entityData.ContactTemperatureID);
				OnPropertyChanged("ContactTemperatureID");
			}
		}
		

		#region Source Foreign Key Property
				
		private Portal _portalIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Portal"/>.
		/// </summary>
		/// <value>The source Portal for PortalID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Portal PortalIDSource
      	{
            get { return this._portalIDSource; }
            set { this._portalIDSource = value; }
      	}
		private Account _parentAccountIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Account"/>.
		/// </summary>
		/// <value>The source Account for ParentAccountID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Account ParentAccountIDSource
      	{
            get { return this._parentAccountIDSource; }
            set { this._parentAccountIDSource = value; }
      	}
		private AccountType _accountTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccountType"/>.
		/// </summary>
		/// <value>The source AccountType for AccountTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual AccountType AccountTypeIDSource
      	{
            get { return this._accountTypeIDSource; }
            set { this._accountTypeIDSource = value; }
      	}
		private Profile _profileIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Profile"/>.
		/// </summary>
		/// <value>The source Profile for ProfileID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual Profile ProfileIDSource
      	{
            get { return this._profileIDSource; }
            set { this._profileIDSource = value; }
      	}
		private ContactTemperature _contactTemperatureIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ContactTemperature"/>.
		/// </summary>
		/// <value>The source ContactTemperature for ContactTemperatureID.</value>
        [XmlIgnore()]
		[Browsable(false), BindableAttribute()]
		public virtual ContactTemperature ContactTemperatureIDSource
      	{
            get { return this._contactTemperatureIDSource; }
            set { this._contactTemperatureIDSource = value; }
      	}
		#endregion
			
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZNodeAccount"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AccountID", "ParentAccountID", "PortalID", "UserID", "ExternalAccountNo", "CompanyName", "AccountTypeID", "ProfileID", "AccountProfileCode", "SubAccountLimit", "BillingFirstName", "BillingLastName", "BillingCompanyName", "BillingStreet", "BillingStreet1", "BillingCity", "BillingStateCode", "BillingPostalCode", "BillingCountryCode", "BillingPhoneNumber", "BillingEmailID", "ShipFirstName", "ShipLastName", "ShipCompanyName", "ShipStreet", "ShipStreet1", "ShipCity", "ShipStateCode", "ShipPostalCode", "ShipCountryCode", "ShipEmailID", "ShipPhoneNumber", "Description", "CreateUser", "CreateDte", "UpdateUser", "UpdateDte", "ActiveInd", "Website", "Source", "ReferredBy", "Custom1", "Custom2", "Custom3", "ContactTemperatureID"};
			}
		}
		#endregion 
		
	
		/// <summary>
		///	Holds a collection of Order objects
		///	which are related to this object through the relation FK_SC_Order_Account
		/// </summary>	
		[BindableAttribute()]
		public TList<Order> OrderCollection
		{
			get { return entityData.OrderCollection; }
			set { entityData.OrderCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Case objects
		///	which are related to this object through the relation FK_SC_Case_SC_Account
		/// </summary>	
		[BindableAttribute()]
		public TList<Case> CaseCollectionByAccountID
		{
			get { return entityData.CaseCollectionByAccountID; }
			set { entityData.CaseCollectionByAccountID = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Note objects
		///	which are related to this object through the relation FK_SC_Note_SC_Account
		/// </summary>	
		[BindableAttribute()]
		public TList<Note> NoteCollection
		{
			get { return entityData.NoteCollection; }
			set { entityData.NoteCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Case objects
		///	which are related to this object through the relation FK_SC_Case_SC_Account1
		/// </summary>	
		[BindableAttribute()]
		public TList<Case> CaseCollectionByOwnerAccountID
		{
			get { return entityData.CaseCollectionByOwnerAccountID; }
			set { entityData.CaseCollectionByOwnerAccountID = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Account objects
		///	which are related to this object through the relation FK_Account_Account
		/// </summary>	
		[BindableAttribute()]
		public TList<Account> AccountCollection
		{
			get { return entityData.AccountCollection; }
			set { entityData.AccountCollection = value; }	
		}
		
		#endregion
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Account) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Account>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Account);
	        }
	    }


		#endregion
		
		#region Methods	
			
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();
		}	
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Account Entity 
		///</summary>
		public virtual Account Copy()
		{
			//shallow copy entity
			Account copy = new Account();
			copy.AccountID = this.AccountID;
			copy.ParentAccountID = this.ParentAccountID;
			copy.PortalID = this.PortalID;
			copy.UserID = this.UserID;
			copy.ExternalAccountNo = this.ExternalAccountNo;
			copy.CompanyName = this.CompanyName;
			copy.AccountTypeID = this.AccountTypeID;
			copy.ProfileID = this.ProfileID;
			copy.AccountProfileCode = this.AccountProfileCode;
			copy.SubAccountLimit = this.SubAccountLimit;
			copy.BillingFirstName = this.BillingFirstName;
			copy.BillingLastName = this.BillingLastName;
			copy.BillingCompanyName = this.BillingCompanyName;
			copy.BillingStreet = this.BillingStreet;
			copy.BillingStreet1 = this.BillingStreet1;
			copy.BillingCity = this.BillingCity;
			copy.BillingStateCode = this.BillingStateCode;
			copy.BillingPostalCode = this.BillingPostalCode;
			copy.BillingCountryCode = this.BillingCountryCode;
			copy.BillingPhoneNumber = this.BillingPhoneNumber;
			copy.BillingEmailID = this.BillingEmailID;
			copy.ShipFirstName = this.ShipFirstName;
			copy.ShipLastName = this.ShipLastName;
			copy.ShipCompanyName = this.ShipCompanyName;
			copy.ShipStreet = this.ShipStreet;
			copy.ShipStreet1 = this.ShipStreet1;
			copy.ShipCity = this.ShipCity;
			copy.ShipStateCode = this.ShipStateCode;
			copy.ShipPostalCode = this.ShipPostalCode;
			copy.ShipCountryCode = this.ShipCountryCode;
			copy.ShipEmailID = this.ShipEmailID;
			copy.ShipPhoneNumber = this.ShipPhoneNumber;
			copy.Description = this.Description;
			copy.CreateUser = this.CreateUser;
			copy.CreateDte = this.CreateDte;
			copy.UpdateUser = this.UpdateUser;
			copy.UpdateDte = this.UpdateDte;
			copy.ActiveInd = this.ActiveInd;
			copy.Website = this.Website;
			copy.Source = this.Source;
			copy.ReferredBy = this.ReferredBy;
			copy.Custom1 = this.Custom1;
			copy.Custom2 = this.Custom2;
			copy.Custom3 = this.Custom3;
			copy.ContactTemperatureID = this.ContactTemperatureID;
					
			copy.AcceptChanges();
			return (Account)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Account Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Account DeepCopy()
		{
			return EntityHelper.Clone<Account>(this as Account);	
		}
		#endregion
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccountBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AccountBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AccountBase Object1, AccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AccountID != Object2.AccountID)
				equal = false;
			if ( Object1.ParentAccountID != null && Object2.ParentAccountID != null )
			{
				if (Object1.ParentAccountID != Object2.ParentAccountID)
					equal = false;
			}
			else if (Object1.ParentAccountID == null ^ Object2.ParentAccountID == null )
			{
				equal = false;
			}
			if ( Object1.PortalID != null && Object2.PortalID != null )
			{
				if (Object1.PortalID != Object2.PortalID)
					equal = false;
			}
			else if (Object1.PortalID == null ^ Object2.PortalID == null )
			{
				equal = false;
			}
			if ( Object1.UserID != null && Object2.UserID != null )
			{
				if (Object1.UserID != Object2.UserID)
					equal = false;
			}
			else if (Object1.UserID == null ^ Object2.UserID == null )
			{
				equal = false;
			}
			if ( Object1.ExternalAccountNo != null && Object2.ExternalAccountNo != null )
			{
				if (Object1.ExternalAccountNo != Object2.ExternalAccountNo)
					equal = false;
			}
			else if (Object1.ExternalAccountNo == null ^ Object2.ExternalAccountNo == null )
			{
				equal = false;
			}
			if ( Object1.CompanyName != null && Object2.CompanyName != null )
			{
				if (Object1.CompanyName != Object2.CompanyName)
					equal = false;
			}
			else if (Object1.CompanyName == null ^ Object2.CompanyName == null )
			{
				equal = false;
			}
			if ( Object1.AccountTypeID != null && Object2.AccountTypeID != null )
			{
				if (Object1.AccountTypeID != Object2.AccountTypeID)
					equal = false;
			}
			else if (Object1.AccountTypeID == null ^ Object2.AccountTypeID == null )
			{
				equal = false;
			}
			if ( Object1.ProfileID != null && Object2.ProfileID != null )
			{
				if (Object1.ProfileID != Object2.ProfileID)
					equal = false;
			}
			else if (Object1.ProfileID == null ^ Object2.ProfileID == null )
			{
				equal = false;
			}
			if ( Object1.AccountProfileCode != null && Object2.AccountProfileCode != null )
			{
				if (Object1.AccountProfileCode != Object2.AccountProfileCode)
					equal = false;
			}
			else if (Object1.AccountProfileCode == null ^ Object2.AccountProfileCode == null )
			{
				equal = false;
			}
			if ( Object1.SubAccountLimit != null && Object2.SubAccountLimit != null )
			{
				if (Object1.SubAccountLimit != Object2.SubAccountLimit)
					equal = false;
			}
			else if (Object1.SubAccountLimit == null ^ Object2.SubAccountLimit == null )
			{
				equal = false;
			}
			if ( Object1.BillingFirstName != null && Object2.BillingFirstName != null )
			{
				if (Object1.BillingFirstName != Object2.BillingFirstName)
					equal = false;
			}
			else if (Object1.BillingFirstName == null ^ Object2.BillingFirstName == null )
			{
				equal = false;
			}
			if ( Object1.BillingLastName != null && Object2.BillingLastName != null )
			{
				if (Object1.BillingLastName != Object2.BillingLastName)
					equal = false;
			}
			else if (Object1.BillingLastName == null ^ Object2.BillingLastName == null )
			{
				equal = false;
			}
			if ( Object1.BillingCompanyName != null && Object2.BillingCompanyName != null )
			{
				if (Object1.BillingCompanyName != Object2.BillingCompanyName)
					equal = false;
			}
			else if (Object1.BillingCompanyName == null ^ Object2.BillingCompanyName == null )
			{
				equal = false;
			}
			if ( Object1.BillingStreet != null && Object2.BillingStreet != null )
			{
				if (Object1.BillingStreet != Object2.BillingStreet)
					equal = false;
			}
			else if (Object1.BillingStreet == null ^ Object2.BillingStreet == null )
			{
				equal = false;
			}
			if ( Object1.BillingStreet1 != null && Object2.BillingStreet1 != null )
			{
				if (Object1.BillingStreet1 != Object2.BillingStreet1)
					equal = false;
			}
			else if (Object1.BillingStreet1 == null ^ Object2.BillingStreet1 == null )
			{
				equal = false;
			}
			if ( Object1.BillingCity != null && Object2.BillingCity != null )
			{
				if (Object1.BillingCity != Object2.BillingCity)
					equal = false;
			}
			else if (Object1.BillingCity == null ^ Object2.BillingCity == null )
			{
				equal = false;
			}
			if ( Object1.BillingStateCode != null && Object2.BillingStateCode != null )
			{
				if (Object1.BillingStateCode != Object2.BillingStateCode)
					equal = false;
			}
			else if (Object1.BillingStateCode == null ^ Object2.BillingStateCode == null )
			{
				equal = false;
			}
			if ( Object1.BillingPostalCode != null && Object2.BillingPostalCode != null )
			{
				if (Object1.BillingPostalCode != Object2.BillingPostalCode)
					equal = false;
			}
			else if (Object1.BillingPostalCode == null ^ Object2.BillingPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.BillingCountryCode != null && Object2.BillingCountryCode != null )
			{
				if (Object1.BillingCountryCode != Object2.BillingCountryCode)
					equal = false;
			}
			else if (Object1.BillingCountryCode == null ^ Object2.BillingCountryCode == null )
			{
				equal = false;
			}
			if ( Object1.BillingPhoneNumber != null && Object2.BillingPhoneNumber != null )
			{
				if (Object1.BillingPhoneNumber != Object2.BillingPhoneNumber)
					equal = false;
			}
			else if (Object1.BillingPhoneNumber == null ^ Object2.BillingPhoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.BillingEmailID != null && Object2.BillingEmailID != null )
			{
				if (Object1.BillingEmailID != Object2.BillingEmailID)
					equal = false;
			}
			else if (Object1.BillingEmailID == null ^ Object2.BillingEmailID == null )
			{
				equal = false;
			}
			if ( Object1.ShipFirstName != null && Object2.ShipFirstName != null )
			{
				if (Object1.ShipFirstName != Object2.ShipFirstName)
					equal = false;
			}
			else if (Object1.ShipFirstName == null ^ Object2.ShipFirstName == null )
			{
				equal = false;
			}
			if ( Object1.ShipLastName != null && Object2.ShipLastName != null )
			{
				if (Object1.ShipLastName != Object2.ShipLastName)
					equal = false;
			}
			else if (Object1.ShipLastName == null ^ Object2.ShipLastName == null )
			{
				equal = false;
			}
			if ( Object1.ShipCompanyName != null && Object2.ShipCompanyName != null )
			{
				if (Object1.ShipCompanyName != Object2.ShipCompanyName)
					equal = false;
			}
			else if (Object1.ShipCompanyName == null ^ Object2.ShipCompanyName == null )
			{
				equal = false;
			}
			if ( Object1.ShipStreet != null && Object2.ShipStreet != null )
			{
				if (Object1.ShipStreet != Object2.ShipStreet)
					equal = false;
			}
			else if (Object1.ShipStreet == null ^ Object2.ShipStreet == null )
			{
				equal = false;
			}
			if ( Object1.ShipStreet1 != null && Object2.ShipStreet1 != null )
			{
				if (Object1.ShipStreet1 != Object2.ShipStreet1)
					equal = false;
			}
			else if (Object1.ShipStreet1 == null ^ Object2.ShipStreet1 == null )
			{
				equal = false;
			}
			if ( Object1.ShipCity != null && Object2.ShipCity != null )
			{
				if (Object1.ShipCity != Object2.ShipCity)
					equal = false;
			}
			else if (Object1.ShipCity == null ^ Object2.ShipCity == null )
			{
				equal = false;
			}
			if ( Object1.ShipStateCode != null && Object2.ShipStateCode != null )
			{
				if (Object1.ShipStateCode != Object2.ShipStateCode)
					equal = false;
			}
			else if (Object1.ShipStateCode == null ^ Object2.ShipStateCode == null )
			{
				equal = false;
			}
			if ( Object1.ShipPostalCode != null && Object2.ShipPostalCode != null )
			{
				if (Object1.ShipPostalCode != Object2.ShipPostalCode)
					equal = false;
			}
			else if (Object1.ShipPostalCode == null ^ Object2.ShipPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.ShipCountryCode != null && Object2.ShipCountryCode != null )
			{
				if (Object1.ShipCountryCode != Object2.ShipCountryCode)
					equal = false;
			}
			else if (Object1.ShipCountryCode == null ^ Object2.ShipCountryCode == null )
			{
				equal = false;
			}
			if ( Object1.ShipEmailID != null && Object2.ShipEmailID != null )
			{
				if (Object1.ShipEmailID != Object2.ShipEmailID)
					equal = false;
			}
			else if (Object1.ShipEmailID == null ^ Object2.ShipEmailID == null )
			{
				equal = false;
			}
			if ( Object1.ShipPhoneNumber != null && Object2.ShipPhoneNumber != null )
			{
				if (Object1.ShipPhoneNumber != Object2.ShipPhoneNumber)
					equal = false;
			}
			else if (Object1.ShipPhoneNumber == null ^ Object2.ShipPhoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object2.CreateUser == null )
			{
				equal = false;
			}
			if (Object1.CreateDte != Object2.CreateDte)
				equal = false;
			if ( Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object2.UpdateUser == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDte != null && Object2.UpdateDte != null )
			{
				if (Object1.UpdateDte != Object2.UpdateDte)
					equal = false;
			}
			else if (Object1.UpdateDte == null ^ Object2.UpdateDte == null )
			{
				equal = false;
			}
			if ( Object1.ActiveInd != null && Object2.ActiveInd != null )
			{
				if (Object1.ActiveInd != Object2.ActiveInd)
					equal = false;
			}
			else if (Object1.ActiveInd == null ^ Object2.ActiveInd == null )
			{
				equal = false;
			}
			if ( Object1.Website != null && Object2.Website != null )
			{
				if (Object1.Website != Object2.Website)
					equal = false;
			}
			else if (Object1.Website == null ^ Object2.Website == null )
			{
				equal = false;
			}
			if ( Object1.Source != null && Object2.Source != null )
			{
				if (Object1.Source != Object2.Source)
					equal = false;
			}
			else if (Object1.Source == null ^ Object2.Source == null )
			{
				equal = false;
			}
			if ( Object1.ReferredBy != null && Object2.ReferredBy != null )
			{
				if (Object1.ReferredBy != Object2.ReferredBy)
					equal = false;
			}
			else if (Object1.ReferredBy == null ^ Object2.ReferredBy == null )
			{
				equal = false;
			}
			if ( Object1.Custom1 != null && Object2.Custom1 != null )
			{
				if (Object1.Custom1 != Object2.Custom1)
					equal = false;
			}
			else if (Object1.Custom1 == null ^ Object2.Custom1 == null )
			{
				equal = false;
			}
			if ( Object1.Custom2 != null && Object2.Custom2 != null )
			{
				if (Object1.Custom2 != Object2.Custom2)
					equal = false;
			}
			else if (Object1.Custom2 == null ^ Object2.Custom2 == null )
			{
				equal = false;
			}
			if ( Object1.Custom3 != null && Object2.Custom3 != null )
			{
				if (Object1.Custom3 != Object2.Custom3)
					equal = false;
			}
			else if (Object1.Custom3 == null ^ Object2.Custom3 == null )
			{
				equal = false;
			}
			if ( Object1.ContactTemperatureID != null && Object2.ContactTemperatureID != null )
			{
				if (Object1.ContactTemperatureID != Object2.ContactTemperatureID)
					equal = false;
			}
			else if (Object1.ContactTemperatureID == null ^ Object2.ContactTemperatureID == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((AccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static AccountComparer GetComparer()
        {
            return new AccountComparer();
        }
        */

        // Comparer delegates back to Account
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Account rhs, AccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccountColumn.AccountID:
            		return this.AccountID.CompareTo(rhs.AccountID);
            		
            		                 
            	
            	
            	case AccountColumn.ParentAccountID:
            		return this.ParentAccountID.Value.CompareTo(rhs.ParentAccountID.Value);
            		
            		                 
            	
            	
            	case AccountColumn.PortalID:
            		return this.PortalID.Value.CompareTo(rhs.PortalID.Value);
            		
            		                 
            	
            	
            	case AccountColumn.UserID:
            		return this.UserID.Value.CompareTo(rhs.UserID.Value);
            		
            		                 
            	
            	
            	case AccountColumn.ExternalAccountNo:
            		return this.ExternalAccountNo.CompareTo(rhs.ExternalAccountNo);
            		
            		                 
            	
            	
            	case AccountColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case AccountColumn.AccountTypeID:
            		return this.AccountTypeID.Value.CompareTo(rhs.AccountTypeID.Value);
            		
            		                 
            	
            	
            	case AccountColumn.ProfileID:
            		return this.ProfileID.Value.CompareTo(rhs.ProfileID.Value);
            		
            		                 
            	
            	
            	case AccountColumn.AccountProfileCode:
            		return this.AccountProfileCode.CompareTo(rhs.AccountProfileCode);
            		
            		                 
            	
            	
            	case AccountColumn.SubAccountLimit:
            		return this.SubAccountLimit.Value.CompareTo(rhs.SubAccountLimit.Value);
            		
            		                 
            	
            	
            	case AccountColumn.BillingFirstName:
            		return this.BillingFirstName.CompareTo(rhs.BillingFirstName);
            		
            		                 
            	
            	
            	case AccountColumn.BillingLastName:
            		return this.BillingLastName.CompareTo(rhs.BillingLastName);
            		
            		                 
            	
            	
            	case AccountColumn.BillingCompanyName:
            		return this.BillingCompanyName.CompareTo(rhs.BillingCompanyName);
            		
            		                 
            	
            	
            	case AccountColumn.BillingStreet:
            		return this.BillingStreet.CompareTo(rhs.BillingStreet);
            		
            		                 
            	
            	
            	case AccountColumn.BillingStreet1:
            		return this.BillingStreet1.CompareTo(rhs.BillingStreet1);
            		
            		                 
            	
            	
            	case AccountColumn.BillingCity:
            		return this.BillingCity.CompareTo(rhs.BillingCity);
            		
            		                 
            	
            	
            	case AccountColumn.BillingStateCode:
            		return this.BillingStateCode.CompareTo(rhs.BillingStateCode);
            		
            		                 
            	
            	
            	case AccountColumn.BillingPostalCode:
            		return this.BillingPostalCode.CompareTo(rhs.BillingPostalCode);
            		
            		                 
            	
            	
            	case AccountColumn.BillingCountryCode:
            		return this.BillingCountryCode.CompareTo(rhs.BillingCountryCode);
            		
            		                 
            	
            	
            	case AccountColumn.BillingPhoneNumber:
            		return this.BillingPhoneNumber.CompareTo(rhs.BillingPhoneNumber);
            		
            		                 
            	
            	
            	case AccountColumn.BillingEmailID:
            		return this.BillingEmailID.CompareTo(rhs.BillingEmailID);
            		
            		                 
            	
            	
            	case AccountColumn.ShipFirstName:
            		return this.ShipFirstName.CompareTo(rhs.ShipFirstName);
            		
            		                 
            	
            	
            	case AccountColumn.ShipLastName:
            		return this.ShipLastName.CompareTo(rhs.ShipLastName);
            		
            		                 
            	
            	
            	case AccountColumn.ShipCompanyName:
            		return this.ShipCompanyName.CompareTo(rhs.ShipCompanyName);
            		
            		                 
            	
            	
            	case AccountColumn.ShipStreet:
            		return this.ShipStreet.CompareTo(rhs.ShipStreet);
            		
            		                 
            	
            	
            	case AccountColumn.ShipStreet1:
            		return this.ShipStreet1.CompareTo(rhs.ShipStreet1);
            		
            		                 
            	
            	
            	case AccountColumn.ShipCity:
            		return this.ShipCity.CompareTo(rhs.ShipCity);
            		
            		                 
            	
            	
            	case AccountColumn.ShipStateCode:
            		return this.ShipStateCode.CompareTo(rhs.ShipStateCode);
            		
            		                 
            	
            	
            	case AccountColumn.ShipPostalCode:
            		return this.ShipPostalCode.CompareTo(rhs.ShipPostalCode);
            		
            		                 
            	
            	
            	case AccountColumn.ShipCountryCode:
            		return this.ShipCountryCode.CompareTo(rhs.ShipCountryCode);
            		
            		                 
            	
            	
            	case AccountColumn.ShipEmailID:
            		return this.ShipEmailID.CompareTo(rhs.ShipEmailID);
            		
            		                 
            	
            	
            	case AccountColumn.ShipPhoneNumber:
            		return this.ShipPhoneNumber.CompareTo(rhs.ShipPhoneNumber);
            		
            		                 
            	
            	
            	case AccountColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case AccountColumn.CreateUser:
            		return this.CreateUser.CompareTo(rhs.CreateUser);
            		
            		                 
            	
            	
            	case AccountColumn.CreateDte:
            		return this.CreateDte.CompareTo(rhs.CreateDte);
            		
            		                 
            	
            	
            	case AccountColumn.UpdateUser:
            		return this.UpdateUser.CompareTo(rhs.UpdateUser);
            		
            		                 
            	
            	
            	case AccountColumn.UpdateDte:
            		return this.UpdateDte.Value.CompareTo(rhs.UpdateDte.Value);
            		
            		                 
            	
            	
            	case AccountColumn.ActiveInd:
            		return this.ActiveInd.Value.CompareTo(rhs.ActiveInd.Value);
            		
            		                 
            	
            	
            	case AccountColumn.Website:
            		return this.Website.CompareTo(rhs.Website);
            		
            		                 
            	
            	
            	case AccountColumn.Source:
            		return this.Source.CompareTo(rhs.Source);
            		
            		                 
            	
            		                 
            	
            	
            	case AccountColumn.Custom1:
            		return this.Custom1.CompareTo(rhs.Custom1);
            		
            		                 
            	
            	
            	case AccountColumn.Custom2:
            		return this.Custom2.CompareTo(rhs.Custom2);
            		
            		                 
            	
            	
            	case AccountColumn.Custom3:
            		return this.Custom3.CompareTo(rhs.Custom3);
            		
            		                 
            	
            	
            	case AccountColumn.ContactTemperatureID:
            		return this.ContactTemperatureID.Value.CompareTo(rhs.ContactTemperatureID.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccountKey> Members
		
		// member variable for the EntityId property
		private AccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public AccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = @"Account" 
					+ this.AccountID.ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{46}{45}- AccountID: {0}{45}- ParentAccountID: {1}{45}- PortalID: {2}{45}- UserID: {3}{45}- ExternalAccountNo: {4}{45}- CompanyName: {5}{45}- AccountTypeID: {6}{45}- ProfileID: {7}{45}- AccountProfileCode: {8}{45}- SubAccountLimit: {9}{45}- BillingFirstName: {10}{45}- BillingLastName: {11}{45}- BillingCompanyName: {12}{45}- BillingStreet: {13}{45}- BillingStreet1: {14}{45}- BillingCity: {15}{45}- BillingStateCode: {16}{45}- BillingPostalCode: {17}{45}- BillingCountryCode: {18}{45}- BillingPhoneNumber: {19}{45}- BillingEmailID: {20}{45}- ShipFirstName: {21}{45}- ShipLastName: {22}{45}- ShipCompanyName: {23}{45}- ShipStreet: {24}{45}- ShipStreet1: {25}{45}- ShipCity: {26}{45}- ShipStateCode: {27}{45}- ShipPostalCode: {28}{45}- ShipCountryCode: {29}{45}- ShipEmailID: {30}{45}- ShipPhoneNumber: {31}{45}- Description: {32}{45}- CreateUser: {33}{45}- CreateDte: {34}{45}- UpdateUser: {35}{45}- UpdateDte: {36}{45}- ActiveInd: {37}{45}- Website: {38}{45}- Source: {39}{45}- ReferredBy: {40}{45}- Custom1: {41}{45}- Custom2: {42}{45}- Custom3: {43}{45}- ContactTemperatureID: {44}{45}", 
				this.AccountID,
				(this.ParentAccountID == null) ? string.Empty : this.ParentAccountID.ToString(),
				(this.PortalID == null) ? string.Empty : this.PortalID.ToString(),
				(this.UserID == null) ? string.Empty : this.UserID.ToString(),
				(this.ExternalAccountNo == null) ? string.Empty : this.ExternalAccountNo.ToString(),
				(this.CompanyName == null) ? string.Empty : this.CompanyName.ToString(),
				(this.AccountTypeID == null) ? string.Empty : this.AccountTypeID.ToString(),
				(this.ProfileID == null) ? string.Empty : this.ProfileID.ToString(),
				(this.AccountProfileCode == null) ? string.Empty : this.AccountProfileCode.ToString(),
				(this.SubAccountLimit == null) ? string.Empty : this.SubAccountLimit.ToString(),
				(this.BillingFirstName == null) ? string.Empty : this.BillingFirstName.ToString(),
				(this.BillingLastName == null) ? string.Empty : this.BillingLastName.ToString(),
				(this.BillingCompanyName == null) ? string.Empty : this.BillingCompanyName.ToString(),
				(this.BillingStreet == null) ? string.Empty : this.BillingStreet.ToString(),
				(this.BillingStreet1 == null) ? string.Empty : this.BillingStreet1.ToString(),
				(this.BillingCity == null) ? string.Empty : this.BillingCity.ToString(),
				(this.BillingStateCode == null) ? string.Empty : this.BillingStateCode.ToString(),
				(this.BillingPostalCode == null) ? string.Empty : this.BillingPostalCode.ToString(),
				(this.BillingCountryCode == null) ? string.Empty : this.BillingCountryCode.ToString(),
				(this.BillingPhoneNumber == null) ? string.Empty : this.BillingPhoneNumber.ToString(),
				(this.BillingEmailID == null) ? string.Empty : this.BillingEmailID.ToString(),
				(this.ShipFirstName == null) ? string.Empty : this.ShipFirstName.ToString(),
				(this.ShipLastName == null) ? string.Empty : this.ShipLastName.ToString(),
				(this.ShipCompanyName == null) ? string.Empty : this.ShipCompanyName.ToString(),
				(this.ShipStreet == null) ? string.Empty : this.ShipStreet.ToString(),
				(this.ShipStreet1 == null) ? string.Empty : this.ShipStreet1.ToString(),
				(this.ShipCity == null) ? string.Empty : this.ShipCity.ToString(),
				(this.ShipStateCode == null) ? string.Empty : this.ShipStateCode.ToString(),
				(this.ShipPostalCode == null) ? string.Empty : this.ShipPostalCode.ToString(),
				(this.ShipCountryCode == null) ? string.Empty : this.ShipCountryCode.ToString(),
				(this.ShipEmailID == null) ? string.Empty : this.ShipEmailID.ToString(),
				(this.ShipPhoneNumber == null) ? string.Empty : this.ShipPhoneNumber.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
				this.CreateDte,
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
				(this.UpdateDte == null) ? string.Empty : this.UpdateDte.ToString(),
				(this.ActiveInd == null) ? string.Empty : this.ActiveInd.ToString(),
				(this.Website == null) ? string.Empty : this.Website.ToString(),
				(this.Source == null) ? string.Empty : this.Source.ToString(),
				(this.ReferredBy == null) ? string.Empty : this.ReferredBy.ToString(),
				(this.Custom1 == null) ? string.Empty : this.Custom1.ToString(),
				(this.Custom2 == null) ? string.Empty : this.Custom2.ToString(),
				(this.Custom3 == null) ? string.Empty : this.Custom3.ToString(),
				(this.ContactTemperatureID == null) ? string.Empty : this.ContactTemperatureID.ToString(),
				Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZNodeAccount' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal class AccountEntityData : ICloneable
	{
		#region Variable Declarations
		
		#region Primary key(s)
			/// <summary>			
			/// AccountID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ZNodeAccount"</remarks>
			public System.Int32 AccountID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ParentAccountID : 
		/// </summary>
		public System.Int32?		  ParentAccountID = (int)0;
		
		/// <summary>
		/// PortalID : 
		/// </summary>
		public System.Int32?		  PortalID = (int)0;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Guid?		  UserID = Guid.Empty;
		
		/// <summary>
		/// ExternalAccountNo : 
		/// </summary>
		public System.String		  ExternalAccountNo = string.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = string.Empty;
		
		/// <summary>
		/// AccountTypeID : 
		/// </summary>
		public System.Int32?		  AccountTypeID = (int)0;
		
		/// <summary>
		/// ProfileID : 
		/// </summary>
		public System.Int32?		  ProfileID = (int)0;
		
		/// <summary>
		/// AccountProfileCode : 
		/// </summary>
		public System.String		  AccountProfileCode = string.Empty;
		
		/// <summary>
		/// SubAccountLimit : 
		/// </summary>
		public System.Int32?		  SubAccountLimit = (int)0;
		
		/// <summary>
		/// BillingFirstName : 
		/// </summary>
		public System.String		  BillingFirstName = string.Empty;
		
		/// <summary>
		/// BillingLastName : 
		/// </summary>
		public System.String		  BillingLastName = string.Empty;
		
		/// <summary>
		/// BillingCompanyName : 
		/// </summary>
		public System.String		  BillingCompanyName = string.Empty;
		
		/// <summary>
		/// BillingStreet : 
		/// </summary>
		public System.String		  BillingStreet = string.Empty;
		
		/// <summary>
		/// BillingStreet1 : 
		/// </summary>
		public System.String		  BillingStreet1 = string.Empty;
		
		/// <summary>
		/// BillingCity : 
		/// </summary>
		public System.String		  BillingCity = string.Empty;
		
		/// <summary>
		/// BillingStateCode : 
		/// </summary>
		public System.String		  BillingStateCode = string.Empty;
		
		/// <summary>
		/// BillingPostalCode : 
		/// </summary>
		public System.String		  BillingPostalCode = string.Empty;
		
		/// <summary>
		/// BillingCountryCode : 
		/// </summary>
		public System.String		  BillingCountryCode = string.Empty;
		
		/// <summary>
		/// BillingPhoneNumber : 
		/// </summary>
		public System.String		  BillingPhoneNumber = string.Empty;
		
		/// <summary>
		/// BillingEmailID : 
		/// </summary>
		public System.String		  BillingEmailID = string.Empty;
		
		/// <summary>
		/// ShipFirstName : 
		/// </summary>
		public System.String		  ShipFirstName = string.Empty;
		
		/// <summary>
		/// ShipLastName : 
		/// </summary>
		public System.String		  ShipLastName = string.Empty;
		
		/// <summary>
		/// ShipCompanyName : 
		/// </summary>
		public System.String		  ShipCompanyName = string.Empty;
		
		/// <summary>
		/// ShipStreet : 
		/// </summary>
		public System.String		  ShipStreet = string.Empty;
		
		/// <summary>
		/// ShipStreet1 : 
		/// </summary>
		public System.String		  ShipStreet1 = string.Empty;
		
		/// <summary>
		/// ShipCity : 
		/// </summary>
		public System.String		  ShipCity = string.Empty;
		
		/// <summary>
		/// ShipStateCode : 
		/// </summary>
		public System.String		  ShipStateCode = string.Empty;
		
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		public System.String		  ShipPostalCode = string.Empty;
		
		/// <summary>
		/// ShipCountryCode : 
		/// </summary>
		public System.String		  ShipCountryCode = string.Empty;
		
		/// <summary>
		/// ShipEmailID : 
		/// </summary>
		public System.String		  ShipEmailID = string.Empty;
		
		/// <summary>
		/// ShipPhoneNumber : 
		/// </summary>
		public System.String		  ShipPhoneNumber = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = string.Empty;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		public System.String		  CreateUser = string.Empty;
		
		/// <summary>
		/// CreateDte : 
		/// </summary>
		public System.DateTime		  CreateDte = DateTime.MinValue;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		public System.String		  UpdateUser = string.Empty;
		
		/// <summary>
		/// UpdateDte : 
		/// </summary>
		public System.DateTime?		  UpdateDte = DateTime.MinValue;
		
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		public System.Boolean?		  ActiveInd = false;
		
		/// <summary>
		/// Website : 
		/// </summary>
		public System.String		  Website = string.Empty;
		
		/// <summary>
		/// Source : 
		/// </summary>
		public System.String		  Source = string.Empty;
		
		/// <summary>
		/// ReferredBy : 
		/// </summary>
		public System.Byte[]		  ReferredBy = new byte[] {};
		
		/// <summary>
		/// Custom1 : 
		/// </summary>
		public System.String		  Custom1 = string.Empty;
		
		/// <summary>
		/// Custom2 : 
		/// </summary>
		public System.String		  Custom2 = string.Empty;
		
		/// <summary>
		/// Custom3 : 
		/// </summary>
		public System.String		  Custom3 = string.Empty;
		
		/// <summary>
		/// ContactTemperatureID : 
		/// </summary>
		public System.Int32?		  ContactTemperatureID = (int)0;
		#endregion
			
		#endregion Variable Declarations
		
		#region Clone
		public Object Clone()
		{
			AccountEntityData _tmp = new AccountEntityData();
						
			_tmp.AccountID = this.AccountID;
			
			_tmp.ParentAccountID = this.ParentAccountID;
			_tmp.PortalID = this.PortalID;
			_tmp.UserID = this.UserID;
			_tmp.ExternalAccountNo = this.ExternalAccountNo;
			_tmp.CompanyName = this.CompanyName;
			_tmp.AccountTypeID = this.AccountTypeID;
			_tmp.ProfileID = this.ProfileID;
			_tmp.AccountProfileCode = this.AccountProfileCode;
			_tmp.SubAccountLimit = this.SubAccountLimit;
			_tmp.BillingFirstName = this.BillingFirstName;
			_tmp.BillingLastName = this.BillingLastName;
			_tmp.BillingCompanyName = this.BillingCompanyName;
			_tmp.BillingStreet = this.BillingStreet;
			_tmp.BillingStreet1 = this.BillingStreet1;
			_tmp.BillingCity = this.BillingCity;
			_tmp.BillingStateCode = this.BillingStateCode;
			_tmp.BillingPostalCode = this.BillingPostalCode;
			_tmp.BillingCountryCode = this.BillingCountryCode;
			_tmp.BillingPhoneNumber = this.BillingPhoneNumber;
			_tmp.BillingEmailID = this.BillingEmailID;
			_tmp.ShipFirstName = this.ShipFirstName;
			_tmp.ShipLastName = this.ShipLastName;
			_tmp.ShipCompanyName = this.ShipCompanyName;
			_tmp.ShipStreet = this.ShipStreet;
			_tmp.ShipStreet1 = this.ShipStreet1;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipStateCode = this.ShipStateCode;
			_tmp.ShipPostalCode = this.ShipPostalCode;
			_tmp.ShipCountryCode = this.ShipCountryCode;
			_tmp.ShipEmailID = this.ShipEmailID;
			_tmp.ShipPhoneNumber = this.ShipPhoneNumber;
			_tmp.Description = this.Description;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDte = this.CreateDte;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDte = this.UpdateDte;
			_tmp.ActiveInd = this.ActiveInd;
			_tmp.Website = this.Website;
			_tmp.Source = this.Source;
			_tmp.ReferredBy = this.ReferredBy;
			_tmp.Custom1 = this.Custom1;
			_tmp.Custom2 = this.Custom2;
			_tmp.Custom3 = this.Custom3;
			_tmp.ContactTemperatureID = this.ContactTemperatureID;
			
			return _tmp;
		}
		#endregion 
		
		#region Data Properties

		#region OrderCollection
		
		private TList<Order> orderAccountID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation orderAccountID
		/// </summary>	
		public TList<Order> OrderCollection
		{
			get
			{
				if (orderAccountID == null)
				{
				orderAccountID = new TList<Order>();
				}
	
				return orderAccountID;
			}
			set { orderAccountID = value; }
		}
		
		#endregion

		#region CaseCollectionByAccountID
		
		private TList<Case> @caseAccountID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation @caseAccountID
		/// </summary>	
		public TList<Case> CaseCollectionByAccountID
		{
			get
			{
				if (@caseAccountID == null)
				{
				@caseAccountID = new TList<Case>();
				}
	
				return @caseAccountID;
			}
			set { @caseAccountID = value; }
		}
		
		#endregion

		#region NoteCollection
		
		private TList<Note> noteAccountID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation noteAccountID
		/// </summary>	
		public TList<Note> NoteCollection
		{
			get
			{
				if (noteAccountID == null)
				{
				noteAccountID = new TList<Note>();
				}
	
				return noteAccountID;
			}
			set { noteAccountID = value; }
		}
		
		#endregion

		#region CaseCollectionByOwnerAccountID
		
		private TList<Case> @caseOwnerAccountID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation @caseOwnerAccountID
		/// </summary>	
		public TList<Case> CaseCollectionByOwnerAccountID
		{
			get
			{
				if (@caseOwnerAccountID == null)
				{
				@caseOwnerAccountID = new TList<Case>();
				}
	
				return @caseOwnerAccountID;
			}
			set { @caseOwnerAccountID = value; }
		}
		
		#endregion

		#region AccountCollection
		
		private TList<Account> accountParentAccountID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation accountParentAccountID
		/// </summary>	
		public TList<Account> AccountCollection
		{
			get
			{
				if (accountParentAccountID == null)
				{
				accountParentAccountID = new TList<Account>();
				}
	
				return accountParentAccountID;
			}
			set { accountParentAccountID = value; }
		}
		
		#endregion

		#endregion Data Properties

	}//End struct


		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ExternalAccountNo",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CompanyName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("AccountProfileCode",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingFirstName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingLastName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingCompanyName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingStreet",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingStreet1",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingCity",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingStateCode",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingPostalCode",10));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingCountryCode",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingPhoneNumber",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("BillingEmailID",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipFirstName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipLastName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCompanyName",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipStreet",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipStreet1",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCity",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipStateCode",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipPostalCode",10));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipCountryCode",2));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipEmailID",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("ShipPhoneNumber",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("CreateUser",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("UpdateUser",100));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Website",250));
			ValidationRules.AddRule(Validation.CommonRules.StringMaxLength,new Validation.CommonRules.MaxLengthRuleArgs("Source",100));
		}
   		#endregion
	
	} // End Class
	
	#region AccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccountComparer : System.Collections.Generic.IComparer<Account>
	{
		AccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccountComparer"/> class.
        /// </summary>
		public AccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccountComparer(AccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Account"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Account"/> to compare.</param>
        /// <param name="b">The second <c>Account</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Account a, Account b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Account entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Account a, Account b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Account"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey(AccountBase entity)
		{
			Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.accountID = entity.AccountID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey(System.Int32 accountID)
		{
			#region Init Properties

			this.accountID = accountID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AccountID property
		private System.Int32 accountID;
		
		/// <summary>
		/// Gets or sets the AccountID property.
		/// </summary>
		public System.Int32 AccountID
		{
			get { return accountID; }
			set
			{
				if ( Entity != null )
				{
					Entity.AccountID = value;
				}
				
				accountID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AccountID = ( values["AccountID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AccountID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AccountID", AccountID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AccountID: {0}{1}",
								AccountID,
								Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccountColumn Enum
	
	/// <summary>
	/// Enumerate the Account columns.
	/// </summary>
	[Serializable]
	public enum AccountColumn : int
	{
		/// <summary>
		/// AccountID : 
		/// </summary>
		[EnumTextValue("AccountID")]
		[ColumnEnum("AccountID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AccountID = 1,
		/// <summary>
		/// ParentAccountID : 
		/// </summary>
		[EnumTextValue("ParentAccountID")]
		[ColumnEnum("ParentAccountID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ParentAccountID = 2,
		/// <summary>
		/// PortalID : 
		/// </summary>
		[EnumTextValue("PortalID")]
		[ColumnEnum("PortalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PortalID = 3,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		UserID = 4,
		/// <summary>
		/// ExternalAccountNo : 
		/// </summary>
		[EnumTextValue("ExternalAccountNo")]
		[ColumnEnum("ExternalAccountNo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalAccountNo = 5,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		CompanyName = 6,
		/// <summary>
		/// AccountTypeID : 
		/// </summary>
		[EnumTextValue("AccountTypeID")]
		[ColumnEnum("AccountTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AccountTypeID = 7,
		/// <summary>
		/// ProfileID : 
		/// </summary>
		[EnumTextValue("ProfileID")]
		[ColumnEnum("ProfileID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProfileID = 8,
		/// <summary>
		/// AccountProfileCode : 
		/// </summary>
		[EnumTextValue("AccountProfileCode")]
		[ColumnEnum("AccountProfileCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		AccountProfileCode = 9,
		/// <summary>
		/// SubAccountLimit : 
		/// </summary>
		[EnumTextValue("SubAccountLimit")]
		[ColumnEnum("SubAccountLimit", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SubAccountLimit = 10,
		/// <summary>
		/// BillingFirstName : 
		/// </summary>
		[EnumTextValue("BillingFirstName")]
		[ColumnEnum("BillingFirstName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingFirstName = 11,
		/// <summary>
		/// BillingLastName : 
		/// </summary>
		[EnumTextValue("BillingLastName")]
		[ColumnEnum("BillingLastName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingLastName = 12,
		/// <summary>
		/// BillingCompanyName : 
		/// </summary>
		[EnumTextValue("BillingCompanyName")]
		[ColumnEnum("BillingCompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingCompanyName = 13,
		/// <summary>
		/// BillingStreet : 
		/// </summary>
		[EnumTextValue("BillingStreet")]
		[ColumnEnum("BillingStreet", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingStreet = 14,
		/// <summary>
		/// BillingStreet1 : 
		/// </summary>
		[EnumTextValue("BillingStreet1")]
		[ColumnEnum("BillingStreet1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingStreet1 = 15,
		/// <summary>
		/// BillingCity : 
		/// </summary>
		[EnumTextValue("BillingCity")]
		[ColumnEnum("BillingCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingCity = 16,
		/// <summary>
		/// BillingStateCode : 
		/// </summary>
		[EnumTextValue("BillingStateCode")]
		[ColumnEnum("BillingStateCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		BillingStateCode = 17,
		/// <summary>
		/// BillingPostalCode : 
		/// </summary>
		[EnumTextValue("BillingPostalCode")]
		[ColumnEnum("BillingPostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		BillingPostalCode = 18,
		/// <summary>
		/// BillingCountryCode : 
		/// </summary>
		[EnumTextValue("BillingCountryCode")]
		[ColumnEnum("BillingCountryCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		BillingCountryCode = 19,
		/// <summary>
		/// BillingPhoneNumber : 
		/// </summary>
		[EnumTextValue("BillingPhoneNumber")]
		[ColumnEnum("BillingPhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingPhoneNumber = 20,
		/// <summary>
		/// BillingEmailID : 
		/// </summary>
		[EnumTextValue("BillingEmailID")]
		[ColumnEnum("BillingEmailID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingEmailID = 21,
		/// <summary>
		/// ShipFirstName : 
		/// </summary>
		[EnumTextValue("ShipFirstName")]
		[ColumnEnum("ShipFirstName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipFirstName = 22,
		/// <summary>
		/// ShipLastName : 
		/// </summary>
		[EnumTextValue("ShipLastName")]
		[ColumnEnum("ShipLastName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipLastName = 23,
		/// <summary>
		/// ShipCompanyName : 
		/// </summary>
		[EnumTextValue("ShipCompanyName")]
		[ColumnEnum("ShipCompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipCompanyName = 24,
		/// <summary>
		/// ShipStreet : 
		/// </summary>
		[EnumTextValue("ShipStreet")]
		[ColumnEnum("ShipStreet", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipStreet = 25,
		/// <summary>
		/// ShipStreet1 : 
		/// </summary>
		[EnumTextValue("ShipStreet1")]
		[ColumnEnum("ShipStreet1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipStreet1 = 26,
		/// <summary>
		/// ShipCity : 
		/// </summary>
		[EnumTextValue("ShipCity")]
		[ColumnEnum("ShipCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipCity = 27,
		/// <summary>
		/// ShipStateCode : 
		/// </summary>
		[EnumTextValue("ShipStateCode")]
		[ColumnEnum("ShipStateCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		ShipStateCode = 28,
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		[EnumTextValue("ShipPostalCode")]
		[ColumnEnum("ShipPostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		ShipPostalCode = 29,
		/// <summary>
		/// ShipCountryCode : 
		/// </summary>
		[EnumTextValue("ShipCountryCode")]
		[ColumnEnum("ShipCountryCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		ShipCountryCode = 30,
		/// <summary>
		/// ShipEmailID : 
		/// </summary>
		[EnumTextValue("ShipEmailID")]
		[ColumnEnum("ShipEmailID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipEmailID = 31,
		/// <summary>
		/// ShipPhoneNumber : 
		/// </summary>
		[EnumTextValue("ShipPhoneNumber")]
		[ColumnEnum("ShipPhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ShipPhoneNumber = 32,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Description = 33,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		CreateUser = 34,
		/// <summary>
		/// CreateDte : 
		/// </summary>
		[EnumTextValue("CreateDte")]
		[ColumnEnum("CreateDte", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDte = 35,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("UpdateUser")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		UpdateUser = 36,
		/// <summary>
		/// UpdateDte : 
		/// </summary>
		[EnumTextValue("UpdateDte")]
		[ColumnEnum("UpdateDte", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDte = 37,
		/// <summary>
		/// ActiveInd : 
		/// </summary>
		[EnumTextValue("ActiveInd")]
		[ColumnEnum("ActiveInd", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ActiveInd = 38,
		/// <summary>
		/// Website : 
		/// </summary>
		[EnumTextValue("Website")]
		[ColumnEnum("Website", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 250)]
		Website = 39,
		/// <summary>
		/// Source : 
		/// </summary>
		[EnumTextValue("Source")]
		[ColumnEnum("Source", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Source = 40,
		/// <summary>
		/// ReferredBy : 
		/// </summary>
		[EnumTextValue("ReferredBy")]
		[ColumnEnum("ReferredBy", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		ReferredBy = 41,
		/// <summary>
		/// Custom1 : 
		/// </summary>
		[EnumTextValue("Custom1")]
		[ColumnEnum("Custom1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Custom1 = 42,
		/// <summary>
		/// Custom2 : 
		/// </summary>
		[EnumTextValue("Custom2")]
		[ColumnEnum("Custom2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Custom2 = 43,
		/// <summary>
		/// Custom3 : 
		/// </summary>
		[EnumTextValue("Custom3")]
		[ColumnEnum("Custom3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Custom3 = 44,
		/// <summary>
		/// ContactTemperatureID : 
		/// </summary>
		[EnumTextValue("ContactTemperatureID")]
		[ColumnEnum("ContactTemperatureID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContactTemperatureID = 45
	}//End enum

	#endregion AccountColumn Enum

} // end namespace
