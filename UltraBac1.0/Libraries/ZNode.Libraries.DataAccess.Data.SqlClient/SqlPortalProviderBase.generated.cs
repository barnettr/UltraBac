
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file SqlPortalProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using ZNode.Libraries.DataAccess.Entities;
using ZNode.Libraries.DataAccess.Data;
using ZNode.Libraries.DataAccess.Data.Bases;

#endregion

namespace ZNode.Libraries.DataAccess.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Portal"/> entity.
	///</summary>
	public partial class SqlPortalProviderBase : PortalProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlPortalProviderBase"/> instance.
		/// </summary>
		public SqlPortalProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlPortalProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlPortalProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="portalID">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 portalID)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, portalID);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Portal)
					,portalID);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Portal> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DomainName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StoreName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LogoPath", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UseSSL", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdminEmail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalesEmail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerServiceEmail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalesPhoneNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomerServicePhoneNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ImageNotAvailablePath", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaxCatalogDisplayColumns", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaxCatalogDisplayItems", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaxCatalogItemSmallWidth", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaxCatalogItemMediumWidth", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaxCatalogItemThumbnailWidth", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaxCatalogItemLargeWidth", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SMTPServer", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SMTPUserName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SMTPPassword", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BottomScriptBlock", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UPSUserName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UPSPassword", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UPSKey", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShippingOriginZipCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Theme", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShopByPriceMin", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShopByPriceMax", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShopByPriceIncrement", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FedExAccountNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FedExMeterNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FedExProductionKey", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FedExSecurityCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShippingOriginStateCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShippingOriginCountryCode", DbType.String, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("portalid ") || clause.Trim().StartsWith("portalid="))
				{
					database.SetParameterValue(commandWrapper, "@PortalID", 
						clause.Replace("portalid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("domainname ") || clause.Trim().StartsWith("domainname="))
				{
					database.SetParameterValue(commandWrapper, "@DomainName", 
						clause.Replace("domainname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyname ") || clause.Trim().StartsWith("companyname="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyName", 
						clause.Replace("companyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("storename ") || clause.Trim().StartsWith("storename="))
				{
					database.SetParameterValue(commandWrapper, "@StoreName", 
						clause.Replace("storename","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("logopath ") || clause.Trim().StartsWith("logopath="))
				{
					database.SetParameterValue(commandWrapper, "@LogoPath", 
						clause.Replace("logopath","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("usessl ") || clause.Trim().StartsWith("usessl="))
				{
					database.SetParameterValue(commandWrapper, "@UseSSL", 
						clause.Replace("usessl","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adminemail ") || clause.Trim().StartsWith("adminemail="))
				{
					database.SetParameterValue(commandWrapper, "@AdminEmail", 
						clause.Replace("adminemail","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salesemail ") || clause.Trim().StartsWith("salesemail="))
				{
					database.SetParameterValue(commandWrapper, "@SalesEmail", 
						clause.Replace("salesemail","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customerserviceemail ") || clause.Trim().StartsWith("customerserviceemail="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerServiceEmail", 
						clause.Replace("customerserviceemail","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salesphonenumber ") || clause.Trim().StartsWith("salesphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@SalesPhoneNumber", 
						clause.Replace("salesphonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customerservicephonenumber ") || clause.Trim().StartsWith("customerservicephonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@CustomerServicePhoneNumber", 
						clause.Replace("customerservicephonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("imagenotavailablepath ") || clause.Trim().StartsWith("imagenotavailablepath="))
				{
					database.SetParameterValue(commandWrapper, "@ImageNotAvailablePath", 
						clause.Replace("imagenotavailablepath","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maxcatalogdisplaycolumns ") || clause.Trim().StartsWith("maxcatalogdisplaycolumns="))
				{
					database.SetParameterValue(commandWrapper, "@MaxCatalogDisplayColumns", 
						clause.Replace("maxcatalogdisplaycolumns","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maxcatalogdisplayitems ") || clause.Trim().StartsWith("maxcatalogdisplayitems="))
				{
					database.SetParameterValue(commandWrapper, "@MaxCatalogDisplayItems", 
						clause.Replace("maxcatalogdisplayitems","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maxcatalogitemsmallwidth ") || clause.Trim().StartsWith("maxcatalogitemsmallwidth="))
				{
					database.SetParameterValue(commandWrapper, "@MaxCatalogItemSmallWidth", 
						clause.Replace("maxcatalogitemsmallwidth","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maxcatalogitemmediumwidth ") || clause.Trim().StartsWith("maxcatalogitemmediumwidth="))
				{
					database.SetParameterValue(commandWrapper, "@MaxCatalogItemMediumWidth", 
						clause.Replace("maxcatalogitemmediumwidth","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maxcatalogitemthumbnailwidth ") || clause.Trim().StartsWith("maxcatalogitemthumbnailwidth="))
				{
					database.SetParameterValue(commandWrapper, "@MaxCatalogItemThumbnailWidth", 
						clause.Replace("maxcatalogitemthumbnailwidth","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maxcatalogitemlargewidth ") || clause.Trim().StartsWith("maxcatalogitemlargewidth="))
				{
					database.SetParameterValue(commandWrapper, "@MaxCatalogItemLargeWidth", 
						clause.Replace("maxcatalogitemlargewidth","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("activeind ") || clause.Trim().StartsWith("activeind="))
				{
					database.SetParameterValue(commandWrapper, "@ActiveInd", 
						clause.Replace("activeind","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("smtpserver ") || clause.Trim().StartsWith("smtpserver="))
				{
					database.SetParameterValue(commandWrapper, "@SMTPServer", 
						clause.Replace("smtpserver","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("smtpusername ") || clause.Trim().StartsWith("smtpusername="))
				{
					database.SetParameterValue(commandWrapper, "@SMTPUserName", 
						clause.Replace("smtpusername","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("smtppassword ") || clause.Trim().StartsWith("smtppassword="))
				{
					database.SetParameterValue(commandWrapper, "@SMTPPassword", 
						clause.Replace("smtppassword","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bottomscriptblock ") || clause.Trim().StartsWith("bottomscriptblock="))
				{
					database.SetParameterValue(commandWrapper, "@BottomScriptBlock", 
						clause.Replace("bottomscriptblock","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("upsusername ") || clause.Trim().StartsWith("upsusername="))
				{
					database.SetParameterValue(commandWrapper, "@UPSUserName", 
						clause.Replace("upsusername","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("upspassword ") || clause.Trim().StartsWith("upspassword="))
				{
					database.SetParameterValue(commandWrapper, "@UPSPassword", 
						clause.Replace("upspassword","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("upskey ") || clause.Trim().StartsWith("upskey="))
				{
					database.SetParameterValue(commandWrapper, "@UPSKey", 
						clause.Replace("upskey","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippingoriginzipcode ") || clause.Trim().StartsWith("shippingoriginzipcode="))
				{
					database.SetParameterValue(commandWrapper, "@ShippingOriginZipCode", 
						clause.Replace("shippingoriginzipcode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("theme ") || clause.Trim().StartsWith("theme="))
				{
					database.SetParameterValue(commandWrapper, "@Theme", 
						clause.Replace("theme","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shopbypricemin ") || clause.Trim().StartsWith("shopbypricemin="))
				{
					database.SetParameterValue(commandWrapper, "@ShopByPriceMin", 
						clause.Replace("shopbypricemin","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shopbypricemax ") || clause.Trim().StartsWith("shopbypricemax="))
				{
					database.SetParameterValue(commandWrapper, "@ShopByPriceMax", 
						clause.Replace("shopbypricemax","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shopbypriceincrement ") || clause.Trim().StartsWith("shopbypriceincrement="))
				{
					database.SetParameterValue(commandWrapper, "@ShopByPriceIncrement", 
						clause.Replace("shopbypriceincrement","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fedexaccountnumber ") || clause.Trim().StartsWith("fedexaccountnumber="))
				{
					database.SetParameterValue(commandWrapper, "@FedExAccountNumber", 
						clause.Replace("fedexaccountnumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fedexmeternumber ") || clause.Trim().StartsWith("fedexmeternumber="))
				{
					database.SetParameterValue(commandWrapper, "@FedExMeterNumber", 
						clause.Replace("fedexmeternumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fedexproductionkey ") || clause.Trim().StartsWith("fedexproductionkey="))
				{
					database.SetParameterValue(commandWrapper, "@FedExProductionKey", 
						clause.Replace("fedexproductionkey","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fedexsecuritycode ") || clause.Trim().StartsWith("fedexsecuritycode="))
				{
					database.SetParameterValue(commandWrapper, "@FedExSecurityCode", 
						clause.Replace("fedexsecuritycode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippingoriginstatecode ") || clause.Trim().StartsWith("shippingoriginstatecode="))
				{
					database.SetParameterValue(commandWrapper, "@ShippingOriginStateCode", 
						clause.Replace("shippingoriginstatecode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippingorigincountrycode ") || clause.Trim().StartsWith("shippingorigincountrycode="))
				{
					database.SetParameterValue(commandWrapper, "@ShippingOriginCountryCode", 
						clause.Replace("shippingorigincountrycode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Portal> rows = new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Portal> Find(TransactionManager transactionManager, SqlFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_Find_Dynamic", typeof(PortalColumn), parameters, orderBy, start, pageLength);
			
			if ( parameters != null )
			{
				SqlFilterParameter param;

				for ( int i = 0; i < parameters.Count; i++ )
				{
					param = parameters[i];
					database.AddInParameter(commandWrapper, param.Name, param.DbType, param.Value);
				}
			}

			ZNode.Libraries.DataAccess.Entities.TList<Portal> rows = new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Portal> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Portal> rows = new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Portal objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Portal> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Portal> rows = new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByPortalID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Portals index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="portalID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.Portal"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.Portal GetByPortalID(TransactionManager transactionManager, System.Int32 portalID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_GetByPortalID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, portalID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Portal> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByActiveInd
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="activeInd"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Portal&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Portal> GetByActiveInd(TransactionManager transactionManager, System.Boolean activeInd, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_GetByActiveInd", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, activeInd);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Portal> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Portal>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Portal object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<ZNode.Libraries.DataAccess.Entities.Portal> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZNodePortal";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("PortalID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("DomainName", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("CompanyName", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("StoreName", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("LogoPath", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("UseSSL", typeof(System.Boolean));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("AdminEmail", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("SalesEmail", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("CustomerServiceEmail", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SalesPhoneNumber", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("CustomerServicePhoneNumber", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ImageNotAvailablePath", typeof(System.String));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("MaxCatalogDisplayColumns", typeof(System.Byte));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("MaxCatalogDisplayItems", typeof(System.Int32));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("MaxCatalogItemSmallWidth", typeof(System.Int32));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("MaxCatalogItemMediumWidth", typeof(System.Int32));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("MaxCatalogItemThumbnailWidth", typeof(System.Int32));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("MaxCatalogItemLargeWidth", typeof(System.Int32));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("ActiveInd", typeof(System.Boolean));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("SMTPServer", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("SMTPUserName", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("SMTPPassword", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("BottomScriptBlock", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("UPSUserName", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("UPSPassword", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("UPSKey", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ShippingOriginZipCode", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("Theme", typeof(System.String));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("ShopByPriceMin", typeof(System.Int32));
			col28.AllowDBNull = false;		
			DataColumn col29 = dataTable.Columns.Add("ShopByPriceMax", typeof(System.Int32));
			col29.AllowDBNull = false;		
			DataColumn col30 = dataTable.Columns.Add("ShopByPriceIncrement", typeof(System.Int32));
			col30.AllowDBNull = false;		
			DataColumn col31 = dataTable.Columns.Add("FedExAccountNumber", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("FedExMeterNumber", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("FedExProductionKey", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("FedExSecurityCode", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("ShippingOriginStateCode", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("ShippingOriginCountryCode", typeof(System.String));
			col36.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("PortalID", "PortalID");
			bulkCopy.ColumnMappings.Add("DomainName", "DomainName");
			bulkCopy.ColumnMappings.Add("CompanyName", "CompanyName");
			bulkCopy.ColumnMappings.Add("StoreName", "StoreName");
			bulkCopy.ColumnMappings.Add("LogoPath", "LogoPath");
			bulkCopy.ColumnMappings.Add("UseSSL", "UseSSL");
			bulkCopy.ColumnMappings.Add("AdminEmail", "AdminEmail");
			bulkCopy.ColumnMappings.Add("SalesEmail", "SalesEmail");
			bulkCopy.ColumnMappings.Add("CustomerServiceEmail", "CustomerServiceEmail");
			bulkCopy.ColumnMappings.Add("SalesPhoneNumber", "SalesPhoneNumber");
			bulkCopy.ColumnMappings.Add("CustomerServicePhoneNumber", "CustomerServicePhoneNumber");
			bulkCopy.ColumnMappings.Add("ImageNotAvailablePath", "ImageNotAvailablePath");
			bulkCopy.ColumnMappings.Add("MaxCatalogDisplayColumns", "MaxCatalogDisplayColumns");
			bulkCopy.ColumnMappings.Add("MaxCatalogDisplayItems", "MaxCatalogDisplayItems");
			bulkCopy.ColumnMappings.Add("MaxCatalogItemSmallWidth", "MaxCatalogItemSmallWidth");
			bulkCopy.ColumnMappings.Add("MaxCatalogItemMediumWidth", "MaxCatalogItemMediumWidth");
			bulkCopy.ColumnMappings.Add("MaxCatalogItemThumbnailWidth", "MaxCatalogItemThumbnailWidth");
			bulkCopy.ColumnMappings.Add("MaxCatalogItemLargeWidth", "MaxCatalogItemLargeWidth");
			bulkCopy.ColumnMappings.Add("ActiveInd", "ActiveInd");
			bulkCopy.ColumnMappings.Add("SMTPServer", "SMTPServer");
			bulkCopy.ColumnMappings.Add("SMTPUserName", "SMTPUserName");
			bulkCopy.ColumnMappings.Add("SMTPPassword", "SMTPPassword");
			bulkCopy.ColumnMappings.Add("BottomScriptBlock", "BottomScriptBlock");
			bulkCopy.ColumnMappings.Add("UPSUserName", "UPSUserName");
			bulkCopy.ColumnMappings.Add("UPSPassword", "UPSPassword");
			bulkCopy.ColumnMappings.Add("UPSKey", "UPSKey");
			bulkCopy.ColumnMappings.Add("ShippingOriginZipCode", "ShippingOriginZipCode");
			bulkCopy.ColumnMappings.Add("Theme", "Theme");
			bulkCopy.ColumnMappings.Add("ShopByPriceMin", "ShopByPriceMin");
			bulkCopy.ColumnMappings.Add("ShopByPriceMax", "ShopByPriceMax");
			bulkCopy.ColumnMappings.Add("ShopByPriceIncrement", "ShopByPriceIncrement");
			bulkCopy.ColumnMappings.Add("FedExAccountNumber", "FedExAccountNumber");
			bulkCopy.ColumnMappings.Add("FedExMeterNumber", "FedExMeterNumber");
			bulkCopy.ColumnMappings.Add("FedExProductionKey", "FedExProductionKey");
			bulkCopy.ColumnMappings.Add("FedExSecurityCode", "FedExSecurityCode");
			bulkCopy.ColumnMappings.Add("ShippingOriginStateCode", "ShippingOriginStateCode");
			bulkCopy.ColumnMappings.Add("ShippingOriginCountryCode", "ShippingOriginCountryCode");
			
			foreach(ZNode.Libraries.DataAccess.Entities.Portal entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["PortalID"] = entity.PortalID;
							
				
					row["DomainName"] = entity.DomainName;
							
				
					row["CompanyName"] = entity.CompanyName;
							
				
					row["StoreName"] = entity.StoreName;
							
				
					row["LogoPath"] = entity.LogoPath;
							
				
					row["UseSSL"] = entity.UseSSL;
							
				
					row["AdminEmail"] = entity.AdminEmail;
							
				
					row["SalesEmail"] = entity.SalesEmail;
							
				
					row["CustomerServiceEmail"] = entity.CustomerServiceEmail;
							
				
					row["SalesPhoneNumber"] = entity.SalesPhoneNumber;
							
				
					row["CustomerServicePhoneNumber"] = entity.CustomerServicePhoneNumber;
							
				
					row["ImageNotAvailablePath"] = entity.ImageNotAvailablePath;
							
				
					row["MaxCatalogDisplayColumns"] = entity.MaxCatalogDisplayColumns;
							
				
					row["MaxCatalogDisplayItems"] = entity.MaxCatalogDisplayItems;
							
				
					row["MaxCatalogItemSmallWidth"] = entity.MaxCatalogItemSmallWidth;
							
				
					row["MaxCatalogItemMediumWidth"] = entity.MaxCatalogItemMediumWidth;
							
				
					row["MaxCatalogItemThumbnailWidth"] = entity.MaxCatalogItemThumbnailWidth;
							
				
					row["MaxCatalogItemLargeWidth"] = entity.MaxCatalogItemLargeWidth;
							
				
					row["ActiveInd"] = entity.ActiveInd;
							
				
					row["SMTPServer"] = entity.SMTPServer;
							
				
					row["SMTPUserName"] = entity.SMTPUserName;
							
				
					row["SMTPPassword"] = entity.SMTPPassword;
							
				
					row["BottomScriptBlock"] = entity.BottomScriptBlock;
							
				
					row["UPSUserName"] = entity.UPSUserName;
							
				
					row["UPSPassword"] = entity.UPSPassword;
							
				
					row["UPSKey"] = entity.UPSKey;
							
				
					row["ShippingOriginZipCode"] = entity.ShippingOriginZipCode;
							
				
					row["Theme"] = entity.Theme;
							
				
					row["ShopByPriceMin"] = entity.ShopByPriceMin;
							
				
					row["ShopByPriceMax"] = entity.ShopByPriceMax;
							
				
					row["ShopByPriceIncrement"] = entity.ShopByPriceIncrement;
							
				
					row["FedExAccountNumber"] = entity.FedExAccountNumber;
							
				
					row["FedExMeterNumber"] = entity.FedExMeterNumber;
							
				
					row["FedExProductionKey"] = entity.FedExProductionKey;
							
				
					row["FedExSecurityCode"] = entity.FedExSecurityCode;
							
				
					row["ShippingOriginStateCode"] = entity.ShippingOriginStateCode;
							
				
					row["ShippingOriginCountryCode"] = entity.ShippingOriginCountryCode;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(ZNode.Libraries.DataAccess.Entities.Portal entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a ZNode.Libraries.DataAccess.Entities.Portal object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Portal object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Portal object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Portal entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@PortalID", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@DomainName", DbType.String, entity.DomainName );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.String, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@StoreName", DbType.String, entity.StoreName );
			database.AddInParameter(commandWrapper, "@LogoPath", DbType.String, entity.LogoPath );
			database.AddInParameter(commandWrapper, "@UseSSL", DbType.Boolean, entity.UseSSL );
			database.AddInParameter(commandWrapper, "@AdminEmail", DbType.String, entity.AdminEmail );
			database.AddInParameter(commandWrapper, "@SalesEmail", DbType.String, entity.SalesEmail );
			database.AddInParameter(commandWrapper, "@CustomerServiceEmail", DbType.String, entity.CustomerServiceEmail );
			database.AddInParameter(commandWrapper, "@SalesPhoneNumber", DbType.String, entity.SalesPhoneNumber );
			database.AddInParameter(commandWrapper, "@CustomerServicePhoneNumber", DbType.String, entity.CustomerServicePhoneNumber );
			database.AddInParameter(commandWrapper, "@ImageNotAvailablePath", DbType.String, entity.ImageNotAvailablePath );
			database.AddInParameter(commandWrapper, "@MaxCatalogDisplayColumns", DbType.Byte, entity.MaxCatalogDisplayColumns );
			database.AddInParameter(commandWrapper, "@MaxCatalogDisplayItems", DbType.Int32, entity.MaxCatalogDisplayItems );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemSmallWidth", DbType.Int32, entity.MaxCatalogItemSmallWidth );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemMediumWidth", DbType.Int32, entity.MaxCatalogItemMediumWidth );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemThumbnailWidth", DbType.Int32, entity.MaxCatalogItemThumbnailWidth );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemLargeWidth", DbType.Int32, entity.MaxCatalogItemLargeWidth );
			database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, entity.ActiveInd );
			database.AddInParameter(commandWrapper, "@SMTPServer", DbType.String, entity.SMTPServer );
			database.AddInParameter(commandWrapper, "@SMTPUserName", DbType.String, entity.SMTPUserName );
			database.AddInParameter(commandWrapper, "@SMTPPassword", DbType.String, entity.SMTPPassword );
			database.AddInParameter(commandWrapper, "@BottomScriptBlock", DbType.String, entity.BottomScriptBlock );
			database.AddInParameter(commandWrapper, "@UPSUserName", DbType.String, entity.UPSUserName );
			database.AddInParameter(commandWrapper, "@UPSPassword", DbType.String, entity.UPSPassword );
			database.AddInParameter(commandWrapper, "@UPSKey", DbType.String, entity.UPSKey );
			database.AddInParameter(commandWrapper, "@ShippingOriginZipCode", DbType.String, entity.ShippingOriginZipCode );
			database.AddInParameter(commandWrapper, "@Theme", DbType.String, entity.Theme );
			database.AddInParameter(commandWrapper, "@ShopByPriceMin", DbType.Int32, entity.ShopByPriceMin );
			database.AddInParameter(commandWrapper, "@ShopByPriceMax", DbType.Int32, entity.ShopByPriceMax );
			database.AddInParameter(commandWrapper, "@ShopByPriceIncrement", DbType.Int32, entity.ShopByPriceIncrement );
			database.AddInParameter(commandWrapper, "@FedExAccountNumber", DbType.String, entity.FedExAccountNumber );
			database.AddInParameter(commandWrapper, "@FedExMeterNumber", DbType.String, entity.FedExMeterNumber );
			database.AddInParameter(commandWrapper, "@FedExProductionKey", DbType.String, entity.FedExProductionKey );
			database.AddInParameter(commandWrapper, "@FedExSecurityCode", DbType.String, entity.FedExSecurityCode );
			database.AddInParameter(commandWrapper, "@ShippingOriginStateCode", DbType.String, entity.ShippingOriginStateCode );
			database.AddInParameter(commandWrapper, "@ShippingOriginCountryCode", DbType.String, entity.ShippingOriginCountryCode );
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.PortalID = (System.Int32) database.GetParameterValue(commandWrapper, "@PortalID");						
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Portal object to update.</param>
		/// <remarks>
		///		After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Portal object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Portal entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodePortal_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, entity.PortalID );
			database.AddInParameter(commandWrapper, "@DomainName", DbType.String, entity.DomainName );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.String, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@StoreName", DbType.String, entity.StoreName );
			database.AddInParameter(commandWrapper, "@LogoPath", DbType.String, entity.LogoPath );
			database.AddInParameter(commandWrapper, "@UseSSL", DbType.Boolean, entity.UseSSL );
			database.AddInParameter(commandWrapper, "@AdminEmail", DbType.String, entity.AdminEmail );
			database.AddInParameter(commandWrapper, "@SalesEmail", DbType.String, entity.SalesEmail );
			database.AddInParameter(commandWrapper, "@CustomerServiceEmail", DbType.String, entity.CustomerServiceEmail );
			database.AddInParameter(commandWrapper, "@SalesPhoneNumber", DbType.String, entity.SalesPhoneNumber );
			database.AddInParameter(commandWrapper, "@CustomerServicePhoneNumber", DbType.String, entity.CustomerServicePhoneNumber );
			database.AddInParameter(commandWrapper, "@ImageNotAvailablePath", DbType.String, entity.ImageNotAvailablePath );
			database.AddInParameter(commandWrapper, "@MaxCatalogDisplayColumns", DbType.Byte, entity.MaxCatalogDisplayColumns );
			database.AddInParameter(commandWrapper, "@MaxCatalogDisplayItems", DbType.Int32, entity.MaxCatalogDisplayItems );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemSmallWidth", DbType.Int32, entity.MaxCatalogItemSmallWidth );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemMediumWidth", DbType.Int32, entity.MaxCatalogItemMediumWidth );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemThumbnailWidth", DbType.Int32, entity.MaxCatalogItemThumbnailWidth );
			database.AddInParameter(commandWrapper, "@MaxCatalogItemLargeWidth", DbType.Int32, entity.MaxCatalogItemLargeWidth );
			database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, entity.ActiveInd );
			database.AddInParameter(commandWrapper, "@SMTPServer", DbType.String, entity.SMTPServer );
			database.AddInParameter(commandWrapper, "@SMTPUserName", DbType.String, entity.SMTPUserName );
			database.AddInParameter(commandWrapper, "@SMTPPassword", DbType.String, entity.SMTPPassword );
			database.AddInParameter(commandWrapper, "@BottomScriptBlock", DbType.String, entity.BottomScriptBlock );
			database.AddInParameter(commandWrapper, "@UPSUserName", DbType.String, entity.UPSUserName );
			database.AddInParameter(commandWrapper, "@UPSPassword", DbType.String, entity.UPSPassword );
			database.AddInParameter(commandWrapper, "@UPSKey", DbType.String, entity.UPSKey );
			database.AddInParameter(commandWrapper, "@ShippingOriginZipCode", DbType.String, entity.ShippingOriginZipCode );
			database.AddInParameter(commandWrapper, "@Theme", DbType.String, entity.Theme );
			database.AddInParameter(commandWrapper, "@ShopByPriceMin", DbType.Int32, entity.ShopByPriceMin );
			database.AddInParameter(commandWrapper, "@ShopByPriceMax", DbType.Int32, entity.ShopByPriceMax );
			database.AddInParameter(commandWrapper, "@ShopByPriceIncrement", DbType.Int32, entity.ShopByPriceIncrement );
			database.AddInParameter(commandWrapper, "@FedExAccountNumber", DbType.String, entity.FedExAccountNumber );
			database.AddInParameter(commandWrapper, "@FedExMeterNumber", DbType.String, entity.FedExMeterNumber );
			database.AddInParameter(commandWrapper, "@FedExProductionKey", DbType.String, entity.FedExProductionKey );
			database.AddInParameter(commandWrapper, "@FedExSecurityCode", DbType.String, entity.FedExSecurityCode );
			database.AddInParameter(commandWrapper, "@ShippingOriginStateCode", DbType.String, entity.ShippingOriginStateCode );
			database.AddInParameter(commandWrapper, "@ShippingOriginCountryCode", DbType.String, entity.ShippingOriginCountryCode );
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
