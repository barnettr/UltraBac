
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file SqlCaseProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using ZNode.Libraries.DataAccess.Entities;
using ZNode.Libraries.DataAccess.Data;
using ZNode.Libraries.DataAccess.Data.Bases;

#endregion

namespace ZNode.Libraries.DataAccess.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Case"/> entity.
	///</summary>
	public partial class SqlCaseProviderBase : CaseProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlCaseProviderBase"/> instance.
		/// </summary>
		public SqlCaseProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlCaseProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlCaseProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="caseID">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 caseID)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@CaseID", DbType.Int32, caseID);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Case)
					,caseID);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new ZNode.Libraries.DataAccess.Entities.TList<Case>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@CaseID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OwnerAccountID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CaseStatusID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CasePriorityID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CaseTypeID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CaseOrigin", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Title", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Description", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailID", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateDte", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateUser", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("caseid ") || clause.Trim().StartsWith("caseid="))
				{
					database.SetParameterValue(commandWrapper, "@CaseID", 
						clause.Replace("caseid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("portalid ") || clause.Trim().StartsWith("portalid="))
				{
					database.SetParameterValue(commandWrapper, "@PortalID", 
						clause.Replace("portalid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accountid ") || clause.Trim().StartsWith("accountid="))
				{
					database.SetParameterValue(commandWrapper, "@AccountID", 
						clause.Replace("accountid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("owneraccountid ") || clause.Trim().StartsWith("owneraccountid="))
				{
					database.SetParameterValue(commandWrapper, "@OwnerAccountID", 
						clause.Replace("owneraccountid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("casestatusid ") || clause.Trim().StartsWith("casestatusid="))
				{
					database.SetParameterValue(commandWrapper, "@CaseStatusID", 
						clause.Replace("casestatusid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("casepriorityid ") || clause.Trim().StartsWith("casepriorityid="))
				{
					database.SetParameterValue(commandWrapper, "@CasePriorityID", 
						clause.Replace("casepriorityid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("casetypeid ") || clause.Trim().StartsWith("casetypeid="))
				{
					database.SetParameterValue(commandWrapper, "@CaseTypeID", 
						clause.Replace("casetypeid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("caseorigin ") || clause.Trim().StartsWith("caseorigin="))
				{
					database.SetParameterValue(commandWrapper, "@CaseOrigin", 
						clause.Replace("caseorigin","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("title ") || clause.Trim().StartsWith("title="))
				{
					database.SetParameterValue(commandWrapper, "@Title", 
						clause.Replace("title","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("description ") || clause.Trim().StartsWith("description="))
				{
					database.SetParameterValue(commandWrapper, "@Description", 
						clause.Replace("description","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("firstname ") || clause.Trim().StartsWith("firstname="))
				{
					database.SetParameterValue(commandWrapper, "@FirstName", 
						clause.Replace("firstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastname ") || clause.Trim().StartsWith("lastname="))
				{
					database.SetParameterValue(commandWrapper, "@LastName", 
						clause.Replace("lastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyname ") || clause.Trim().StartsWith("companyname="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyName", 
						clause.Replace("companyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("emailid ") || clause.Trim().StartsWith("emailid="))
				{
					database.SetParameterValue(commandWrapper, "@EmailID", 
						clause.Replace("emailid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phonenumber ") || clause.Trim().StartsWith("phonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@PhoneNumber", 
						clause.Replace("phonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createdte ") || clause.Trim().StartsWith("createdte="))
				{
					database.SetParameterValue(commandWrapper, "@CreateDte", 
						clause.Replace("createdte","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createuser ") || clause.Trim().StartsWith("createuser="))
				{
					database.SetParameterValue(commandWrapper, "@CreateUser", 
						clause.Replace("createuser","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> Find(TransactionManager transactionManager, SqlFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_Find_Dynamic", typeof(CaseColumn), parameters, orderBy, start, pageLength);
			
			if ( parameters != null )
			{
				SqlFilterParameter param;

				for ( int i = 0; i < parameters.Count; i++ )
				{
					param = parameters[i];
					database.AddInParameter(commandWrapper, param.Name, param.DbType, param.Value);
				}
			}

			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByPortalID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Case_Portals key.
		///		FK_Case_Portals Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="portalID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByPortalID(TransactionManager transactionManager, System.Int32 portalID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByPortalID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, portalID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByAccountID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Case_SC_Account key.
		///		FK_SC_Case_SC_Account Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="accountID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByAccountID(TransactionManager transactionManager, System.Int32? accountID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByAccountID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, accountID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByCaseTypeID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Case_CaseType key.
		///		FK_Case_CaseType Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="caseTypeID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByCaseTypeID(TransactionManager transactionManager, System.Int32 caseTypeID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByCaseTypeID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CaseTypeID", DbType.Int32, caseTypeID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByCasePriorityID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Case_SC_CasePriority key.
		///		FK_SC_Case_SC_CasePriority Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="casePriorityID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Case objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByCasePriorityID(TransactionManager transactionManager, System.Int32 casePriorityID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByCasePriorityID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CasePriorityID", DbType.Int32, casePriorityID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> rows = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByCaseID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Case index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="caseID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.Case"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.Case GetByCaseID(TransactionManager transactionManager, System.Int32 caseID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByCaseID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CaseID", DbType.Int32, caseID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByAccountIDCaseTypeID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX4 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="accountID"></param>
		/// <param name="caseTypeID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Case&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByAccountIDCaseTypeID(TransactionManager transactionManager, System.Int32? accountID, System.Int32 caseTypeID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByAccountIDCaseTypeID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, accountID);
				database.AddInParameter(commandWrapper, "@CaseTypeID", DbType.Int32, caseTypeID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByOwnerAccountID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="ownerAccountID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Case&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByOwnerAccountID(TransactionManager transactionManager, System.Int32? ownerAccountID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByOwnerAccountID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OwnerAccountID", DbType.Int32, ownerAccountID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByCaseStatusID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX3 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="caseStatusID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Case&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByCaseStatusID(TransactionManager transactionManager, System.Int32 caseStatusID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByCaseStatusID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CaseStatusID", DbType.Int32, caseStatusID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByTitleFirstNameLastNameCompanyName
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX2 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="title"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="companyName"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Case&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Case> GetByTitleFirstNameLastNameCompanyName(TransactionManager transactionManager, System.String title, System.String firstName, System.String lastName, System.String companyName, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_GetByTitleFirstNameLastNameCompanyName", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Title", DbType.AnsiString, title);
				database.AddInParameter(commandWrapper, "@FirstName", DbType.AnsiString, firstName);
				database.AddInParameter(commandWrapper, "@LastName", DbType.AnsiString, lastName);
				database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, companyName);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Case> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Case>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Case object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<ZNode.Libraries.DataAccess.Entities.Case> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZNodeCase";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("CaseID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("PortalID", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("AccountID", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("OwnerAccountID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("CaseStatusID", typeof(System.Int32));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("CasePriorityID", typeof(System.Int32));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("CaseTypeID", typeof(System.Int32));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("CaseOrigin", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("Title", typeof(System.String));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("Description", typeof(System.String));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("FirstName", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("LastName", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("CompanyName", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("EmailID", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("PhoneNumber", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("CreateDte", typeof(System.DateTime));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("CreateUser", typeof(System.String));
			col16.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("CaseID", "CaseID");
			bulkCopy.ColumnMappings.Add("PortalID", "PortalID");
			bulkCopy.ColumnMappings.Add("AccountID", "AccountID");
			bulkCopy.ColumnMappings.Add("OwnerAccountID", "OwnerAccountID");
			bulkCopy.ColumnMappings.Add("CaseStatusID", "CaseStatusID");
			bulkCopy.ColumnMappings.Add("CasePriorityID", "CasePriorityID");
			bulkCopy.ColumnMappings.Add("CaseTypeID", "CaseTypeID");
			bulkCopy.ColumnMappings.Add("CaseOrigin", "CaseOrigin");
			bulkCopy.ColumnMappings.Add("Title", "Title");
			bulkCopy.ColumnMappings.Add("Description", "Description");
			bulkCopy.ColumnMappings.Add("FirstName", "FirstName");
			bulkCopy.ColumnMappings.Add("LastName", "LastName");
			bulkCopy.ColumnMappings.Add("CompanyName", "CompanyName");
			bulkCopy.ColumnMappings.Add("EmailID", "EmailID");
			bulkCopy.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
			bulkCopy.ColumnMappings.Add("CreateDte", "CreateDte");
			bulkCopy.ColumnMappings.Add("CreateUser", "CreateUser");
			
			foreach(ZNode.Libraries.DataAccess.Entities.Case entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["CaseID"] = entity.CaseID;
							
				
					row["PortalID"] = entity.PortalID;
							
				
					row["AccountID"] = entity.AccountID.HasValue ? (object) entity.AccountID  : System.DBNull.Value;
							
				
					row["OwnerAccountID"] = entity.OwnerAccountID.HasValue ? (object) entity.OwnerAccountID  : System.DBNull.Value;
							
				
					row["CaseStatusID"] = entity.CaseStatusID;
							
				
					row["CasePriorityID"] = entity.CasePriorityID;
							
				
					row["CaseTypeID"] = entity.CaseTypeID;
							
				
					row["CaseOrigin"] = entity.CaseOrigin;
							
				
					row["Title"] = entity.Title;
							
				
					row["Description"] = entity.Description;
							
				
					row["FirstName"] = entity.FirstName;
							
				
					row["LastName"] = entity.LastName;
							
				
					row["CompanyName"] = entity.CompanyName;
							
				
					row["EmailID"] = entity.EmailID;
							
				
					row["PhoneNumber"] = entity.PhoneNumber;
							
				
					row["CreateDte"] = entity.CreateDte;
							
				
					row["CreateUser"] = entity.CreateUser;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(ZNode.Libraries.DataAccess.Entities.Case entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a ZNode.Libraries.DataAccess.Entities.Case object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Case object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Case object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Case entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@CaseID", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, entity.PortalID );
			database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, (entity.AccountID.HasValue ? (object) entity.AccountID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OwnerAccountID", DbType.Int32, (entity.OwnerAccountID.HasValue ? (object) entity.OwnerAccountID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CaseStatusID", DbType.Int32, entity.CaseStatusID );
			database.AddInParameter(commandWrapper, "@CasePriorityID", DbType.Int32, entity.CasePriorityID );
			database.AddInParameter(commandWrapper, "@CaseTypeID", DbType.Int32, entity.CaseTypeID );
			database.AddInParameter(commandWrapper, "@CaseOrigin", DbType.AnsiString, entity.CaseOrigin );
			database.AddInParameter(commandWrapper, "@Title", DbType.AnsiString, entity.Title );
			database.AddInParameter(commandWrapper, "@Description", DbType.String, entity.Description );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.AnsiString, entity.FirstName );
			database.AddInParameter(commandWrapper, "@LastName", DbType.AnsiString, entity.LastName );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@EmailID", DbType.AnsiString, entity.EmailID );
			database.AddInParameter(commandWrapper, "@PhoneNumber", DbType.AnsiString, entity.PhoneNumber );
			database.AddInParameter(commandWrapper, "@CreateDte", DbType.DateTime, entity.CreateDte );
			database.AddInParameter(commandWrapper, "@CreateUser", DbType.AnsiString, entity.CreateUser );
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.CaseID = (System.Int32) database.GetParameterValue(commandWrapper, "@CaseID");						
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Case object to update.</param>
		/// <remarks>
		///		After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Case object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Case entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeCase_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@CaseID", DbType.Int32, entity.CaseID );
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, entity.PortalID );
			database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, (entity.AccountID.HasValue ? (object) entity.AccountID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OwnerAccountID", DbType.Int32, (entity.OwnerAccountID.HasValue ? (object) entity.OwnerAccountID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CaseStatusID", DbType.Int32, entity.CaseStatusID );
			database.AddInParameter(commandWrapper, "@CasePriorityID", DbType.Int32, entity.CasePriorityID );
			database.AddInParameter(commandWrapper, "@CaseTypeID", DbType.Int32, entity.CaseTypeID );
			database.AddInParameter(commandWrapper, "@CaseOrigin", DbType.AnsiString, entity.CaseOrigin );
			database.AddInParameter(commandWrapper, "@Title", DbType.AnsiString, entity.Title );
			database.AddInParameter(commandWrapper, "@Description", DbType.String, entity.Description );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.AnsiString, entity.FirstName );
			database.AddInParameter(commandWrapper, "@LastName", DbType.AnsiString, entity.LastName );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@EmailID", DbType.AnsiString, entity.EmailID );
			database.AddInParameter(commandWrapper, "@PhoneNumber", DbType.AnsiString, entity.PhoneNumber );
			database.AddInParameter(commandWrapper, "@CreateDte", DbType.DateTime, entity.CreateDte );
			database.AddInParameter(commandWrapper, "@CreateUser", DbType.AnsiString, entity.CreateUser );
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
