
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file SqlAccountProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using ZNode.Libraries.DataAccess.Entities;
using ZNode.Libraries.DataAccess.Data;
using ZNode.Libraries.DataAccess.Data.Bases;

#endregion

namespace ZNode.Libraries.DataAccess.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Account"/> entity.
	///</summary>
	public partial class SqlAccountProviderBase : AccountProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlAccountProviderBase"/> instance.
		/// </summary>
		public SqlAccountProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlAccountProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlAccountProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="accountID">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 accountID)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, accountID);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Account)
					,accountID);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new ZNode.Libraries.DataAccess.Entities.TList<Account>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ParentAccountID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UserID", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalAccountNo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccountTypeID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProfileID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccountProfileCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubAccountLimit", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingFirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingLastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStreet", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStreet1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStateCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCountryCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingEmailID", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipFirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipLastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipStreet", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipStreet1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipStateCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipPostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCountryCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipEmailID", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateUser", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreateDte", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UpdateUser", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UpdateDte", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Website", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Source", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReferredBy", DbType.Binary, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom2", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom3", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ContactTemperatureID", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("accountid ") || clause.Trim().StartsWith("accountid="))
				{
					database.SetParameterValue(commandWrapper, "@AccountID", 
						clause.Replace("accountid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("parentaccountid ") || clause.Trim().StartsWith("parentaccountid="))
				{
					database.SetParameterValue(commandWrapper, "@ParentAccountID", 
						clause.Replace("parentaccountid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("portalid ") || clause.Trim().StartsWith("portalid="))
				{
					database.SetParameterValue(commandWrapper, "@PortalID", 
						clause.Replace("portalid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("userid ") || clause.Trim().StartsWith("userid="))
				{
					database.SetParameterValue(commandWrapper, "@UserID", new Guid(
						clause.Replace("userid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("externalaccountno ") || clause.Trim().StartsWith("externalaccountno="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalAccountNo", 
						clause.Replace("externalaccountno","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyname ") || clause.Trim().StartsWith("companyname="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyName", 
						clause.Replace("companyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accounttypeid ") || clause.Trim().StartsWith("accounttypeid="))
				{
					database.SetParameterValue(commandWrapper, "@AccountTypeID", 
						clause.Replace("accounttypeid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("profileid ") || clause.Trim().StartsWith("profileid="))
				{
					database.SetParameterValue(commandWrapper, "@ProfileID", 
						clause.Replace("profileid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accountprofilecode ") || clause.Trim().StartsWith("accountprofilecode="))
				{
					database.SetParameterValue(commandWrapper, "@AccountProfileCode", 
						clause.Replace("accountprofilecode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("subaccountlimit ") || clause.Trim().StartsWith("subaccountlimit="))
				{
					database.SetParameterValue(commandWrapper, "@SubAccountLimit", 
						clause.Replace("subaccountlimit","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingfirstname ") || clause.Trim().StartsWith("billingfirstname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingFirstName", 
						clause.Replace("billingfirstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billinglastname ") || clause.Trim().StartsWith("billinglastname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingLastName", 
						clause.Replace("billinglastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcompanyname ") || clause.Trim().StartsWith("billingcompanyname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCompanyName", 
						clause.Replace("billingcompanyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstreet ") || clause.Trim().StartsWith("billingstreet="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStreet", 
						clause.Replace("billingstreet","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstreet1 ") || clause.Trim().StartsWith("billingstreet1="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStreet1", 
						clause.Replace("billingstreet1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcity ") || clause.Trim().StartsWith("billingcity="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCity", 
						clause.Replace("billingcity","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstatecode ") || clause.Trim().StartsWith("billingstatecode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStateCode", 
						clause.Replace("billingstatecode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingpostalcode ") || clause.Trim().StartsWith("billingpostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingPostalCode", 
						clause.Replace("billingpostalcode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcountrycode ") || clause.Trim().StartsWith("billingcountrycode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCountryCode", 
						clause.Replace("billingcountrycode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingphonenumber ") || clause.Trim().StartsWith("billingphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@BillingPhoneNumber", 
						clause.Replace("billingphonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingemailid ") || clause.Trim().StartsWith("billingemailid="))
				{
					database.SetParameterValue(commandWrapper, "@BillingEmailID", 
						clause.Replace("billingemailid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipfirstname ") || clause.Trim().StartsWith("shipfirstname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipFirstName", 
						clause.Replace("shipfirstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shiplastname ") || clause.Trim().StartsWith("shiplastname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipLastName", 
						clause.Replace("shiplastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcompanyname ") || clause.Trim().StartsWith("shipcompanyname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCompanyName", 
						clause.Replace("shipcompanyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstreet ") || clause.Trim().StartsWith("shipstreet="))
				{
					database.SetParameterValue(commandWrapper, "@ShipStreet", 
						clause.Replace("shipstreet","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstreet1 ") || clause.Trim().StartsWith("shipstreet1="))
				{
					database.SetParameterValue(commandWrapper, "@ShipStreet1", 
						clause.Replace("shipstreet1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcity ") || clause.Trim().StartsWith("shipcity="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCity", 
						clause.Replace("shipcity","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstatecode ") || clause.Trim().StartsWith("shipstatecode="))
				{
					database.SetParameterValue(commandWrapper, "@ShipStateCode", 
						clause.Replace("shipstatecode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippostalcode ") || clause.Trim().StartsWith("shippostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@ShipPostalCode", 
						clause.Replace("shippostalcode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcountrycode ") || clause.Trim().StartsWith("shipcountrycode="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCountryCode", 
						clause.Replace("shipcountrycode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipemailid ") || clause.Trim().StartsWith("shipemailid="))
				{
					database.SetParameterValue(commandWrapper, "@ShipEmailID", 
						clause.Replace("shipemailid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipphonenumber ") || clause.Trim().StartsWith("shipphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@ShipPhoneNumber", 
						clause.Replace("shipphonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("description ") || clause.Trim().StartsWith("description="))
				{
					database.SetParameterValue(commandWrapper, "@Description", 
						clause.Replace("description","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createuser ") || clause.Trim().StartsWith("createuser="))
				{
					database.SetParameterValue(commandWrapper, "@CreateUser", 
						clause.Replace("createuser","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createdte ") || clause.Trim().StartsWith("createdte="))
				{
					database.SetParameterValue(commandWrapper, "@CreateDte", 
						clause.Replace("createdte","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("updateuser ") || clause.Trim().StartsWith("updateuser="))
				{
					database.SetParameterValue(commandWrapper, "@UpdateUser", 
						clause.Replace("updateuser","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("updatedte ") || clause.Trim().StartsWith("updatedte="))
				{
					database.SetParameterValue(commandWrapper, "@UpdateDte", 
						clause.Replace("updatedte","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("activeind ") || clause.Trim().StartsWith("activeind="))
				{
					database.SetParameterValue(commandWrapper, "@ActiveInd", 
						clause.Replace("activeind","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("website ") || clause.Trim().StartsWith("website="))
				{
					database.SetParameterValue(commandWrapper, "@Website", 
						clause.Replace("website","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("source ") || clause.Trim().StartsWith("source="))
				{
					database.SetParameterValue(commandWrapper, "@Source", 
						clause.Replace("source","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("referredby ") || clause.Trim().StartsWith("referredby="))
				{
					database.SetParameterValue(commandWrapper, "@ReferredBy", 
						clause.Replace("referredby","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom1 ") || clause.Trim().StartsWith("custom1="))
				{
					database.SetParameterValue(commandWrapper, "@Custom1", 
						clause.Replace("custom1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom2 ") || clause.Trim().StartsWith("custom2="))
				{
					database.SetParameterValue(commandWrapper, "@Custom2", 
						clause.Replace("custom2","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom3 ") || clause.Trim().StartsWith("custom3="))
				{
					database.SetParameterValue(commandWrapper, "@Custom3", 
						clause.Replace("custom3","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("contacttemperatureid ") || clause.Trim().StartsWith("contacttemperatureid="))
				{
					database.SetParameterValue(commandWrapper, "@ContactTemperatureID", 
						clause.Replace("contacttemperatureid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> Find(TransactionManager transactionManager, SqlFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_Find_Dynamic", typeof(AccountColumn), parameters, orderBy, start, pageLength);
			
			if ( parameters != null )
			{
				SqlFilterParameter param;

				for ( int i = 0; i < parameters.Count; i++ )
				{
					param = parameters[i];
					database.AddInParameter(commandWrapper, param.Name, param.DbType, param.Value);
				}
			}

			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByPortalID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Account_Portals key.
		///		FK_Account_Portals Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="portalID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByPortalID(TransactionManager transactionManager, System.Int32? portalID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByPortalID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, portalID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByParentAccountID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Account_Account key.
		///		FK_Account_Account Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parentAccountID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByParentAccountID(TransactionManager transactionManager, System.Int32? parentAccountID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByParentAccountID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ParentAccountID", DbType.Int32, parentAccountID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByAccountTypeID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Account_AccountType key.
		///		FK_Account_AccountType Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="accountTypeID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByAccountTypeID(TransactionManager transactionManager, System.Int32? accountTypeID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByAccountTypeID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountTypeID", DbType.Int32, accountTypeID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByUserID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Account_aspnet_Users key.
		///		FK_Account_aspnet_Users Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="userID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByUserID(TransactionManager transactionManager, System.Guid? userID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByUserID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@UserID", DbType.Guid, userID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByProfileID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Account_SC_Profile key.
		///		FK_Account_SC_Profile Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="profileID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByProfileID(TransactionManager transactionManager, System.Int32? profileID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByProfileID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProfileID", DbType.Int32, profileID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByContactTemperatureID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ZNodeAccount_ZNodeContactTemperature key.
		///		FK_ZNodeAccount_ZNodeContactTemperature Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="contactTemperatureID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Account objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByContactTemperatureID(TransactionManager transactionManager, System.Int32? contactTemperatureID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByContactTemperatureID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ContactTemperatureID", DbType.Int32, contactTemperatureID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> rows = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAccountID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Account index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="accountID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.Account"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.Account GetByAccountID(TransactionManager transactionManager, System.Int32 accountID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByAccountID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, accountID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByCompanyName
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IN1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="companyName"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Account&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Account> GetByCompanyName(TransactionManager transactionManager, System.String companyName, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_GetByCompanyName", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, companyName);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Account> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Account>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Account object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<ZNode.Libraries.DataAccess.Entities.Account> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZNodeAccount";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("AccountID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ParentAccountID", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("PortalID", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("UserID", typeof(System.Guid));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("ExternalAccountNo", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("CompanyName", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("AccountTypeID", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ProfileID", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("AccountProfileCode", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SubAccountLimit", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("BillingFirstName", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("BillingLastName", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("BillingCompanyName", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("BillingStreet", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("BillingStreet1", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("BillingCity", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("BillingStateCode", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("BillingPostalCode", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("BillingCountryCode", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("BillingPhoneNumber", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("BillingEmailID", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ShipFirstName", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ShipLastName", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ShipCompanyName", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("ShipStreet", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("ShipStreet1", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ShipCity", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ShipStateCode", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("ShipPostalCode", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("ShipCountryCode", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("ShipEmailID", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("ShipPhoneNumber", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("Description", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("CreateUser", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("CreateDte", typeof(System.DateTime));
			col34.AllowDBNull = false;		
			DataColumn col35 = dataTable.Columns.Add("UpdateUser", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("UpdateDte", typeof(System.DateTime));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("ActiveInd", typeof(System.Boolean));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("Website", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("Source", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("ReferredBy", typeof(System.Byte[]));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("Custom1", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("Custom2", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("Custom3", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("ContactTemperatureID", typeof(System.Int32));
			col44.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("AccountID", "AccountID");
			bulkCopy.ColumnMappings.Add("ParentAccountID", "ParentAccountID");
			bulkCopy.ColumnMappings.Add("PortalID", "PortalID");
			bulkCopy.ColumnMappings.Add("UserID", "UserID");
			bulkCopy.ColumnMappings.Add("ExternalAccountNo", "ExternalAccountNo");
			bulkCopy.ColumnMappings.Add("CompanyName", "CompanyName");
			bulkCopy.ColumnMappings.Add("AccountTypeID", "AccountTypeID");
			bulkCopy.ColumnMappings.Add("ProfileID", "ProfileID");
			bulkCopy.ColumnMappings.Add("AccountProfileCode", "AccountProfileCode");
			bulkCopy.ColumnMappings.Add("SubAccountLimit", "SubAccountLimit");
			bulkCopy.ColumnMappings.Add("BillingFirstName", "BillingFirstName");
			bulkCopy.ColumnMappings.Add("BillingLastName", "BillingLastName");
			bulkCopy.ColumnMappings.Add("BillingCompanyName", "BillingCompanyName");
			bulkCopy.ColumnMappings.Add("BillingStreet", "BillingStreet");
			bulkCopy.ColumnMappings.Add("BillingStreet1", "BillingStreet1");
			bulkCopy.ColumnMappings.Add("BillingCity", "BillingCity");
			bulkCopy.ColumnMappings.Add("BillingStateCode", "BillingStateCode");
			bulkCopy.ColumnMappings.Add("BillingPostalCode", "BillingPostalCode");
			bulkCopy.ColumnMappings.Add("BillingCountryCode", "BillingCountryCode");
			bulkCopy.ColumnMappings.Add("BillingPhoneNumber", "BillingPhoneNumber");
			bulkCopy.ColumnMappings.Add("BillingEmailID", "BillingEmailID");
			bulkCopy.ColumnMappings.Add("ShipFirstName", "ShipFirstName");
			bulkCopy.ColumnMappings.Add("ShipLastName", "ShipLastName");
			bulkCopy.ColumnMappings.Add("ShipCompanyName", "ShipCompanyName");
			bulkCopy.ColumnMappings.Add("ShipStreet", "ShipStreet");
			bulkCopy.ColumnMappings.Add("ShipStreet1", "ShipStreet1");
			bulkCopy.ColumnMappings.Add("ShipCity", "ShipCity");
			bulkCopy.ColumnMappings.Add("ShipStateCode", "ShipStateCode");
			bulkCopy.ColumnMappings.Add("ShipPostalCode", "ShipPostalCode");
			bulkCopy.ColumnMappings.Add("ShipCountryCode", "ShipCountryCode");
			bulkCopy.ColumnMappings.Add("ShipEmailID", "ShipEmailID");
			bulkCopy.ColumnMappings.Add("ShipPhoneNumber", "ShipPhoneNumber");
			bulkCopy.ColumnMappings.Add("Description", "Description");
			bulkCopy.ColumnMappings.Add("CreateUser", "CreateUser");
			bulkCopy.ColumnMappings.Add("CreateDte", "CreateDte");
			bulkCopy.ColumnMappings.Add("UpdateUser", "UpdateUser");
			bulkCopy.ColumnMappings.Add("UpdateDte", "UpdateDte");
			bulkCopy.ColumnMappings.Add("ActiveInd", "ActiveInd");
			bulkCopy.ColumnMappings.Add("Website", "Website");
			bulkCopy.ColumnMappings.Add("Source", "Source");
			bulkCopy.ColumnMappings.Add("ReferredBy", "ReferredBy");
			bulkCopy.ColumnMappings.Add("Custom1", "Custom1");
			bulkCopy.ColumnMappings.Add("Custom2", "Custom2");
			bulkCopy.ColumnMappings.Add("Custom3", "Custom3");
			bulkCopy.ColumnMappings.Add("ContactTemperatureID", "ContactTemperatureID");
			
			foreach(ZNode.Libraries.DataAccess.Entities.Account entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["AccountID"] = entity.AccountID;
							
				
					row["ParentAccountID"] = entity.ParentAccountID.HasValue ? (object) entity.ParentAccountID  : System.DBNull.Value;
							
				
					row["PortalID"] = entity.PortalID.HasValue ? (object) entity.PortalID  : System.DBNull.Value;
							
				
					row["UserID"] = entity.UserID.HasValue ? (object) entity.UserID  : System.DBNull.Value;
							
				
					row["ExternalAccountNo"] = entity.ExternalAccountNo;
							
				
					row["CompanyName"] = entity.CompanyName;
							
				
					row["AccountTypeID"] = entity.AccountTypeID.HasValue ? (object) entity.AccountTypeID  : System.DBNull.Value;
							
				
					row["ProfileID"] = entity.ProfileID.HasValue ? (object) entity.ProfileID  : System.DBNull.Value;
							
				
					row["AccountProfileCode"] = entity.AccountProfileCode;
							
				
					row["SubAccountLimit"] = entity.SubAccountLimit.HasValue ? (object) entity.SubAccountLimit  : System.DBNull.Value;
							
				
					row["BillingFirstName"] = entity.BillingFirstName;
							
				
					row["BillingLastName"] = entity.BillingLastName;
							
				
					row["BillingCompanyName"] = entity.BillingCompanyName;
							
				
					row["BillingStreet"] = entity.BillingStreet;
							
				
					row["BillingStreet1"] = entity.BillingStreet1;
							
				
					row["BillingCity"] = entity.BillingCity;
							
				
					row["BillingStateCode"] = entity.BillingStateCode;
							
				
					row["BillingPostalCode"] = entity.BillingPostalCode;
							
				
					row["BillingCountryCode"] = entity.BillingCountryCode;
							
				
					row["BillingPhoneNumber"] = entity.BillingPhoneNumber;
							
				
					row["BillingEmailID"] = entity.BillingEmailID;
							
				
					row["ShipFirstName"] = entity.ShipFirstName;
							
				
					row["ShipLastName"] = entity.ShipLastName;
							
				
					row["ShipCompanyName"] = entity.ShipCompanyName;
							
				
					row["ShipStreet"] = entity.ShipStreet;
							
				
					row["ShipStreet1"] = entity.ShipStreet1;
							
				
					row["ShipCity"] = entity.ShipCity;
							
				
					row["ShipStateCode"] = entity.ShipStateCode;
							
				
					row["ShipPostalCode"] = entity.ShipPostalCode;
							
				
					row["ShipCountryCode"] = entity.ShipCountryCode;
							
				
					row["ShipEmailID"] = entity.ShipEmailID;
							
				
					row["ShipPhoneNumber"] = entity.ShipPhoneNumber;
							
				
					row["Description"] = entity.Description;
							
				
					row["CreateUser"] = entity.CreateUser;
							
				
					row["CreateDte"] = entity.CreateDte;
							
				
					row["UpdateUser"] = entity.UpdateUser;
							
				
					row["UpdateDte"] = entity.UpdateDte.HasValue ? (object) entity.UpdateDte  : System.DBNull.Value;
							
				
					row["ActiveInd"] = entity.ActiveInd.HasValue ? (object) entity.ActiveInd  : System.DBNull.Value;
							
				
					row["Website"] = entity.Website;
							
				
					row["Source"] = entity.Source;
							
				
					row["ReferredBy"] = entity.ReferredBy;
							
				
					row["Custom1"] = entity.Custom1;
							
				
					row["Custom2"] = entity.Custom2;
							
				
					row["Custom3"] = entity.Custom3;
							
				
					row["ContactTemperatureID"] = entity.ContactTemperatureID.HasValue ? (object) entity.ContactTemperatureID  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(ZNode.Libraries.DataAccess.Entities.Account entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a ZNode.Libraries.DataAccess.Entities.Account object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Account object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Account object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Account entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@AccountID", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@ParentAccountID", DbType.Int32, (entity.ParentAccountID.HasValue ? (object) entity.ParentAccountID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, (entity.PortalID.HasValue ? (object) entity.PortalID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UserID", DbType.Guid, (entity.UserID.HasValue ? (object) entity.UserID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExternalAccountNo", DbType.AnsiString, entity.ExternalAccountNo );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@AccountTypeID", DbType.Int32, (entity.AccountTypeID.HasValue ? (object) entity.AccountTypeID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProfileID", DbType.Int32, (entity.ProfileID.HasValue ? (object) entity.ProfileID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccountProfileCode", DbType.AnsiString, entity.AccountProfileCode );
			database.AddInParameter(commandWrapper, "@SubAccountLimit", DbType.Int32, (entity.SubAccountLimit.HasValue ? (object) entity.SubAccountLimit  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BillingFirstName", DbType.AnsiString, entity.BillingFirstName );
			database.AddInParameter(commandWrapper, "@BillingLastName", DbType.AnsiString, entity.BillingLastName );
			database.AddInParameter(commandWrapper, "@BillingCompanyName", DbType.AnsiString, entity.BillingCompanyName );
			database.AddInParameter(commandWrapper, "@BillingStreet", DbType.AnsiString, entity.BillingStreet );
			database.AddInParameter(commandWrapper, "@BillingStreet1", DbType.AnsiString, entity.BillingStreet1 );
			database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, entity.BillingCity );
			database.AddInParameter(commandWrapper, "@BillingStateCode", DbType.AnsiString, entity.BillingStateCode );
			database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, entity.BillingPostalCode );
			database.AddInParameter(commandWrapper, "@BillingCountryCode", DbType.AnsiString, entity.BillingCountryCode );
			database.AddInParameter(commandWrapper, "@BillingPhoneNumber", DbType.AnsiString, entity.BillingPhoneNumber );
			database.AddInParameter(commandWrapper, "@BillingEmailID", DbType.AnsiString, entity.BillingEmailID );
			database.AddInParameter(commandWrapper, "@ShipFirstName", DbType.AnsiString, entity.ShipFirstName );
			database.AddInParameter(commandWrapper, "@ShipLastName", DbType.AnsiString, entity.ShipLastName );
			database.AddInParameter(commandWrapper, "@ShipCompanyName", DbType.AnsiString, entity.ShipCompanyName );
			database.AddInParameter(commandWrapper, "@ShipStreet", DbType.AnsiString, entity.ShipStreet );
			database.AddInParameter(commandWrapper, "@ShipStreet1", DbType.AnsiString, entity.ShipStreet1 );
			database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, entity.ShipCity );
			database.AddInParameter(commandWrapper, "@ShipStateCode", DbType.AnsiString, entity.ShipStateCode );
			database.AddInParameter(commandWrapper, "@ShipPostalCode", DbType.AnsiString, entity.ShipPostalCode );
			database.AddInParameter(commandWrapper, "@ShipCountryCode", DbType.AnsiString, entity.ShipCountryCode );
			database.AddInParameter(commandWrapper, "@ShipEmailID", DbType.AnsiString, entity.ShipEmailID );
			database.AddInParameter(commandWrapper, "@ShipPhoneNumber", DbType.AnsiString, entity.ShipPhoneNumber );
			database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, entity.Description );
			database.AddInParameter(commandWrapper, "@CreateUser", DbType.AnsiString, entity.CreateUser );
			database.AddInParameter(commandWrapper, "@CreateDte", DbType.DateTime, entity.CreateDte );
			database.AddInParameter(commandWrapper, "@UpdateUser", DbType.AnsiString, entity.UpdateUser );
			database.AddInParameter(commandWrapper, "@UpdateDte", DbType.DateTime, (entity.UpdateDte.HasValue ? (object) entity.UpdateDte  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, (entity.ActiveInd.HasValue ? (object) entity.ActiveInd  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Website", DbType.AnsiString, entity.Website );
			database.AddInParameter(commandWrapper, "@Source", DbType.AnsiString, entity.Source );
			database.AddInParameter(commandWrapper, "@ReferredBy", DbType.Binary, entity.ReferredBy );
			database.AddInParameter(commandWrapper, "@Custom1", DbType.AnsiString, entity.Custom1 );
			database.AddInParameter(commandWrapper, "@Custom2", DbType.AnsiString, entity.Custom2 );
			database.AddInParameter(commandWrapper, "@Custom3", DbType.AnsiString, entity.Custom3 );
			database.AddInParameter(commandWrapper, "@ContactTemperatureID", DbType.Int32, (entity.ContactTemperatureID.HasValue ? (object) entity.ContactTemperatureID  : System.DBNull.Value));
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.AccountID = (System.Int32) database.GetParameterValue(commandWrapper, "@AccountID");						
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Account object to update.</param>
		/// <remarks>
		///		After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Account object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Account entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeAccount_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, entity.AccountID );
			database.AddInParameter(commandWrapper, "@ParentAccountID", DbType.Int32, (entity.ParentAccountID.HasValue ? (object) entity.ParentAccountID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, (entity.PortalID.HasValue ? (object) entity.PortalID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UserID", DbType.Guid, (entity.UserID.HasValue ? (object) entity.UserID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExternalAccountNo", DbType.AnsiString, entity.ExternalAccountNo );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@AccountTypeID", DbType.Int32, (entity.AccountTypeID.HasValue ? (object) entity.AccountTypeID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProfileID", DbType.Int32, (entity.ProfileID.HasValue ? (object) entity.ProfileID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccountProfileCode", DbType.AnsiString, entity.AccountProfileCode );
			database.AddInParameter(commandWrapper, "@SubAccountLimit", DbType.Int32, (entity.SubAccountLimit.HasValue ? (object) entity.SubAccountLimit : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BillingFirstName", DbType.AnsiString, entity.BillingFirstName );
			database.AddInParameter(commandWrapper, "@BillingLastName", DbType.AnsiString, entity.BillingLastName );
			database.AddInParameter(commandWrapper, "@BillingCompanyName", DbType.AnsiString, entity.BillingCompanyName );
			database.AddInParameter(commandWrapper, "@BillingStreet", DbType.AnsiString, entity.BillingStreet );
			database.AddInParameter(commandWrapper, "@BillingStreet1", DbType.AnsiString, entity.BillingStreet1 );
			database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, entity.BillingCity );
			database.AddInParameter(commandWrapper, "@BillingStateCode", DbType.AnsiString, entity.BillingStateCode );
			database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, entity.BillingPostalCode );
			database.AddInParameter(commandWrapper, "@BillingCountryCode", DbType.AnsiString, entity.BillingCountryCode );
			database.AddInParameter(commandWrapper, "@BillingPhoneNumber", DbType.AnsiString, entity.BillingPhoneNumber );
			database.AddInParameter(commandWrapper, "@BillingEmailID", DbType.AnsiString, entity.BillingEmailID );
			database.AddInParameter(commandWrapper, "@ShipFirstName", DbType.AnsiString, entity.ShipFirstName );
			database.AddInParameter(commandWrapper, "@ShipLastName", DbType.AnsiString, entity.ShipLastName );
			database.AddInParameter(commandWrapper, "@ShipCompanyName", DbType.AnsiString, entity.ShipCompanyName );
			database.AddInParameter(commandWrapper, "@ShipStreet", DbType.AnsiString, entity.ShipStreet );
			database.AddInParameter(commandWrapper, "@ShipStreet1", DbType.AnsiString, entity.ShipStreet1 );
			database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, entity.ShipCity );
			database.AddInParameter(commandWrapper, "@ShipStateCode", DbType.AnsiString, entity.ShipStateCode );
			database.AddInParameter(commandWrapper, "@ShipPostalCode", DbType.AnsiString, entity.ShipPostalCode );
			database.AddInParameter(commandWrapper, "@ShipCountryCode", DbType.AnsiString, entity.ShipCountryCode );
			database.AddInParameter(commandWrapper, "@ShipEmailID", DbType.AnsiString, entity.ShipEmailID );
			database.AddInParameter(commandWrapper, "@ShipPhoneNumber", DbType.AnsiString, entity.ShipPhoneNumber );
			database.AddInParameter(commandWrapper, "@Description", DbType.AnsiString, entity.Description );
			database.AddInParameter(commandWrapper, "@CreateUser", DbType.AnsiString, entity.CreateUser );
			database.AddInParameter(commandWrapper, "@CreateDte", DbType.DateTime, entity.CreateDte );
			database.AddInParameter(commandWrapper, "@UpdateUser", DbType.AnsiString, entity.UpdateUser );
			database.AddInParameter(commandWrapper, "@UpdateDte", DbType.DateTime, (entity.UpdateDte.HasValue ? (object) entity.UpdateDte : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, (entity.ActiveInd.HasValue ? (object) entity.ActiveInd : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Website", DbType.AnsiString, entity.Website );
			database.AddInParameter(commandWrapper, "@Source", DbType.AnsiString, entity.Source );
			database.AddInParameter(commandWrapper, "@ReferredBy", DbType.Binary, entity.ReferredBy );
			database.AddInParameter(commandWrapper, "@Custom1", DbType.AnsiString, entity.Custom1 );
			database.AddInParameter(commandWrapper, "@Custom2", DbType.AnsiString, entity.Custom2 );
			database.AddInParameter(commandWrapper, "@Custom3", DbType.AnsiString, entity.Custom3 );
			database.AddInParameter(commandWrapper, "@ContactTemperatureID", DbType.Int32, (entity.ContactTemperatureID.HasValue ? (object) entity.ContactTemperatureID : System.DBNull.Value) );
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
