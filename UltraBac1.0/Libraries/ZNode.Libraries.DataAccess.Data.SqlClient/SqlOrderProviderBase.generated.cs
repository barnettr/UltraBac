
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file SqlOrderProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using ZNode.Libraries.DataAccess.Entities;
using ZNode.Libraries.DataAccess.Data;
using ZNode.Libraries.DataAccess.Data.Bases;

#endregion

namespace ZNode.Libraries.DataAccess.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Order"/> entity.
	///</summary>
	public partial class SqlOrderProviderBase : OrderProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlOrderProviderBase"/> instance.
		/// </summary>
		public SqlOrderProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlOrderProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlOrderProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="orderID">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 orderID)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@OrderID", DbType.Int32, orderID);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Order)
					,orderID);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new ZNode.Libraries.DataAccess.Entities.TList<Order>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@OrderID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrderStateID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShippingID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipFirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipLastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipStreet", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipStreet1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipStateCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipPostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipEmailID", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingFirstName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingLastName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStreet", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStreet1", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingStateCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingPhoneNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BillingEmailId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CardTransactionID", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CardTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CardEndsIn", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TaxCost", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShippingCost", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubTotal", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Total", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CouponID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrderDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardNumber", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardExp", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditCardCVV", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom1", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom2", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdditionalInstructions", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom3", DbType.String, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("orderid ") || clause.Trim().StartsWith("orderid="))
				{
					database.SetParameterValue(commandWrapper, "@OrderID", 
						clause.Replace("orderid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("portalid ") || clause.Trim().StartsWith("portalid="))
				{
					database.SetParameterValue(commandWrapper, "@PortalId", 
						clause.Replace("portalid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accountid ") || clause.Trim().StartsWith("accountid="))
				{
					database.SetParameterValue(commandWrapper, "@AccountID", 
						clause.Replace("accountid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("orderstateid ") || clause.Trim().StartsWith("orderstateid="))
				{
					database.SetParameterValue(commandWrapper, "@OrderStateID", 
						clause.Replace("orderstateid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippingid ") || clause.Trim().StartsWith("shippingid="))
				{
					database.SetParameterValue(commandWrapper, "@ShippingID", 
						clause.Replace("shippingid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paymenttypeid ") || clause.Trim().StartsWith("paymenttypeid="))
				{
					database.SetParameterValue(commandWrapper, "@PaymentTypeId", 
						clause.Replace("paymenttypeid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipfirstname ") || clause.Trim().StartsWith("shipfirstname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipFirstName", 
						clause.Replace("shipfirstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shiplastname ") || clause.Trim().StartsWith("shiplastname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipLastName", 
						clause.Replace("shiplastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcompanyname ") || clause.Trim().StartsWith("shipcompanyname="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCompanyName", 
						clause.Replace("shipcompanyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstreet ") || clause.Trim().StartsWith("shipstreet="))
				{
					database.SetParameterValue(commandWrapper, "@ShipStreet", 
						clause.Replace("shipstreet","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstreet1 ") || clause.Trim().StartsWith("shipstreet1="))
				{
					database.SetParameterValue(commandWrapper, "@ShipStreet1", 
						clause.Replace("shipstreet1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcity ") || clause.Trim().StartsWith("shipcity="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCity", 
						clause.Replace("shipcity","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipstatecode ") || clause.Trim().StartsWith("shipstatecode="))
				{
					database.SetParameterValue(commandWrapper, "@ShipStateCode", 
						clause.Replace("shipstatecode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippostalcode ") || clause.Trim().StartsWith("shippostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@ShipPostalCode", 
						clause.Replace("shippostalcode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipcountry ") || clause.Trim().StartsWith("shipcountry="))
				{
					database.SetParameterValue(commandWrapper, "@ShipCountry", 
						clause.Replace("shipcountry","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipphonenumber ") || clause.Trim().StartsWith("shipphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@ShipPhoneNumber", 
						clause.Replace("shipphonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipemailid ") || clause.Trim().StartsWith("shipemailid="))
				{
					database.SetParameterValue(commandWrapper, "@ShipEmailID", 
						clause.Replace("shipemailid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingfirstname ") || clause.Trim().StartsWith("billingfirstname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingFirstName", 
						clause.Replace("billingfirstname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billinglastname ") || clause.Trim().StartsWith("billinglastname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingLastName", 
						clause.Replace("billinglastname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcompanyname ") || clause.Trim().StartsWith("billingcompanyname="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCompanyName", 
						clause.Replace("billingcompanyname","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstreet ") || clause.Trim().StartsWith("billingstreet="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStreet", 
						clause.Replace("billingstreet","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstreet1 ") || clause.Trim().StartsWith("billingstreet1="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStreet1", 
						clause.Replace("billingstreet1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcity ") || clause.Trim().StartsWith("billingcity="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCity", 
						clause.Replace("billingcity","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingstatecode ") || clause.Trim().StartsWith("billingstatecode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingStateCode", 
						clause.Replace("billingstatecode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingpostalcode ") || clause.Trim().StartsWith("billingpostalcode="))
				{
					database.SetParameterValue(commandWrapper, "@BillingPostalCode", 
						clause.Replace("billingpostalcode","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingcountry ") || clause.Trim().StartsWith("billingcountry="))
				{
					database.SetParameterValue(commandWrapper, "@BillingCountry", 
						clause.Replace("billingcountry","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingphonenumber ") || clause.Trim().StartsWith("billingphonenumber="))
				{
					database.SetParameterValue(commandWrapper, "@BillingPhoneNumber", 
						clause.Replace("billingphonenumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billingemailid ") || clause.Trim().StartsWith("billingemailid="))
				{
					database.SetParameterValue(commandWrapper, "@BillingEmailId", 
						clause.Replace("billingemailid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cardtransactionid ") || clause.Trim().StartsWith("cardtransactionid="))
				{
					database.SetParameterValue(commandWrapper, "@CardTransactionID", 
						clause.Replace("cardtransactionid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cardtypeid ") || clause.Trim().StartsWith("cardtypeid="))
				{
					database.SetParameterValue(commandWrapper, "@CardTypeId", 
						clause.Replace("cardtypeid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cardendsin ") || clause.Trim().StartsWith("cardendsin="))
				{
					database.SetParameterValue(commandWrapper, "@CardEndsIn", 
						clause.Replace("cardendsin","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("taxcost ") || clause.Trim().StartsWith("taxcost="))
				{
					database.SetParameterValue(commandWrapper, "@TaxCost", 
						clause.Replace("taxcost","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippingcost ") || clause.Trim().StartsWith("shippingcost="))
				{
					database.SetParameterValue(commandWrapper, "@ShippingCost", 
						clause.Replace("shippingcost","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("subtotal ") || clause.Trim().StartsWith("subtotal="))
				{
					database.SetParameterValue(commandWrapper, "@SubTotal", 
						clause.Replace("subtotal","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("discountamount ") || clause.Trim().StartsWith("discountamount="))
				{
					database.SetParameterValue(commandWrapper, "@DiscountAmount", 
						clause.Replace("discountamount","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("total ") || clause.Trim().StartsWith("total="))
				{
					database.SetParameterValue(commandWrapper, "@Total", 
						clause.Replace("total","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("couponid ") || clause.Trim().StartsWith("couponid="))
				{
					database.SetParameterValue(commandWrapper, "@CouponID", 
						clause.Replace("couponid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("orderdate ") || clause.Trim().StartsWith("orderdate="))
				{
					database.SetParameterValue(commandWrapper, "@OrderDate", 
						clause.Replace("orderdate","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardnumber ") || clause.Trim().StartsWith("creditcardnumber="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardNumber", 
						clause.Replace("creditcardnumber","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardexp ") || clause.Trim().StartsWith("creditcardexp="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardExp", 
						clause.Replace("creditcardexp","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("creditcardcvv ") || clause.Trim().StartsWith("creditcardcvv="))
				{
					database.SetParameterValue(commandWrapper, "@CreditCardCVV", 
						clause.Replace("creditcardcvv","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom1 ") || clause.Trim().StartsWith("custom1="))
				{
					database.SetParameterValue(commandWrapper, "@Custom1", 
						clause.Replace("custom1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom2 ") || clause.Trim().StartsWith("custom2="))
				{
					database.SetParameterValue(commandWrapper, "@Custom2", 
						clause.Replace("custom2","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("additionalinstructions ") || clause.Trim().StartsWith("additionalinstructions="))
				{
					database.SetParameterValue(commandWrapper, "@AdditionalInstructions", 
						clause.Replace("additionalinstructions","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom3 ") || clause.Trim().StartsWith("custom3="))
				{
					database.SetParameterValue(commandWrapper, "@Custom3", 
						clause.Replace("custom3","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> Find(TransactionManager transactionManager, SqlFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_Find_Dynamic", typeof(OrderColumn), parameters, orderBy, start, pageLength);
			
			if ( parameters != null )
			{
				SqlFilterParameter param;

				for ( int i = 0; i < parameters.Count; i++ )
				{
					param = parameters[i];
					database.AddInParameter(commandWrapper, param.Name, param.DbType, param.Value);
				}
			}

			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByPortalId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Order_Portals key.
		///		FK_SC_Order_Portals Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="portalId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetByPortalId(TransactionManager transactionManager, System.Int32? portalId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetByPortalId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, portalId);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByShippingID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Order_SC_Shipping key.
		///		FK_SC_Order_SC_Shipping Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="shippingID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetByShippingID(TransactionManager transactionManager, System.Int32? shippingID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetByShippingID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ShippingID", DbType.Int32, shippingID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByCouponID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ZNodeOrder_ZNodeCoupon key.
		///		FK_ZNodeOrder_ZNodeCoupon Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="couponID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetByCouponID(TransactionManager transactionManager, System.Int32? couponID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetByCouponID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CouponID", DbType.Int32, couponID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByOrderStateID
		/// <summary>
		/// 	Gets rows from the datasource based on the SC_OrderState_SC_Order_FK1 key.
		///		SC_OrderState_SC_Order_FK1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="orderStateID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Order objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetByOrderStateID(TransactionManager transactionManager, System.Int32? orderStateID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetByOrderStateID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OrderStateID", DbType.Int32, orderStateID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Order> rows = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByOrderID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the SC_Order_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="orderID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.Order"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.Order GetByOrderID(TransactionManager transactionManager, System.Int32 orderID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetByOrderID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OrderID", DbType.Int32, orderID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Order> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByAccountID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Account index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="accountID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Order&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Order> GetByAccountID(TransactionManager transactionManager, System.Int32? accountID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_GetByAccountID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, accountID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Order> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Order>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Order object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<ZNode.Libraries.DataAccess.Entities.Order> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZNodeOrder";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("OrderID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("PortalId", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("AccountID", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("OrderStateID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("ShippingID", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("PaymentTypeId", typeof(System.Int32));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ShipFirstName", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ShipLastName", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ShipCompanyName", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ShipStreet", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ShipStreet1", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ShipCity", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("ShipStateCode", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ShipPostalCode", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("ShipCountry", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("ShipPhoneNumber", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("ShipEmailID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("BillingFirstName", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("BillingLastName", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("BillingCompanyName", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("BillingStreet", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("BillingStreet1", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("BillingCity", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("BillingStateCode", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("BillingPostalCode", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("BillingCountry", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("BillingPhoneNumber", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("BillingEmailId", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("CardTransactionID", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("CardTypeId", typeof(System.Int32));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("CardEndsIn", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("TaxCost", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("ShippingCost", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("SubTotal", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("DiscountAmount", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("Total", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("CouponID", typeof(System.Int32));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("OrderDate", typeof(System.DateTime));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("CreditCardNumber", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("CreditCardExp", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("CreditCardCVV", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("Custom1", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("Custom2", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("AdditionalInstructions", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("Custom3", typeof(System.String));
			col44.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("OrderID", "OrderID");
			bulkCopy.ColumnMappings.Add("PortalId", "PortalId");
			bulkCopy.ColumnMappings.Add("AccountID", "AccountID");
			bulkCopy.ColumnMappings.Add("OrderStateID", "OrderStateID");
			bulkCopy.ColumnMappings.Add("ShippingID", "ShippingID");
			bulkCopy.ColumnMappings.Add("PaymentTypeId", "PaymentTypeId");
			bulkCopy.ColumnMappings.Add("ShipFirstName", "ShipFirstName");
			bulkCopy.ColumnMappings.Add("ShipLastName", "ShipLastName");
			bulkCopy.ColumnMappings.Add("ShipCompanyName", "ShipCompanyName");
			bulkCopy.ColumnMappings.Add("ShipStreet", "ShipStreet");
			bulkCopy.ColumnMappings.Add("ShipStreet1", "ShipStreet1");
			bulkCopy.ColumnMappings.Add("ShipCity", "ShipCity");
			bulkCopy.ColumnMappings.Add("ShipStateCode", "ShipStateCode");
			bulkCopy.ColumnMappings.Add("ShipPostalCode", "ShipPostalCode");
			bulkCopy.ColumnMappings.Add("ShipCountry", "ShipCountry");
			bulkCopy.ColumnMappings.Add("ShipPhoneNumber", "ShipPhoneNumber");
			bulkCopy.ColumnMappings.Add("ShipEmailID", "ShipEmailID");
			bulkCopy.ColumnMappings.Add("BillingFirstName", "BillingFirstName");
			bulkCopy.ColumnMappings.Add("BillingLastName", "BillingLastName");
			bulkCopy.ColumnMappings.Add("BillingCompanyName", "BillingCompanyName");
			bulkCopy.ColumnMappings.Add("BillingStreet", "BillingStreet");
			bulkCopy.ColumnMappings.Add("BillingStreet1", "BillingStreet1");
			bulkCopy.ColumnMappings.Add("BillingCity", "BillingCity");
			bulkCopy.ColumnMappings.Add("BillingStateCode", "BillingStateCode");
			bulkCopy.ColumnMappings.Add("BillingPostalCode", "BillingPostalCode");
			bulkCopy.ColumnMappings.Add("BillingCountry", "BillingCountry");
			bulkCopy.ColumnMappings.Add("BillingPhoneNumber", "BillingPhoneNumber");
			bulkCopy.ColumnMappings.Add("BillingEmailId", "BillingEmailId");
			bulkCopy.ColumnMappings.Add("CardTransactionID", "CardTransactionID");
			bulkCopy.ColumnMappings.Add("CardTypeId", "CardTypeId");
			bulkCopy.ColumnMappings.Add("CardEndsIn", "CardEndsIn");
			bulkCopy.ColumnMappings.Add("TaxCost", "TaxCost");
			bulkCopy.ColumnMappings.Add("ShippingCost", "ShippingCost");
			bulkCopy.ColumnMappings.Add("SubTotal", "SubTotal");
			bulkCopy.ColumnMappings.Add("DiscountAmount", "DiscountAmount");
			bulkCopy.ColumnMappings.Add("Total", "Total");
			bulkCopy.ColumnMappings.Add("CouponID", "CouponID");
			bulkCopy.ColumnMappings.Add("OrderDate", "OrderDate");
			bulkCopy.ColumnMappings.Add("CreditCardNumber", "CreditCardNumber");
			bulkCopy.ColumnMappings.Add("CreditCardExp", "CreditCardExp");
			bulkCopy.ColumnMappings.Add("CreditCardCVV", "CreditCardCVV");
			bulkCopy.ColumnMappings.Add("Custom1", "Custom1");
			bulkCopy.ColumnMappings.Add("Custom2", "Custom2");
			bulkCopy.ColumnMappings.Add("AdditionalInstructions", "AdditionalInstructions");
			bulkCopy.ColumnMappings.Add("Custom3", "Custom3");
			
			foreach(ZNode.Libraries.DataAccess.Entities.Order entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["OrderID"] = entity.OrderID;
							
				
					row["PortalId"] = entity.PortalId.HasValue ? (object) entity.PortalId  : System.DBNull.Value;
							
				
					row["AccountID"] = entity.AccountID.HasValue ? (object) entity.AccountID  : System.DBNull.Value;
							
				
					row["OrderStateID"] = entity.OrderStateID.HasValue ? (object) entity.OrderStateID  : System.DBNull.Value;
							
				
					row["ShippingID"] = entity.ShippingID.HasValue ? (object) entity.ShippingID  : System.DBNull.Value;
							
				
					row["PaymentTypeId"] = entity.PaymentTypeId.HasValue ? (object) entity.PaymentTypeId  : System.DBNull.Value;
							
				
					row["ShipFirstName"] = entity.ShipFirstName;
							
				
					row["ShipLastName"] = entity.ShipLastName;
							
				
					row["ShipCompanyName"] = entity.ShipCompanyName;
							
				
					row["ShipStreet"] = entity.ShipStreet;
							
				
					row["ShipStreet1"] = entity.ShipStreet1;
							
				
					row["ShipCity"] = entity.ShipCity;
							
				
					row["ShipStateCode"] = entity.ShipStateCode;
							
				
					row["ShipPostalCode"] = entity.ShipPostalCode;
							
				
					row["ShipCountry"] = entity.ShipCountry;
							
				
					row["ShipPhoneNumber"] = entity.ShipPhoneNumber;
							
				
					row["ShipEmailID"] = entity.ShipEmailID;
							
				
					row["BillingFirstName"] = entity.BillingFirstName;
							
				
					row["BillingLastName"] = entity.BillingLastName;
							
				
					row["BillingCompanyName"] = entity.BillingCompanyName;
							
				
					row["BillingStreet"] = entity.BillingStreet;
							
				
					row["BillingStreet1"] = entity.BillingStreet1;
							
				
					row["BillingCity"] = entity.BillingCity;
							
				
					row["BillingStateCode"] = entity.BillingStateCode;
							
				
					row["BillingPostalCode"] = entity.BillingPostalCode;
							
				
					row["BillingCountry"] = entity.BillingCountry;
							
				
					row["BillingPhoneNumber"] = entity.BillingPhoneNumber;
							
				
					row["BillingEmailId"] = entity.BillingEmailId;
							
				
					row["CardTransactionID"] = entity.CardTransactionID;
							
				
					row["CardTypeId"] = entity.CardTypeId.HasValue ? (object) entity.CardTypeId  : System.DBNull.Value;
							
				
					row["CardEndsIn"] = entity.CardEndsIn;
							
				
					row["TaxCost"] = entity.TaxCost.HasValue ? (object) entity.TaxCost  : System.DBNull.Value;
							
				
					row["ShippingCost"] = entity.ShippingCost.HasValue ? (object) entity.ShippingCost  : System.DBNull.Value;
							
				
					row["SubTotal"] = entity.SubTotal.HasValue ? (object) entity.SubTotal  : System.DBNull.Value;
							
				
					row["DiscountAmount"] = entity.DiscountAmount.HasValue ? (object) entity.DiscountAmount  : System.DBNull.Value;
							
				
					row["Total"] = entity.Total.HasValue ? (object) entity.Total  : System.DBNull.Value;
							
				
					row["CouponID"] = entity.CouponID.HasValue ? (object) entity.CouponID  : System.DBNull.Value;
							
				
					row["OrderDate"] = entity.OrderDate.HasValue ? (object) entity.OrderDate  : System.DBNull.Value;
							
				
					row["CreditCardNumber"] = entity.CreditCardNumber;
							
				
					row["CreditCardExp"] = entity.CreditCardExp;
							
				
					row["CreditCardCVV"] = entity.CreditCardCVV;
							
				
					row["Custom1"] = entity.Custom1;
							
				
					row["Custom2"] = entity.Custom2;
							
				
					row["AdditionalInstructions"] = entity.AdditionalInstructions;
							
				
					row["Custom3"] = entity.Custom3;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(ZNode.Libraries.DataAccess.Entities.Order entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a ZNode.Libraries.DataAccess.Entities.Order object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Order object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Order object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Order entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@OrderID", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, (entity.PortalId.HasValue ? (object) entity.PortalId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, (entity.AccountID.HasValue ? (object) entity.AccountID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrderStateID", DbType.Int32, (entity.OrderStateID.HasValue ? (object) entity.OrderStateID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ShippingID", DbType.Int32, (entity.ShippingID.HasValue ? (object) entity.ShippingID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32, (entity.PaymentTypeId.HasValue ? (object) entity.PaymentTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ShipFirstName", DbType.AnsiString, entity.ShipFirstName );
			database.AddInParameter(commandWrapper, "@ShipLastName", DbType.AnsiString, entity.ShipLastName );
			database.AddInParameter(commandWrapper, "@ShipCompanyName", DbType.AnsiString, entity.ShipCompanyName );
			database.AddInParameter(commandWrapper, "@ShipStreet", DbType.AnsiString, entity.ShipStreet );
			database.AddInParameter(commandWrapper, "@ShipStreet1", DbType.AnsiString, entity.ShipStreet1 );
			database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, entity.ShipCity );
			database.AddInParameter(commandWrapper, "@ShipStateCode", DbType.AnsiString, entity.ShipStateCode );
			database.AddInParameter(commandWrapper, "@ShipPostalCode", DbType.AnsiString, entity.ShipPostalCode );
			database.AddInParameter(commandWrapper, "@ShipCountry", DbType.AnsiString, entity.ShipCountry );
			database.AddInParameter(commandWrapper, "@ShipPhoneNumber", DbType.AnsiString, entity.ShipPhoneNumber );
			database.AddInParameter(commandWrapper, "@ShipEmailID", DbType.AnsiString, entity.ShipEmailID );
			database.AddInParameter(commandWrapper, "@BillingFirstName", DbType.AnsiString, entity.BillingFirstName );
			database.AddInParameter(commandWrapper, "@BillingLastName", DbType.AnsiString, entity.BillingLastName );
			database.AddInParameter(commandWrapper, "@BillingCompanyName", DbType.AnsiString, entity.BillingCompanyName );
			database.AddInParameter(commandWrapper, "@BillingStreet", DbType.AnsiString, entity.BillingStreet );
			database.AddInParameter(commandWrapper, "@BillingStreet1", DbType.AnsiString, entity.BillingStreet1 );
			database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, entity.BillingCity );
			database.AddInParameter(commandWrapper, "@BillingStateCode", DbType.AnsiString, entity.BillingStateCode );
			database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, entity.BillingPostalCode );
			database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, entity.BillingCountry );
			database.AddInParameter(commandWrapper, "@BillingPhoneNumber", DbType.AnsiString, entity.BillingPhoneNumber );
			database.AddInParameter(commandWrapper, "@BillingEmailId", DbType.AnsiString, entity.BillingEmailId );
			database.AddInParameter(commandWrapper, "@CardTransactionID", DbType.AnsiString, entity.CardTransactionID );
			database.AddInParameter(commandWrapper, "@CardTypeId", DbType.Int32, (entity.CardTypeId.HasValue ? (object) entity.CardTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CardEndsIn", DbType.AnsiString, entity.CardEndsIn );
			database.AddInParameter(commandWrapper, "@TaxCost", DbType.Currency, (entity.TaxCost.HasValue ? (object) entity.TaxCost  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ShippingCost", DbType.Currency, (entity.ShippingCost.HasValue ? (object) entity.ShippingCost  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SubTotal", DbType.Currency, (entity.SubTotal.HasValue ? (object) entity.SubTotal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Currency, (entity.DiscountAmount.HasValue ? (object) entity.DiscountAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Total", DbType.Currency, (entity.Total.HasValue ? (object) entity.Total  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CouponID", DbType.Int32, (entity.CouponID.HasValue ? (object) entity.CouponID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrderDate", DbType.DateTime, (entity.OrderDate.HasValue ? (object) entity.OrderDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CreditCardNumber", DbType.AnsiString, entity.CreditCardNumber );
			database.AddInParameter(commandWrapper, "@CreditCardExp", DbType.AnsiString, entity.CreditCardExp );
			database.AddInParameter(commandWrapper, "@CreditCardCVV", DbType.AnsiString, entity.CreditCardCVV );
			database.AddInParameter(commandWrapper, "@Custom1", DbType.String, entity.Custom1 );
			database.AddInParameter(commandWrapper, "@Custom2", DbType.String, entity.Custom2 );
			database.AddInParameter(commandWrapper, "@AdditionalInstructions", DbType.String, entity.AdditionalInstructions );
			database.AddInParameter(commandWrapper, "@Custom3", DbType.String, entity.Custom3 );
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.OrderID = (System.Int32) database.GetParameterValue(commandWrapper, "@OrderID");						
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Order object to update.</param>
		/// <remarks>
		///		After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Order object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Order entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeOrder_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@OrderID", DbType.Int32, entity.OrderID );
			database.AddInParameter(commandWrapper, "@PortalId", DbType.Int32, (entity.PortalId.HasValue ? (object) entity.PortalId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccountID", DbType.Int32, (entity.AccountID.HasValue ? (object) entity.AccountID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrderStateID", DbType.Int32, (entity.OrderStateID.HasValue ? (object) entity.OrderStateID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ShippingID", DbType.Int32, (entity.ShippingID.HasValue ? (object) entity.ShippingID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32, (entity.PaymentTypeId.HasValue ? (object) entity.PaymentTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ShipFirstName", DbType.AnsiString, entity.ShipFirstName );
			database.AddInParameter(commandWrapper, "@ShipLastName", DbType.AnsiString, entity.ShipLastName );
			database.AddInParameter(commandWrapper, "@ShipCompanyName", DbType.AnsiString, entity.ShipCompanyName );
			database.AddInParameter(commandWrapper, "@ShipStreet", DbType.AnsiString, entity.ShipStreet );
			database.AddInParameter(commandWrapper, "@ShipStreet1", DbType.AnsiString, entity.ShipStreet1 );
			database.AddInParameter(commandWrapper, "@ShipCity", DbType.AnsiString, entity.ShipCity );
			database.AddInParameter(commandWrapper, "@ShipStateCode", DbType.AnsiString, entity.ShipStateCode );
			database.AddInParameter(commandWrapper, "@ShipPostalCode", DbType.AnsiString, entity.ShipPostalCode );
			database.AddInParameter(commandWrapper, "@ShipCountry", DbType.AnsiString, entity.ShipCountry );
			database.AddInParameter(commandWrapper, "@ShipPhoneNumber", DbType.AnsiString, entity.ShipPhoneNumber );
			database.AddInParameter(commandWrapper, "@ShipEmailID", DbType.AnsiString, entity.ShipEmailID );
			database.AddInParameter(commandWrapper, "@BillingFirstName", DbType.AnsiString, entity.BillingFirstName );
			database.AddInParameter(commandWrapper, "@BillingLastName", DbType.AnsiString, entity.BillingLastName );
			database.AddInParameter(commandWrapper, "@BillingCompanyName", DbType.AnsiString, entity.BillingCompanyName );
			database.AddInParameter(commandWrapper, "@BillingStreet", DbType.AnsiString, entity.BillingStreet );
			database.AddInParameter(commandWrapper, "@BillingStreet1", DbType.AnsiString, entity.BillingStreet1 );
			database.AddInParameter(commandWrapper, "@BillingCity", DbType.AnsiString, entity.BillingCity );
			database.AddInParameter(commandWrapper, "@BillingStateCode", DbType.AnsiString, entity.BillingStateCode );
			database.AddInParameter(commandWrapper, "@BillingPostalCode", DbType.AnsiString, entity.BillingPostalCode );
			database.AddInParameter(commandWrapper, "@BillingCountry", DbType.AnsiString, entity.BillingCountry );
			database.AddInParameter(commandWrapper, "@BillingPhoneNumber", DbType.AnsiString, entity.BillingPhoneNumber );
			database.AddInParameter(commandWrapper, "@BillingEmailId", DbType.AnsiString, entity.BillingEmailId );
			database.AddInParameter(commandWrapper, "@CardTransactionID", DbType.AnsiString, entity.CardTransactionID );
			database.AddInParameter(commandWrapper, "@CardTypeId", DbType.Int32, (entity.CardTypeId.HasValue ? (object) entity.CardTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CardEndsIn", DbType.AnsiString, entity.CardEndsIn );
			database.AddInParameter(commandWrapper, "@TaxCost", DbType.Currency, (entity.TaxCost.HasValue ? (object) entity.TaxCost : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ShippingCost", DbType.Currency, (entity.ShippingCost.HasValue ? (object) entity.ShippingCost : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SubTotal", DbType.Currency, (entity.SubTotal.HasValue ? (object) entity.SubTotal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Currency, (entity.DiscountAmount.HasValue ? (object) entity.DiscountAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Total", DbType.Currency, (entity.Total.HasValue ? (object) entity.Total : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CouponID", DbType.Int32, (entity.CouponID.HasValue ? (object) entity.CouponID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrderDate", DbType.DateTime, (entity.OrderDate.HasValue ? (object) entity.OrderDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CreditCardNumber", DbType.AnsiString, entity.CreditCardNumber );
			database.AddInParameter(commandWrapper, "@CreditCardExp", DbType.AnsiString, entity.CreditCardExp );
			database.AddInParameter(commandWrapper, "@CreditCardCVV", DbType.AnsiString, entity.CreditCardCVV );
			database.AddInParameter(commandWrapper, "@Custom1", DbType.String, entity.Custom1 );
			database.AddInParameter(commandWrapper, "@Custom2", DbType.String, entity.Custom2 );
			database.AddInParameter(commandWrapper, "@AdditionalInstructions", DbType.String, entity.AdditionalInstructions );
			database.AddInParameter(commandWrapper, "@Custom3", DbType.String, entity.Custom3 );
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
