
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, October 18, 2007
	Important: Do not modify this file. Edit the file SqlProductProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using ZNode.Libraries.DataAccess.Entities;
using ZNode.Libraries.DataAccess.Data;
using ZNode.Libraries.DataAccess.Data.Bases;

#endregion

namespace ZNode.Libraries.DataAccess.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Product"/> entity.
	///</summary>
	public partial class SqlProductProviderBase : ProductProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlProductProviderBase"/> instance.
		/// </summary>
		public SqlProductProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlProductProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlProductProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="productID">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 productID)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@ProductID", DbType.Int32, productID);
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Product)
					,productID);
				EntityManager.StopTracking(entityKey);
			}
			
			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new ZNode.Libraries.DataAccess.Entities.TList<Product>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@ProductID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Name", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShortDescription", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Description", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeaturesDesc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductTypeID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetailPrice", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WholesalePrice", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalePrice", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ImageFile", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Weight", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DisplayOrder", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallForPricing", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HomepageSpecial", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CategorySpecial", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InventoryDisplay", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Keywords", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ManufacturerID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdditionalInfoLink", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdditionalInfoLinkLabel", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShippingRuleTypeID", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SEOTitle", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SEOKeywords", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SEODescription", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom1", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom2", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Custom3", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShipEachItemSeparately", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SKU", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QuantityOnHand", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AllowBackOrder", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BackOrderMsg", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DropShipInd", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DropShipEmailID", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Specifications", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdditionalInformation", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InStockMsg", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OutOfStockMsg", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TrackInventoryInd", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("productid ") || clause.Trim().StartsWith("productid="))
				{
					database.SetParameterValue(commandWrapper, "@ProductID", 
						clause.Replace("productid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("portalid ") || clause.Trim().StartsWith("portalid="))
				{
					database.SetParameterValue(commandWrapper, "@PortalID", 
						clause.Replace("portalid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("name ") || clause.Trim().StartsWith("name="))
				{
					database.SetParameterValue(commandWrapper, "@Name", 
						clause.Replace("name","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shortdescription ") || clause.Trim().StartsWith("shortdescription="))
				{
					database.SetParameterValue(commandWrapper, "@ShortDescription", 
						clause.Replace("shortdescription","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("description ") || clause.Trim().StartsWith("description="))
				{
					database.SetParameterValue(commandWrapper, "@Description", 
						clause.Replace("description","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("featuresdesc ") || clause.Trim().StartsWith("featuresdesc="))
				{
					database.SetParameterValue(commandWrapper, "@FeaturesDesc", 
						clause.Replace("featuresdesc","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productnum ") || clause.Trim().StartsWith("productnum="))
				{
					database.SetParameterValue(commandWrapper, "@ProductNum", 
						clause.Replace("productnum","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("producttypeid ") || clause.Trim().StartsWith("producttypeid="))
				{
					database.SetParameterValue(commandWrapper, "@ProductTypeID", 
						clause.Replace("producttypeid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retailprice ") || clause.Trim().StartsWith("retailprice="))
				{
					database.SetParameterValue(commandWrapper, "@RetailPrice", 
						clause.Replace("retailprice","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wholesaleprice ") || clause.Trim().StartsWith("wholesaleprice="))
				{
					database.SetParameterValue(commandWrapper, "@WholesalePrice", 
						clause.Replace("wholesaleprice","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("saleprice ") || clause.Trim().StartsWith("saleprice="))
				{
					database.SetParameterValue(commandWrapper, "@SalePrice", 
						clause.Replace("saleprice","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("imagefile ") || clause.Trim().StartsWith("imagefile="))
				{
					database.SetParameterValue(commandWrapper, "@ImageFile", 
						clause.Replace("imagefile","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("weight ") || clause.Trim().StartsWith("weight="))
				{
					database.SetParameterValue(commandWrapper, "@Weight", 
						clause.Replace("weight","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("activeind ") || clause.Trim().StartsWith("activeind="))
				{
					database.SetParameterValue(commandWrapper, "@ActiveInd", 
						clause.Replace("activeind","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("displayorder ") || clause.Trim().StartsWith("displayorder="))
				{
					database.SetParameterValue(commandWrapper, "@DisplayOrder", 
						clause.Replace("displayorder","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("callforpricing ") || clause.Trim().StartsWith("callforpricing="))
				{
					database.SetParameterValue(commandWrapper, "@CallForPricing", 
						clause.Replace("callforpricing","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("homepagespecial ") || clause.Trim().StartsWith("homepagespecial="))
				{
					database.SetParameterValue(commandWrapper, "@HomepageSpecial", 
						clause.Replace("homepagespecial","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("categoryspecial ") || clause.Trim().StartsWith("categoryspecial="))
				{
					database.SetParameterValue(commandWrapper, "@CategorySpecial", 
						clause.Replace("categoryspecial","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("inventorydisplay ") || clause.Trim().StartsWith("inventorydisplay="))
				{
					database.SetParameterValue(commandWrapper, "@InventoryDisplay", 
						clause.Replace("inventorydisplay","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("keywords ") || clause.Trim().StartsWith("keywords="))
				{
					database.SetParameterValue(commandWrapper, "@Keywords", 
						clause.Replace("keywords","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manufacturerid ") || clause.Trim().StartsWith("manufacturerid="))
				{
					database.SetParameterValue(commandWrapper, "@ManufacturerID", 
						clause.Replace("manufacturerid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("additionalinfolink ") || clause.Trim().StartsWith("additionalinfolink="))
				{
					database.SetParameterValue(commandWrapper, "@AdditionalInfoLink", 
						clause.Replace("additionalinfolink","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("additionalinfolinklabel ") || clause.Trim().StartsWith("additionalinfolinklabel="))
				{
					database.SetParameterValue(commandWrapper, "@AdditionalInfoLinkLabel", 
						clause.Replace("additionalinfolinklabel","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shippingruletypeid ") || clause.Trim().StartsWith("shippingruletypeid="))
				{
					database.SetParameterValue(commandWrapper, "@ShippingRuleTypeID", 
						clause.Replace("shippingruletypeid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seotitle ") || clause.Trim().StartsWith("seotitle="))
				{
					database.SetParameterValue(commandWrapper, "@SEOTitle", 
						clause.Replace("seotitle","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seokeywords ") || clause.Trim().StartsWith("seokeywords="))
				{
					database.SetParameterValue(commandWrapper, "@SEOKeywords", 
						clause.Replace("seokeywords","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("seodescription ") || clause.Trim().StartsWith("seodescription="))
				{
					database.SetParameterValue(commandWrapper, "@SEODescription", 
						clause.Replace("seodescription","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom1 ") || clause.Trim().StartsWith("custom1="))
				{
					database.SetParameterValue(commandWrapper, "@Custom1", 
						clause.Replace("custom1","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom2 ") || clause.Trim().StartsWith("custom2="))
				{
					database.SetParameterValue(commandWrapper, "@Custom2", 
						clause.Replace("custom2","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("custom3 ") || clause.Trim().StartsWith("custom3="))
				{
					database.SetParameterValue(commandWrapper, "@Custom3", 
						clause.Replace("custom3","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shipeachitemseparately ") || clause.Trim().StartsWith("shipeachitemseparately="))
				{
					database.SetParameterValue(commandWrapper, "@ShipEachItemSeparately", 
						clause.Replace("shipeachitemseparately","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sku ") || clause.Trim().StartsWith("sku="))
				{
					database.SetParameterValue(commandWrapper, "@SKU", 
						clause.Replace("sku","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("quantityonhand ") || clause.Trim().StartsWith("quantityonhand="))
				{
					database.SetParameterValue(commandWrapper, "@QuantityOnHand", 
						clause.Replace("quantityonhand","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("allowbackorder ") || clause.Trim().StartsWith("allowbackorder="))
				{
					database.SetParameterValue(commandWrapper, "@AllowBackOrder", 
						clause.Replace("allowbackorder","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("backordermsg ") || clause.Trim().StartsWith("backordermsg="))
				{
					database.SetParameterValue(commandWrapper, "@BackOrderMsg", 
						clause.Replace("backordermsg","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dropshipind ") || clause.Trim().StartsWith("dropshipind="))
				{
					database.SetParameterValue(commandWrapper, "@DropShipInd", 
						clause.Replace("dropshipind","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dropshipemailid ") || clause.Trim().StartsWith("dropshipemailid="))
				{
					database.SetParameterValue(commandWrapper, "@DropShipEmailID", 
						clause.Replace("dropshipemailid","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("specifications ") || clause.Trim().StartsWith("specifications="))
				{
					database.SetParameterValue(commandWrapper, "@Specifications", 
						clause.Replace("specifications","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("additionalinformation ") || clause.Trim().StartsWith("additionalinformation="))
				{
					database.SetParameterValue(commandWrapper, "@AdditionalInformation", 
						clause.Replace("additionalinformation","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("instockmsg ") || clause.Trim().StartsWith("instockmsg="))
				{
					database.SetParameterValue(commandWrapper, "@InStockMsg", 
						clause.Replace("instockmsg","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("outofstockmsg ") || clause.Trim().StartsWith("outofstockmsg="))
				{
					database.SetParameterValue(commandWrapper, "@OutOfStockMsg", 
						clause.Replace("outofstockmsg","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trackinventoryind ") || clause.Trim().StartsWith("trackinventoryind="))
				{
					database.SetParameterValue(commandWrapper, "@TrackInventoryInd", 
						clause.Replace("trackinventoryind","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> Find(TransactionManager transactionManager, SqlFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_Find_Dynamic", typeof(ProductColumn), parameters, orderBy, start, pageLength);
			
			if ( parameters != null )
			{
				SqlFilterParameter param;

				for ( int i = 0; i < parameters.Count; i++ )
				{
					param = parameters[i];
					database.AddInParameter(commandWrapper, param.Name, param.DbType, param.Value);
				}
			}

			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetPaged", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByManufacturerID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Product_SC_Manufacturer key.
		///		FK_SC_Product_SC_Manufacturer Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="manufacturerID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetByManufacturerID(TransactionManager transactionManager, System.Int32? manufacturerID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByManufacturerID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ManufacturerID", DbType.Int32, manufacturerID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByProductTypeID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Product_SC_ProductType key.
		///		FK_SC_Product_SC_ProductType Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="productTypeID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetByProductTypeID(TransactionManager transactionManager, System.Int32 productTypeID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByProductTypeID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductTypeID", DbType.Int32, productTypeID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	

		#region GetByShippingRuleTypeID
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_Product_SC_ShippingRuleType key.
		///		FK_SC_Product_SC_ShippingRuleType Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="shippingRuleTypeID"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ZNode.Libraries.DataAccess.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetByShippingRuleTypeID(TransactionManager transactionManager, System.Int32? shippingRuleTypeID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByShippingRuleTypeID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ShippingRuleTypeID", DbType.Int32, shippingRuleTypeID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> rows = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByProductID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the SC_Product_PK index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="productID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.Product"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.Product GetByProductID(TransactionManager transactionManager, System.Int32 productID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByProductID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductID", DbType.Int32, productID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByPortalID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="portalID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Product&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetByPortalID(TransactionManager transactionManager, System.Int32 portalID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByPortalID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, portalID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByHomepageSpecialPortalID
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX4 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="homepageSpecial"></param>
		/// <param name="portalID"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Product&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetByHomepageSpecialPortalID(TransactionManager transactionManager, System.Boolean homepageSpecial, System.Int32 portalID, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByHomepageSpecialPortalID", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@HomepageSpecial", DbType.Boolean, homepageSpecial);
				database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, portalID);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByActiveInd
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX3 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="activeInd"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="ZNode.Libraries.DataAccess.Entities.TList&lt;Product&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ZNode.Libraries.DataAccess.Entities.TList<Product> GetByActiveInd(TransactionManager transactionManager, System.Boolean activeInd, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_GetByActiveInd", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, activeInd);
			
			IDataReader reader = null;
			ZNode.Libraries.DataAccess.Entities.TList<Product> tmp = new ZNode.Libraries.DataAccess.Entities.TList<Product>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Product object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<ZNode.Libraries.DataAccess.Entities.Product> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZNodeProduct";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ProductID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("PortalID", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("Name", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("ShortDescription", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("Description", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("FeaturesDesc", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ProductNum", typeof(System.String));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("ProductTypeID", typeof(System.Int32));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("RetailPrice", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("WholesalePrice", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("SalePrice", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ImageFile", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("Weight", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ActiveInd", typeof(System.Boolean));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("DisplayOrder", typeof(System.Int32));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("CallForPricing", typeof(System.Boolean));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("HomepageSpecial", typeof(System.Boolean));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("CategorySpecial", typeof(System.Boolean));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("InventoryDisplay", typeof(System.Byte));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("Keywords", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ManufacturerID", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("AdditionalInfoLink", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("AdditionalInfoLinkLabel", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ShippingRuleTypeID", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("SEOTitle", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("SEOKeywords", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("SEODescription", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("Custom1", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("Custom2", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("Custom3", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("ShipEachItemSeparately", typeof(System.Boolean));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("SKU", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("QuantityOnHand", typeof(System.Int32));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("AllowBackOrder", typeof(System.Boolean));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("BackOrderMsg", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("DropShipInd", typeof(System.Boolean));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("DropShipEmailID", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("Specifications", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("AdditionalInformation", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("InStockMsg", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("OutOfStockMsg", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("TrackInventoryInd", typeof(System.Boolean));
			col41.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ProductID", "ProductID");
			bulkCopy.ColumnMappings.Add("PortalID", "PortalID");
			bulkCopy.ColumnMappings.Add("Name", "Name");
			bulkCopy.ColumnMappings.Add("ShortDescription", "ShortDescription");
			bulkCopy.ColumnMappings.Add("Description", "Description");
			bulkCopy.ColumnMappings.Add("FeaturesDesc", "FeaturesDesc");
			bulkCopy.ColumnMappings.Add("ProductNum", "ProductNum");
			bulkCopy.ColumnMappings.Add("ProductTypeID", "ProductTypeID");
			bulkCopy.ColumnMappings.Add("RetailPrice", "RetailPrice");
			bulkCopy.ColumnMappings.Add("WholesalePrice", "WholesalePrice");
			bulkCopy.ColumnMappings.Add("SalePrice", "SalePrice");
			bulkCopy.ColumnMappings.Add("ImageFile", "ImageFile");
			bulkCopy.ColumnMappings.Add("Weight", "Weight");
			bulkCopy.ColumnMappings.Add("ActiveInd", "ActiveInd");
			bulkCopy.ColumnMappings.Add("DisplayOrder", "DisplayOrder");
			bulkCopy.ColumnMappings.Add("CallForPricing", "CallForPricing");
			bulkCopy.ColumnMappings.Add("HomepageSpecial", "HomepageSpecial");
			bulkCopy.ColumnMappings.Add("CategorySpecial", "CategorySpecial");
			bulkCopy.ColumnMappings.Add("InventoryDisplay", "InventoryDisplay");
			bulkCopy.ColumnMappings.Add("Keywords", "Keywords");
			bulkCopy.ColumnMappings.Add("ManufacturerID", "ManufacturerID");
			bulkCopy.ColumnMappings.Add("AdditionalInfoLink", "AdditionalInfoLink");
			bulkCopy.ColumnMappings.Add("AdditionalInfoLinkLabel", "AdditionalInfoLinkLabel");
			bulkCopy.ColumnMappings.Add("ShippingRuleTypeID", "ShippingRuleTypeID");
			bulkCopy.ColumnMappings.Add("SEOTitle", "SEOTitle");
			bulkCopy.ColumnMappings.Add("SEOKeywords", "SEOKeywords");
			bulkCopy.ColumnMappings.Add("SEODescription", "SEODescription");
			bulkCopy.ColumnMappings.Add("Custom1", "Custom1");
			bulkCopy.ColumnMappings.Add("Custom2", "Custom2");
			bulkCopy.ColumnMappings.Add("Custom3", "Custom3");
			bulkCopy.ColumnMappings.Add("ShipEachItemSeparately", "ShipEachItemSeparately");
			bulkCopy.ColumnMappings.Add("SKU", "SKU");
			bulkCopy.ColumnMappings.Add("QuantityOnHand", "QuantityOnHand");
			bulkCopy.ColumnMappings.Add("AllowBackOrder", "AllowBackOrder");
			bulkCopy.ColumnMappings.Add("BackOrderMsg", "BackOrderMsg");
			bulkCopy.ColumnMappings.Add("DropShipInd", "DropShipInd");
			bulkCopy.ColumnMappings.Add("DropShipEmailID", "DropShipEmailID");
			bulkCopy.ColumnMappings.Add("Specifications", "Specifications");
			bulkCopy.ColumnMappings.Add("AdditionalInformation", "AdditionalInformation");
			bulkCopy.ColumnMappings.Add("InStockMsg", "InStockMsg");
			bulkCopy.ColumnMappings.Add("OutOfStockMsg", "OutOfStockMsg");
			bulkCopy.ColumnMappings.Add("TrackInventoryInd", "TrackInventoryInd");
			
			foreach(ZNode.Libraries.DataAccess.Entities.Product entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ProductID"] = entity.ProductID;
							
				
					row["PortalID"] = entity.PortalID;
							
				
					row["Name"] = entity.Name;
							
				
					row["ShortDescription"] = entity.ShortDescription;
							
				
					row["Description"] = entity.Description;
							
				
					row["FeaturesDesc"] = entity.FeaturesDesc;
							
				
					row["ProductNum"] = entity.ProductNum;
							
				
					row["ProductTypeID"] = entity.ProductTypeID;
							
				
					row["RetailPrice"] = entity.RetailPrice.HasValue ? (object) entity.RetailPrice  : System.DBNull.Value;
							
				
					row["WholesalePrice"] = entity.WholesalePrice.HasValue ? (object) entity.WholesalePrice  : System.DBNull.Value;
							
				
					row["SalePrice"] = entity.SalePrice.HasValue ? (object) entity.SalePrice  : System.DBNull.Value;
							
				
					row["ImageFile"] = entity.ImageFile;
							
				
					row["Weight"] = entity.Weight.HasValue ? (object) entity.Weight  : System.DBNull.Value;
							
				
					row["ActiveInd"] = entity.ActiveInd;
							
				
					row["DisplayOrder"] = entity.DisplayOrder;
							
				
					row["CallForPricing"] = entity.CallForPricing;
							
				
					row["HomepageSpecial"] = entity.HomepageSpecial;
							
				
					row["CategorySpecial"] = entity.CategorySpecial;
							
				
					row["InventoryDisplay"] = entity.InventoryDisplay;
							
				
					row["Keywords"] = entity.Keywords;
							
				
					row["ManufacturerID"] = entity.ManufacturerID.HasValue ? (object) entity.ManufacturerID  : System.DBNull.Value;
							
				
					row["AdditionalInfoLink"] = entity.AdditionalInfoLink;
							
				
					row["AdditionalInfoLinkLabel"] = entity.AdditionalInfoLinkLabel;
							
				
					row["ShippingRuleTypeID"] = entity.ShippingRuleTypeID.HasValue ? (object) entity.ShippingRuleTypeID  : System.DBNull.Value;
							
				
					row["SEOTitle"] = entity.SEOTitle;
							
				
					row["SEOKeywords"] = entity.SEOKeywords;
							
				
					row["SEODescription"] = entity.SEODescription;
							
				
					row["Custom1"] = entity.Custom1;
							
				
					row["Custom2"] = entity.Custom2;
							
				
					row["Custom3"] = entity.Custom3;
							
				
					row["ShipEachItemSeparately"] = entity.ShipEachItemSeparately.HasValue ? (object) entity.ShipEachItemSeparately  : System.DBNull.Value;
							
				
					row["SKU"] = entity.SKU;
							
				
					row["QuantityOnHand"] = entity.QuantityOnHand.HasValue ? (object) entity.QuantityOnHand  : System.DBNull.Value;
							
				
					row["AllowBackOrder"] = entity.AllowBackOrder.HasValue ? (object) entity.AllowBackOrder  : System.DBNull.Value;
							
				
					row["BackOrderMsg"] = entity.BackOrderMsg;
							
				
					row["DropShipInd"] = entity.DropShipInd.HasValue ? (object) entity.DropShipInd  : System.DBNull.Value;
							
				
					row["DropShipEmailID"] = entity.DropShipEmailID;
							
				
					row["Specifications"] = entity.Specifications;
							
				
					row["AdditionalInformation"] = entity.AdditionalInformation;
							
				
					row["InStockMsg"] = entity.InStockMsg;
							
				
					row["OutOfStockMsg"] = entity.OutOfStockMsg;
							
				
					row["TrackInventoryInd"] = entity.TrackInventoryInd.HasValue ? (object) entity.TrackInventoryInd  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(ZNode.Libraries.DataAccess.Entities.Product entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a ZNode.Libraries.DataAccess.Entities.Product object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Product object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the ZNode.Libraries.DataAccess.Entities.Product object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Product entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@ProductID", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, entity.PortalID );
			database.AddInParameter(commandWrapper, "@Name", DbType.String, entity.Name );
			database.AddInParameter(commandWrapper, "@ShortDescription", DbType.String, entity.ShortDescription );
			database.AddInParameter(commandWrapper, "@Description", DbType.String, entity.Description );
			database.AddInParameter(commandWrapper, "@FeaturesDesc", DbType.String, entity.FeaturesDesc );
			database.AddInParameter(commandWrapper, "@ProductNum", DbType.String, entity.ProductNum );
			database.AddInParameter(commandWrapper, "@ProductTypeID", DbType.Int32, entity.ProductTypeID );
			database.AddInParameter(commandWrapper, "@RetailPrice", DbType.Currency, (entity.RetailPrice.HasValue ? (object) entity.RetailPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WholesalePrice", DbType.Currency, (entity.WholesalePrice.HasValue ? (object) entity.WholesalePrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SalePrice", DbType.Currency, (entity.SalePrice.HasValue ? (object) entity.SalePrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ImageFile", DbType.String, entity.ImageFile );
			database.AddInParameter(commandWrapper, "@Weight", DbType.Decimal, (entity.Weight.HasValue ? (object) entity.Weight  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, entity.ActiveInd );
			database.AddInParameter(commandWrapper, "@DisplayOrder", DbType.Int32, entity.DisplayOrder );
			database.AddInParameter(commandWrapper, "@CallForPricing", DbType.Boolean, entity.CallForPricing );
			database.AddInParameter(commandWrapper, "@HomepageSpecial", DbType.Boolean, entity.HomepageSpecial );
			database.AddInParameter(commandWrapper, "@CategorySpecial", DbType.Boolean, entity.CategorySpecial );
			database.AddInParameter(commandWrapper, "@InventoryDisplay", DbType.Byte, entity.InventoryDisplay );
			database.AddInParameter(commandWrapper, "@Keywords", DbType.String, entity.Keywords );
			database.AddInParameter(commandWrapper, "@ManufacturerID", DbType.Int32, (entity.ManufacturerID.HasValue ? (object) entity.ManufacturerID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdditionalInfoLink", DbType.String, entity.AdditionalInfoLink );
			database.AddInParameter(commandWrapper, "@AdditionalInfoLinkLabel", DbType.String, entity.AdditionalInfoLinkLabel );
			database.AddInParameter(commandWrapper, "@ShippingRuleTypeID", DbType.Int32, (entity.ShippingRuleTypeID.HasValue ? (object) entity.ShippingRuleTypeID  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SEOTitle", DbType.String, entity.SEOTitle );
			database.AddInParameter(commandWrapper, "@SEOKeywords", DbType.String, entity.SEOKeywords );
			database.AddInParameter(commandWrapper, "@SEODescription", DbType.String, entity.SEODescription );
			database.AddInParameter(commandWrapper, "@Custom1", DbType.String, entity.Custom1 );
			database.AddInParameter(commandWrapper, "@Custom2", DbType.String, entity.Custom2 );
			database.AddInParameter(commandWrapper, "@Custom3", DbType.String, entity.Custom3 );
			database.AddInParameter(commandWrapper, "@ShipEachItemSeparately", DbType.Boolean, (entity.ShipEachItemSeparately.HasValue ? (object) entity.ShipEachItemSeparately  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SKU", DbType.String, entity.SKU );
			database.AddInParameter(commandWrapper, "@QuantityOnHand", DbType.Int32, (entity.QuantityOnHand.HasValue ? (object) entity.QuantityOnHand  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AllowBackOrder", DbType.Boolean, (entity.AllowBackOrder.HasValue ? (object) entity.AllowBackOrder  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BackOrderMsg", DbType.String, entity.BackOrderMsg );
			database.AddInParameter(commandWrapper, "@DropShipInd", DbType.Boolean, (entity.DropShipInd.HasValue ? (object) entity.DropShipInd  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DropShipEmailID", DbType.String, entity.DropShipEmailID );
			database.AddInParameter(commandWrapper, "@Specifications", DbType.String, entity.Specifications );
			database.AddInParameter(commandWrapper, "@AdditionalInformation", DbType.String, entity.AdditionalInformation );
			database.AddInParameter(commandWrapper, "@InStockMsg", DbType.String, entity.InStockMsg );
			database.AddInParameter(commandWrapper, "@OutOfStockMsg", DbType.String, entity.OutOfStockMsg );
			database.AddInParameter(commandWrapper, "@TrackInventoryInd", DbType.Boolean, (entity.TrackInventoryInd.HasValue ? (object) entity.TrackInventoryInd  : System.DBNull.Value));
			
			int results = 0;
			
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.ProductID = (System.Int32) database.GetParameterValue(commandWrapper, "@ProductID");						
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ZNode.Libraries.DataAccess.Entities.Product object to update.</param>
		/// <remarks>
		///		After updating the datasource, the ZNode.Libraries.DataAccess.Entities.Product object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, ZNode.Libraries.DataAccess.Entities.Product entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZNODE_NT_ZNodeProduct_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@ProductID", DbType.Int32, entity.ProductID );
			database.AddInParameter(commandWrapper, "@PortalID", DbType.Int32, entity.PortalID );
			database.AddInParameter(commandWrapper, "@Name", DbType.String, entity.Name );
			database.AddInParameter(commandWrapper, "@ShortDescription", DbType.String, entity.ShortDescription );
			database.AddInParameter(commandWrapper, "@Description", DbType.String, entity.Description );
			database.AddInParameter(commandWrapper, "@FeaturesDesc", DbType.String, entity.FeaturesDesc );
			database.AddInParameter(commandWrapper, "@ProductNum", DbType.String, entity.ProductNum );
			database.AddInParameter(commandWrapper, "@ProductTypeID", DbType.Int32, entity.ProductTypeID );
			database.AddInParameter(commandWrapper, "@RetailPrice", DbType.Currency, (entity.RetailPrice.HasValue ? (object) entity.RetailPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WholesalePrice", DbType.Currency, (entity.WholesalePrice.HasValue ? (object) entity.WholesalePrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SalePrice", DbType.Currency, (entity.SalePrice.HasValue ? (object) entity.SalePrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ImageFile", DbType.String, entity.ImageFile );
			database.AddInParameter(commandWrapper, "@Weight", DbType.Decimal, (entity.Weight.HasValue ? (object) entity.Weight : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ActiveInd", DbType.Boolean, entity.ActiveInd );
			database.AddInParameter(commandWrapper, "@DisplayOrder", DbType.Int32, entity.DisplayOrder );
			database.AddInParameter(commandWrapper, "@CallForPricing", DbType.Boolean, entity.CallForPricing );
			database.AddInParameter(commandWrapper, "@HomepageSpecial", DbType.Boolean, entity.HomepageSpecial );
			database.AddInParameter(commandWrapper, "@CategorySpecial", DbType.Boolean, entity.CategorySpecial );
			database.AddInParameter(commandWrapper, "@InventoryDisplay", DbType.Byte, entity.InventoryDisplay );
			database.AddInParameter(commandWrapper, "@Keywords", DbType.String, entity.Keywords );
			database.AddInParameter(commandWrapper, "@ManufacturerID", DbType.Int32, (entity.ManufacturerID.HasValue ? (object) entity.ManufacturerID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdditionalInfoLink", DbType.String, entity.AdditionalInfoLink );
			database.AddInParameter(commandWrapper, "@AdditionalInfoLinkLabel", DbType.String, entity.AdditionalInfoLinkLabel );
			database.AddInParameter(commandWrapper, "@ShippingRuleTypeID", DbType.Int32, (entity.ShippingRuleTypeID.HasValue ? (object) entity.ShippingRuleTypeID : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SEOTitle", DbType.String, entity.SEOTitle );
			database.AddInParameter(commandWrapper, "@SEOKeywords", DbType.String, entity.SEOKeywords );
			database.AddInParameter(commandWrapper, "@SEODescription", DbType.String, entity.SEODescription );
			database.AddInParameter(commandWrapper, "@Custom1", DbType.String, entity.Custom1 );
			database.AddInParameter(commandWrapper, "@Custom2", DbType.String, entity.Custom2 );
			database.AddInParameter(commandWrapper, "@Custom3", DbType.String, entity.Custom3 );
			database.AddInParameter(commandWrapper, "@ShipEachItemSeparately", DbType.Boolean, (entity.ShipEachItemSeparately.HasValue ? (object) entity.ShipEachItemSeparately : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SKU", DbType.String, entity.SKU );
			database.AddInParameter(commandWrapper, "@QuantityOnHand", DbType.Int32, (entity.QuantityOnHand.HasValue ? (object) entity.QuantityOnHand : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AllowBackOrder", DbType.Boolean, (entity.AllowBackOrder.HasValue ? (object) entity.AllowBackOrder : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BackOrderMsg", DbType.String, entity.BackOrderMsg );
			database.AddInParameter(commandWrapper, "@DropShipInd", DbType.Boolean, (entity.DropShipInd.HasValue ? (object) entity.DropShipInd : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DropShipEmailID", DbType.String, entity.DropShipEmailID );
			database.AddInParameter(commandWrapper, "@Specifications", DbType.String, entity.Specifications );
			database.AddInParameter(commandWrapper, "@AdditionalInformation", DbType.String, entity.AdditionalInformation );
			database.AddInParameter(commandWrapper, "@InStockMsg", DbType.String, entity.InStockMsg );
			database.AddInParameter(commandWrapper, "@OutOfStockMsg", DbType.String, entity.OutOfStockMsg );
			database.AddInParameter(commandWrapper, "@TrackInventoryInd", DbType.Boolean, (entity.TrackInventoryInd.HasValue ? (object) entity.TrackInventoryInd : System.DBNull.Value) );
			
			int results = 0;
			
			
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
